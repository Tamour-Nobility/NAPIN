

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace NPMAPI.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class NPMDBEntities : DbContext
{
    public NPMDBEntities()
        : base("name=NPMDBEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Appointment_Status> Appointment_Status { get; set; }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<Claims_ICD10DX> Claims_ICD10DX { get; set; }

    public virtual DbSet<Claims_Ptl_Feedback> Claims_Ptl_Feedback { get; set; }

    public virtual DbSet<CLAIMS_SUBMITTED> CLAIMS_SUBMITTED { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<Designation> Designations { get; set; }

    public virtual DbSet<Diagnosi> Diagnosis { get; set; }

    public virtual DbSet<ethnicity> ethnicities { get; set; }

    public virtual DbSet<Gender> Genders { get; set; }

    public virtual DbSet<Group_Provider> Group_Provider { get; set; }

    public virtual DbSet<Guarantor> Guarantors { get; set; }

    public virtual DbSet<Insurance_Groups> Insurance_Groups { get; set; }

    public virtual DbSet<Insurance_Notes> Insurance_Notes { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<MaritalStatu> MaritalStatus { get; set; }

    public virtual DbSet<Patient_Notes> Patient_Notes { get; set; }

    public virtual DbSet<Patient_Ptl_Feedback> Patient_Ptl_Feedback { get; set; }

    public virtual DbSet<Practice_CPT_Plan> Practice_CPT_Plan { get; set; }

    public virtual DbSet<Practice_Providers_Plan> Practice_Providers_Plan { get; set; }

    public virtual DbSet<Practice_Providers_Plan_Group> Practice_Providers_Plan_Group { get; set; }

    public virtual DbSet<Provider_Cpt_Plan_Notes> Provider_Cpt_Plan_Notes { get; set; }

    public virtual DbSet<Provider_Diagnosis> Provider_Diagnosis { get; set; }

    public virtual DbSet<Provider_Notes> Provider_Notes { get; set; }

    public virtual DbSet<Provider_Resources> Provider_Resources { get; set; }

    public virtual DbSet<Provider_Working_Days_Time> Provider_Working_Days_Time { get; set; }

    public virtual DbSet<Provider_Year_Holidays> Provider_Year_Holidays { get; set; }

    public virtual DbSet<Providers_Plan> Providers_Plan { get; set; }

    public virtual DbSet<Providers_Plan_Group> Providers_Plan_Group { get; set; }

    public virtual DbSet<PTLReason> PTLReasons { get; set; }

    public virtual DbSet<Race> Races { get; set; }

    public virtual DbSet<Referral_Physicians> Referral_Physicians { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Team> Teams { get; set; }

    public virtual DbSet<UsersLog> UsersLogs { get; set; }

    public virtual DbSet<Zip_City_State> Zip_City_State { get; set; }

    public virtual DbSet<cpt_pricing_modifier> cpt_pricing_modifier { get; set; }

    public virtual DbSet<EOB_Adjustment_Codes> EOB_Adjustment_Codes { get; set; }

    public virtual DbSet<Practice_Specialty> Practice_Specialty { get; set; }

    public virtual DbSet<Practice_Types> Practice_Types { get; set; }

    public virtual DbSet<STANDARD_CPT_FEE> STANDARD_CPT_FEE { get; set; }

    public virtual DbSet<zip_state> zip_state { get; set; }

    public virtual DbSet<AddressType> AddressTypes { get; set; }

    public virtual DbSet<EPSDTWORKERINFO> EPSDTWORKERINFOes { get; set; }

    public virtual DbSet<InsCardCategory> InsCardCategories { get; set; }

    public virtual DbSet<Insurance_Departments> Insurance_Departments { get; set; }

    public virtual DbSet<SubmissionMethod> SubmissionMethods { get; set; }

    public virtual DbSet<Phone_Types> Phone_Types { get; set; }

    public virtual DbSet<Insurance_Payers> Insurance_Payers { get; set; }

    public virtual DbSet<Insurance> Insurances { get; set; }

    public virtual DbSet<Practice_Notes> Practice_Notes { get; set; }

    public virtual DbSet<Practice_Groups> Practice_Groups { get; set; }

    public virtual DbSet<Users_Roles> Users_Roles { get; set; }

    public virtual DbSet<Office> Offices { get; set; }

    public virtual DbSet<Shift> Shifts { get; set; }

    public virtual DbSet<Practice_Special_Instruction_AnswersReview> Practice_Special_Instruction_AnswersReview { get; set; }

    public virtual DbSet<Practice_Special_Instruction_Category> Practice_Special_Instruction_Category { get; set; }

    public virtual DbSet<Practice_Special_Instruction_Questions> Practice_Special_Instruction_Questions { get; set; }

    public virtual DbSet<Practice_Special_Instruction_Answers> Practice_Special_Instruction_Answers { get; set; }

    public virtual DbSet<PRACTICE_FACILITY> PRACTICE_FACILITY { get; set; }

    public virtual DbSet<Module_Properties> Module_Properties { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<Users_Module_Properties> Users_Module_Properties { get; set; }

    public virtual DbSet<Specialty_Category> Specialty_Category { get; set; }

    public virtual DbSet<Specialty_Groups> Specialty_Groups { get; set; }

    public virtual DbSet<WCBRating> WCBRatings { get; set; }

    public virtual DbSet<Practice_Locations> Practice_Locations { get; set; }

    public virtual DbSet<Nobility_standardcptfee> Nobility_standardcptfee { get; set; }

    public virtual DbSet<Place_Of_Services> Place_Of_Services { get; set; }

    public virtual DbSet<Specialization> Specializations { get; set; }

    public virtual DbSet<Provider> Providers { get; set; }

    public virtual DbSet<Users_Practice_Provider> Users_Practice_Provider { get; set; }

    public virtual DbSet<Modifier> Modifiers { get; set; }

    public virtual DbSet<claim_batch_error> claim_batch_error { get; set; }

    public virtual DbSet<RefreshToken> RefreshTokens { get; set; }

    public virtual DbSet<appointment_reasons> appointment_reasons { get; set; }

    public virtual DbSet<PracticeAppointmentStatu> PracticeAppointmentStatus { get; set; }

    public virtual DbSet<PracticeAppointmentReason> PracticeAppointmentReasons { get; set; }

    public virtual DbSet<Relationship> Relationships { get; set; }

    public virtual DbSet<ResubmissionCode> ResubmissionCodes { get; set; }

    public virtual DbSet<era> eras { get; set; }

    public virtual DbSet<era_adjustment> era_adjustment { get; set; }

    public virtual DbSet<era_claim> era_claim { get; set; }

    public virtual DbSet<era_claim_service> era_claim_service { get; set; }

    public virtual DbSet<era_provider_adjustment> era_provider_adjustment { get; set; }

    public virtual DbSet<ERA_Adjustment_Mapping> ERA_Adjustment_Mapping { get; set; }

    public virtual DbSet<AppealAttachment> AppealAttachments { get; set; }

    public virtual DbSet<HCFAImage> HCFAImages { get; set; }

    public virtual DbSet<Maintenance> Maintenances { get; set; }

    public virtual DbSet<UTBL_EnrollmentTracker> UTBL_EnrollmentTracker { get; set; }

    public virtual DbSet<AGING_SUMMARY_PATIENT_REPORT> AGING_SUMMARY_PATIENT_REPORT { get; set; }

    public virtual DbSet<Attachment_TypeCode> Attachment_TypeCode { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Claim_Charges_Summary> Claim_Charges_Summary { get; set; }

    public virtual DbSet<claim_info_worker_injurycase> claim_info_worker_injurycase { get; set; }

    public virtual DbSet<claim_reject_type_CO> claim_reject_type_CO { get; set; }

    public virtual DbSet<Claim_Status_Codes> Claim_Status_Codes { get; set; }

    public virtual DbSet<Claim_Worker_Injurycase> Claim_Worker_Injurycase { get; set; }

    public virtual DbSet<claims_bkp_10012019> claims_bkp_10012019 { get; set; }

    public virtual DbSet<Claims_filling_limit> Claims_filling_limit { get; set; }

    public virtual DbSet<ClaimStatus_Search_Criteria> ClaimStatus_Search_Criteria { get; set; }

    public virtual DbSet<CLC_Assigned_Roles> CLC_Assigned_Roles { get; set; }

    public virtual DbSet<CLC_Roles> CLC_Roles { get; set; }

    public virtual DbSet<consortium_lookup> consortium_lookup { get; set; }

    public virtual DbSet<contractor> contractors { get; set; }

    public virtual DbSet<contractor_jurisdiction> contractor_jurisdiction { get; set; }

    public virtual DbSet<contractor_type_lookup> contractor_type_lookup { get; set; }

    public virtual DbSet<coverage_topic_lookup> coverage_topic_lookup { get; set; }

    public virtual DbSet<CPADASHBOARD> CPADASHBOARDs { get; set; }

    public virtual DbSet<Cpt_Current_Status> Cpt_Current_Status { get; set; }

    public virtual DbSet<CPT_Fee_Charge> CPT_Fee_Charge { get; set; }

    public virtual DbSet<CPT_FEE_STRUCTURE> CPT_FEE_STRUCTURE { get; set; }

    public virtual DbSet<CPT_HOSPBILLS> CPT_HOSPBILLS { get; set; }

    public virtual DbSet<CustomField> CustomFields { get; set; }

    public virtual DbSet<Customised_diagnosis_Description> Customised_diagnosis_Description { get; set; }

    public virtual DbSet<Customised_Procedure_Description> Customised_Procedure_Description { get; set; }

    public virtual DbSet<Days_Of_Week> Days_Of_Week { get; set; }

    public virtual DbSet<default_group_IDs> default_group_IDs { get; set; }

    public virtual DbSet<Default_Setting_Practice> Default_Setting_Practice { get; set; }

    public virtual DbSet<Delivery_Zone> Delivery_Zone { get; set; }

    public virtual DbSet<deposit> deposits { get; set; }

    public virtual DbSet<Deposit_Bank> Deposit_Bank { get; set; }

    public virtual DbSet<Deposit_Bank_Detail> Deposit_Bank_Detail { get; set; }

    public virtual DbSet<DEPOSIT_SLIPS> DEPOSIT_SLIPS { get; set; }

    public virtual DbSet<deposit1> deposits1 { get; set; }

    public virtual DbSet<DeptShiftTiming> DeptShiftTimings { get; set; }

    public virtual DbSet<DIAGNOSIS_PAYER> DIAGNOSIS_PAYER { get; set; }

    public virtual DbSet<DiagnosisAccDel> DiagnosisAccDels { get; set; }

    public virtual DbSet<dmerc_region_lookup> dmerc_region_lookup { get; set; }

    public virtual DbSet<DOCUMENT_CATEGORIES> DOCUMENT_CATEGORIES { get; set; }

    public virtual DbSet<DO> DOS { get; set; }

    public virtual DbSet<DOSAGE_UNITS> DOSAGE_UNITS { get; set; }

    public virtual DbSet<Dummy> Dummies { get; set; }

    public virtual DbSet<EFS_ImpactSummary> EFS_ImpactSummary { get; set; }

    public virtual DbSet<EFS_Practices> EFS_Practices { get; set; }

    public virtual DbSet<EFS_Suggested> EFS_Suggested { get; set; }

    public virtual DbSet<ENROLLMENT_TRACKER> ENROLLMENT_TRACKER { get; set; }

    public virtual DbSet<epssdataoriginal> epssdataoriginals { get; set; }

    public virtual DbSet<ERA_ADJUSTMENT_MAPPING_BKP_012721> ERA_ADJUSTMENT_MAPPING_BKP_012721 { get; set; }

    public virtual DbSet<Facility_Insurance_Id> Facility_Insurance_Id { get; set; }

    public virtual DbSet<Facility_Notes> Facility_Notes { get; set; }

    public virtual DbSet<Fee_Plan_Update> Fee_Plan_Update { get; set; }

    public virtual DbSet<Fiancial_Summary> Fiancial_Summary { get; set; }

    public virtual DbSet<FINANCIAL_SUMMARY_REPORT> FINANCIAL_SUMMARY_REPORT { get; set; }

    public virtual DbSet<BALANCE> BALANCEs { get; set; }

    public virtual DbSet<Group_Location> Group_Location { get; set; }

    public virtual DbSet<Hard_Coded_Value> Hard_Coded_Value { get; set; }

    public virtual DbSet<Hard_Coded_Valuenew> Hard_Coded_Valuenew { get; set; }

    public virtual DbSet<HCFA_Attachment_Type> HCFA_Attachment_Type { get; set; }

    public virtual DbSet<HCFA_Notes_List> HCFA_Notes_List { get; set; }

    public virtual DbSet<HCFAImagesType> HCFAImagesTypes { get; set; }

    public virtual DbSet<hcpc_code_lookup> hcpc_code_lookup { get; set; }

    public virtual DbSet<HIPAA_278_PAYER_INFORMATION> HIPAA_278_PAYER_INFORMATION { get; set; }

    public virtual DbSet<hospital_affilation> hospital_affilation { get; set; }

    public virtual DbSet<icd9_code_lookup> icd9_code_lookup { get; set; }

    public virtual DbSet<include_in_edi> include_in_edi { get; set; }

    public virtual DbSet<ins_provider_no> ins_provider_no { get; set; }

    public virtual DbSet<instruction_history_New> instruction_history_New { get; set; }

    public virtual DbSet<Insurance_Denials> Insurance_Denials { get; set; }

    public virtual DbSet<INSURANCE_FILING_LIMIT> INSURANCE_FILING_LIMIT { get; set; }

    public virtual DbSet<Insurance_filing_limit2> Insurance_filing_limit2 { get; set; }

    public virtual DbSet<Insurance_Payers_Bkp_08232020> Insurance_Payers_Bkp_08232020 { get; set; }

    public virtual DbSet<Insurance_payers_formats> Insurance_payers_formats { get; set; }

    public virtual DbSet<INSURANCE_PAYERS_PLAN> INSURANCE_PAYERS_PLAN { get; set; }

    public virtual DbSet<Insurance_Payers_Plan_Group> Insurance_Payers_Plan_Group { get; set; }

    public virtual DbSet<Insurance_Phone_Directory> Insurance_Phone_Directory { get; set; }

    public virtual DbSet<insurance_role_engine> insurance_role_engine { get; set; }

    public virtual DbSet<Insurances_Bkp_08232020> Insurances_Bkp_08232020 { get; set; }

    public virtual DbSet<Insurnace_Names_Bkp_08232020> Insurnace_Names_Bkp_08232020 { get; set; }

    public virtual DbSet<lcd> lcds { get; set; }

    public virtual DbSet<lcd_future_retire> lcd_future_retire { get; set; }

    public virtual DbSet<lcd_related_documents> lcd_related_documents { get; set; }

    public virtual DbSet<lcd_x_bill_code> lcd_x_bill_code { get; set; }

    public virtual DbSet<lcd_x_contractor> lcd_x_contractor { get; set; }

    public virtual DbSet<lcd_x_coverage_topic> lcd_x_coverage_topic { get; set; }

    public virtual DbSet<lcd_x_hcpc_code> lcd_x_hcpc_code { get; set; }

    public virtual DbSet<lcd_x_hcpc_code_group> lcd_x_hcpc_code_group { get; set; }

    public virtual DbSet<lcd_x_icd9_dont_support> lcd_x_icd9_dont_support { get; set; }

    public virtual DbSet<lcd_x_icd9_support> lcd_x_icd9_support { get; set; }

    public virtual DbSet<lcd_x_icd9_support_group> lcd_x_icd9_support_group { get; set; }

    public virtual DbSet<lcd_x_primary_jurisdiction> lcd_x_primary_jurisdiction { get; set; }

    public virtual DbSet<lcd_x_revenue_code> lcd_x_revenue_code { get; set; }

    public virtual DbSet<lcd_x_secondary_jurisdiction> lcd_x_secondary_jurisdiction { get; set; }

    public virtual DbSet<lkup_location_ids> lkup_location_ids { get; set; }

    public virtual DbSet<mainfacility> mainfacilities { get; set; }

    public virtual DbSet<maintenance_counter> maintenance_counter { get; set; }

    public virtual DbSet<MEDICINE> MEDICINEs { get; set; }

    public virtual DbSet<MEDICINE_FORMULATION> MEDICINE_FORMULATION { get; set; }

    public virtual DbSet<Medigap_Insurances> Medigap_Insurances { get; set; }

    public virtual DbSet<MEMO_MAPPING> MEMO_MAPPING { get; set; }

    public virtual DbSet<MEMO_MAPPING_PRACTICE_PLAN> MEMO_MAPPING_PRACTICE_PLAN { get; set; }

    public virtual DbSet<mis_tbl_AttachmentType_Setup> mis_tbl_AttachmentType_Setup { get; set; }

    public virtual DbSet<MIS_TBL_Corrected_Claim_Reason> MIS_TBL_Corrected_Claim_Reason { get; set; }

    public virtual DbSet<MIS_TBL_CPT_Reason> MIS_TBL_CPT_Reason { get; set; }

    public virtual DbSet<mis_tbl_fillcombo> mis_tbl_fillcombo { get; set; }

    public virtual DbSet<MIS_TBL_Institution_Condition_Code> MIS_TBL_Institution_Condition_Code { get; set; }

    public virtual DbSet<MIS_TBL_Insurance_Resources_Remarks> MIS_TBL_Insurance_Resources_Remarks { get; set; }

    public virtual DbSet<NAME> NAMES { get; set; }

    public virtual DbSet<NEW_CATEGORY> NEW_CATEGORY { get; set; }

    public virtual DbSet<NEW_GCODE> NEW_GCODE { get; set; }

    public virtual DbSet<NEW_PATIENTLETTER_FIELDS> NEW_PATIENTLETTER_FIELDS { get; set; }

    public virtual DbSet<Notes_Description> Notes_Description { get; set; }

    public virtual DbSet<Notes_Description_Category> Notes_Description_Category { get; set; }

    public virtual DbSet<office_employees> office_employees { get; set; }

    public virtual DbSet<Office_Test_Detail> Office_Test_Detail { get; set; }

    public virtual DbSet<Office_tests> Office_tests { get; set; }

    public virtual DbSet<patient_bkp_11282018> patient_bkp_11282018 { get; set; }

    public virtual DbSet<patient_bkp11282018> patient_bkp11282018 { get; set; }

    public virtual DbSet<PAYER> PAYERs { get; set; }

    public virtual DbSet<Payer_Facility_Id> Payer_Facility_Id { get; set; }

    public virtual DbSet<payer_not_450> payer_not_450 { get; set; }

    public virtual DbSet<Payer_Notes> Payer_Notes { get; set; }

    public virtual DbSet<PayerPortal_Notes> PayerPortal_Notes { get; set; }

    public virtual DbSet<payment> payments { get; set; }

    public virtual DbSet<PHARMACy> PHARMACIES { get; set; }

    public virtual DbSet<PHY_BA_AGREEMENT> PHY_BA_AGREEMENT { get; set; }

    public virtual DbSet<physcian_information> physcian_information { get; set; }

    public virtual DbSet<place_of_services_bkp_11082018> place_of_services_bkp_11082018 { get; set; }

    public virtual DbSet<Plan_setup> Plan_setup { get; set; }

    public virtual DbSet<Possible_Options> Possible_Options { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<PP_BillingSoftware> PP_BillingSoftware { get; set; }

    public virtual DbSet<PQRI_INDIVIDUAL_MEASURES> PQRI_INDIVIDUAL_MEASURES { get; set; }

    public virtual DbSet<Prac_MeetingSchedule> Prac_MeetingSchedule { get; set; }

    public virtual DbSet<Prac_Term_Date_Steps> Prac_Term_Date_Steps { get; set; }

    public virtual DbSet<Prac_TermDate_Process> Prac_TermDate_Process { get; set; }

    public virtual DbSet<Practice_Bank_Statement> Practice_Bank_Statement { get; set; }

    public virtual DbSet<PRACTICE_CALLING_DAY_CRITERIA> PRACTICE_CALLING_DAY_CRITERIA { get; set; }

    public virtual DbSet<Practice_Contract> Practice_Contract { get; set; }

    public virtual DbSet<PRACTICE_CPT_PLAN_GROUP> PRACTICE_CPT_PLAN_GROUP { get; set; }

    public virtual DbSet<Practice_Daily_Missing_Work> Practice_Daily_Missing_Work { get; set; }

    public virtual DbSet<PRACTICE_DIAGNOSIS1> PRACTICE_DIAGNOSIS1 { get; set; }

    public virtual DbSet<PRACTICE_DIVISION> PRACTICE_DIVISION { get; set; }

    public virtual DbSet<practice_gender> practice_gender { get; set; }

    public virtual DbSet<practice_information> practice_information { get; set; }

    public virtual DbSet<PRACTICE_LOCATIONS_PLAN> PRACTICE_LOCATIONS_PLAN { get; set; }

    public virtual DbSet<Practice_Locations_Plan_Group> Practice_Locations_Plan_Group { get; set; }

    public virtual DbSet<Practice_NPI_confirmation> Practice_NPI_confirmation { get; set; }

    public virtual DbSet<PRACTICE_PROCEDURE1> PRACTICE_PROCEDURE1 { get; set; }

    public virtual DbSet<PRACTICE_SERVER> PRACTICE_SERVER { get; set; }

    public virtual DbSet<Practice_SignUp_Contact_Information> Practice_SignUp_Contact_Information { get; set; }

    public virtual DbSet<Practice_SignUp_Daily_Office_Hours> Practice_SignUp_Daily_Office_Hours { get; set; }

    public virtual DbSet<Practice_SignUp_Insurance_Information> Practice_SignUp_Insurance_Information { get; set; }

    public virtual DbSet<Practice_SignUp_Physician_Capitation> Practice_SignUp_Physician_Capitation { get; set; }

    public virtual DbSet<Practice_SignUp_Physician_Facilities_Info> Practice_SignUp_Physician_Facilities_Info { get; set; }

    public virtual DbSet<Practice_SignUp_Referring_Physician> Practice_SignUp_Referring_Physician { get; set; }

    public virtual DbSet<Practice_SMS_Settings> Practice_SMS_Settings { get; set; }

    public virtual DbSet<Practice_Termination> Practice_Termination { get; set; }

    public virtual DbSet<Practice_Termination_Steps> Practice_Termination_Steps { get; set; }

    public virtual DbSet<Practice_Transcription_Amount> Practice_Transcription_Amount { get; set; }

    public virtual DbSet<Practice_Transcription_Rate> Practice_Transcription_Rate { get; set; }

    public virtual DbSet<PRACTICES_BKP_021619> PRACTICES_BKP_021619 { get; set; }

    public virtual DbSet<Practices_Techincal_Information> Practices_Techincal_Information { get; set; }

    public virtual DbSet<Practices_VAS_Other> Practices_VAS_Other { get; set; }

    public virtual DbSet<Procedure_Category> Procedure_Category { get; set; }

    public virtual DbSet<PROCEDURES_ALERTS> PROCEDURES_ALERTS { get; set; }

    public virtual DbSet<Procedures_Payer> Procedures_Payer { get; set; }

    public virtual DbSet<Provider_Cpt_Contractual_Plan> Provider_Cpt_Contractual_Plan { get; set; }

    public virtual DbSet<Provider_Cpt_Contractual_Plan_Details> Provider_Cpt_Contractual_Plan_Details { get; set; }

    public virtual DbSet<Provider_Cpt_Contractual_Plan_Notes> Provider_Cpt_Contractual_Plan_Notes { get; set; }

    public virtual DbSet<Provider_Initial_Settings> Provider_Initial_Settings { get; set; }

    public virtual DbSet<Provider_Oncall> Provider_Oncall { get; set; }

    public virtual DbSet<PROVIDER_PAYER_PRINTCENTER> PROVIDER_PAYER_PRINTCENTER { get; set; }

    public virtual DbSet<PROVIDER_PROCEDURES> PROVIDER_PROCEDURES { get; set; }

    public virtual DbSet<Provider_Resource_Mapping> Provider_Resource_Mapping { get; set; }

    public virtual DbSet<Provider_US_Holidays> Provider_US_Holidays { get; set; }

    public virtual DbSet<Provider_Working_Days_Time_Temp> Provider_Working_Days_Time_Temp { get; set; }

    public virtual DbSet<providers_reasons_timeunits> providers_reasons_timeunits { get; set; }

    public virtual DbSet<Ptl_Description> Ptl_Description { get; set; }

    public virtual DbSet<ptl_filing_limit> ptl_filing_limit { get; set; }

    public virtual DbSet<region_lookup> region_lookup { get; set; }

    public virtual DbSet<resource_settings> resource_settings { get; set; }

    public virtual DbSet<Resource> Resources { get; set; }

    public virtual DbSet<revenue_code_lookup> revenue_code_lookup { get; set; }

    public virtual DbSet<rolesss> rolessses { get; set; }

    public virtual DbSet<room_booking_appointment> room_booking_appointment { get; set; }

    public virtual DbSet<room_location> room_location { get; set; }

    public virtual DbSet<room_status> room_status { get; set; }

    public virtual DbSet<ROUTE> ROUTES { get; set; }

    public virtual DbSet<Sceduler_Types> Sceduler_Types { get; set; }

    public virtual DbSet<Scheduler_customization> Scheduler_customization { get; set; }

    public virtual DbSet<Scheduler_Types> Scheduler_Types { get; set; }

    public virtual DbSet<Scheduling_Workday_Options> Scheduling_Workday_Options { get; set; }

    public virtual DbSet<Second_level_rejection> Second_level_rejection { get; set; }

    public virtual DbSet<Service_Type_Codes> Service_Type_Codes { get; set; }

    public virtual DbSet<SPECIALIZATION1> SPECIALIZATION1 { get; set; }

    public virtual DbSet<SPS_Reason> SPS_Reason { get; set; }

    public virtual DbSet<SS_abn_codes> SS_abn_codes { get; set; }

    public virtual DbSet<state_lookup> state_lookup { get; set; }

    public virtual DbSet<state_x_consortium> state_x_consortium { get; set; }

    public virtual DbSet<state_x_region> state_x_region { get; set; }

    public virtual DbSet<Submission_plan> Submission_plan { get; set; }

    public virtual DbSet<submission_Plan_bkp> submission_Plan_bkp { get; set; }

    public virtual DbSet<Submission_Schedual> Submission_Schedual { get; set; }

    public virtual DbSet<submission_servers> submission_servers { get; set; }

    public virtual DbSet<SUBMISSION_SETUP> SUBMISSION_SETUP { get; set; }

    public virtual DbSet<submissionPlan> submissionPlans { get; set; }

    public virtual DbSet<Superbill_Types> Superbill_Types { get; set; }

    public virtual DbSet<TableIdCounter> TableIdCounters { get; set; }

    public virtual DbSet<TASK_CATEGORIES> TASK_CATEGORIES { get; set; }

    public virtual DbSet<TASK> TASKS { get; set; }

    public virtual DbSet<Taxonomy_Codes> Taxonomy_Codes { get; set; }

    public virtual DbSet<TEAM_SUPERVISORS> TEAM_SUPERVISORS { get; set; }

    public virtual DbSet<TIME_SLOT_ASSIGNED_REASONS> TIME_SLOT_ASSIGNED_REASONS { get; set; }

    public virtual DbSet<Type_Of_Services> Type_Of_Services { get; set; }

    public virtual DbSet<US_Holidays> US_Holidays { get; set; }

    public virtual DbSet<User_Group> User_Group { get; set; }

    public virtual DbSet<Users_Settings> Users_Settings { get; set; }

    public virtual DbSet<UsertaskAssigned> UsertaskAssigneds { get; set; }

    public virtual DbSet<USP> USPs { get; set; }

    public virtual DbSet<Value_Added_Services> Value_Added_Services { get; set; }

    public virtual DbSet<VAS_Types> VAS_Types { get; set; }

    public virtual DbSet<WeekDay> WeekDays { get; set; }

    public virtual DbSet<Claim_Insurance> Claim_Insurance { get; set; }

    public virtual DbSet<Patient_Attachments> Patient_Attachments { get; set; }

    public virtual DbSet<Provider_Appointment_Rules> Provider_Appointment_Rules { get; set; }

    public virtual DbSet<PracticeSynchronizationLog> PracticeSynchronizationLogs { get; set; }

    public virtual DbSet<PracticeVendor> PracticeVendors { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    public virtual DbSet<PaymentType> PaymentTypes { get; set; }

    public virtual DbSet<SyncedClaimPayment> SyncedClaimPayments { get; set; }

    public virtual DbSet<SyncedClaim> SyncedClaims { get; set; }

    public virtual DbSet<SyncedPatient> SyncedPatients { get; set; }

    public virtual DbSet<SyncedPractice> SyncedPractices { get; set; }

    public virtual DbSet<SyncedPracticeLocation> SyncedPracticeLocations { get; set; }

    public virtual DbSet<SyncedProvider> SyncedProviders { get; set; }

    public virtual DbSet<BatchPatientClaim> BatchPatientClaims { get; set; }

    public virtual DbSet<SyncedClaimCharge> SyncedClaimCharges { get; set; }

    public virtual DbSet<PracticeSynchronization> PracticeSynchronizations { get; set; }

    public virtual DbSet<PatientPaymentProcessed> PatientPaymentProcesseds { get; set; }

    public virtual DbSet<Service_Type_Codes_Description> Service_Type_Codes_Description { get; set; }

    public virtual DbSet<AGING_SUMMARY_REPORT> AGING_SUMMARY_REPORT { get; set; }

    public virtual DbSet<TWO_FACTOR_AUTHORAZITION> TWO_FACTOR_AUTHORAZITION { get; set; }

    public virtual DbSet<AccountAssignee_AL> AccountAssignee_AL { get; set; }

    public virtual DbSet<AccountAssignee_Notes> AccountAssignee_Notes { get; set; }

    public virtual DbSet<ClaimAssignee_CL> ClaimAssignee_CL { get; set; }

    public virtual DbSet<ClaimAssignee_Notes> ClaimAssignee_Notes { get; set; }

    public virtual DbSet<User_era_request> User_era_request { get; set; }

    public virtual DbSet<ERACHECKDETAIL> ERACHECKDETAILs { get; set; }

    public virtual DbSet<Module> Modules { get; set; }

    public virtual DbSet<Insurance_Names> Insurance_Names { get; set; }

    public virtual DbSet<ScrubberQueue> ScrubberQueues { get; set; }

    public virtual DbSet<ERASUMMARY> ERASUMMARies { get; set; }

    public virtual DbSet<Patient_Statement_Messages> Patient_Statement_Messages { get; set; }

    public virtual DbSet<Roles_Module_Properties> Roles_Module_Properties { get; set; }

    public virtual DbSet<Sub_Module> Sub_Module { get; set; }

    public virtual DbSet<Custom_Scrubber_Rules> Custom_Scrubber_Rules { get; set; }

    public virtual DbSet<NpmAlert> NpmAlerts { get; set; }

    public virtual DbSet<ERA_PLB_CODE> ERA_PLB_CODE { get; set; }

    public virtual DbSet<CustomValue> CustomValues { get; set; }

    public virtual DbSet<GetColumn_List> GetColumn_List { get; set; }

    public virtual DbSet<NDC_CrossWalk> NDC_CrossWalk { get; set; }

    public virtual DbSet<Division> Divisions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<ExternalPractices_Reporting> ExternalPractices_Reporting { get; set; }

    public virtual DbSet<Claim_Charges> Claim_Charges { get; set; }

    public virtual DbSet<Occurrence_Codes> Occurrence_Codes { get; set; }

    public virtual DbSet<Occurrence_Span_Codes> Occurrence_Span_Codes { get; set; }

    public virtual DbSet<Discharge_Status> Discharge_Status { get; set; }

    public virtual DbSet<sequence_of_care> sequence_of_care { get; set; }

    public virtual DbSet<Source_of_Admission> Source_of_Admission { get; set; }

    public virtual DbSet<Type_Of_Admission> Type_Of_Admission { get; set; }

    public virtual DbSet<Type_of_Care> Type_of_Care { get; set; }

    public virtual DbSet<Type_of_facility> Type_of_facility { get; set; }

    public virtual DbSet<Value_Codes> Value_Codes { get; set; }

    public virtual DbSet<Claims_Condition_Code> Claims_Condition_Code { get; set; }

    public virtual DbSet<Claims_Occurence_Span_Code> Claims_Occurence_Span_Code { get; set; }

    public virtual DbSet<Claims_Value_Code> Claims_Value_Code { get; set; }

    public virtual DbSet<Admission_Details> Admission_Details { get; set; }

    public virtual DbSet<Revenue_Codes> Revenue_Codes { get; set; }

    public virtual DbSet<Claim> Claims { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<Claims_Occurrence_Code> Claims_Occurrence_Code { get; set; }

    public virtual DbSet<Condition_Codes> Condition_Codes { get; set; }

    public virtual DbSet<Provider_Cpt_Plan> Provider_Cpt_Plan { get; set; }

    public virtual DbSet<Provider_Cpt_Plan_Details> Provider_Cpt_Plan_Details { get; set; }

    public virtual DbSet<Claim_Overpayment> Claim_Overpayment { get; set; }

    public virtual DbSet<Facility> Facilities { get; set; }

    public virtual DbSet<BATCHPAYMENT> BATCHPAYMENTS { get; set; }

    public virtual DbSet<Panel_Billing_Code_detail> Panel_Billing_Code_detail { get; set; }

    public virtual DbSet<SyncExcludedPractice> SyncExcludedPractices { get; set; }

    public virtual DbSet<Patient_Insurance> Patient_Insurance { get; set; }

    public virtual DbSet<Panel_Billing_Code_Cptdetail> Panel_Billing_Code_Cptdetail { get; set; }

    public virtual DbSet<CSI_Batch> CSI_Batch { get; set; }

    public virtual DbSet<insurancelist> insurancelists { get; set; }

    public virtual DbSet<Provider_Payers> Provider_Payers { get; set; }

    public virtual DbSet<CSI_Batch_Error> CSI_Batch_Error { get; set; }

    public virtual DbSet<CSI_Batch_Response> CSI_Batch_Response { get; set; }

    public virtual DbSet<CLAIM_NOTES> CLAIM_NOTES { get; set; }

    public virtual DbSet<Procedure> Procedures { get; set; }

    public virtual DbSet<claim_batch> claim_batch { get; set; }

    public virtual DbSet<claim_batch_detail> claim_batch_detail { get; set; }

    public virtual DbSet<Claim_Payments> Claim_Payments { get; set; }

    public virtual DbSet<Claim_Batch_Exceptions> Claim_Batch_Exceptions { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<EmployeeInformation> EmployeeInformations { get; set; }

    public virtual DbSet<Practice> Practices { get; set; }

    public virtual DbSet<ERACLAIMINFO> ERACLAIMINFOes { get; set; }

    public virtual DbSet<Ticket_Tracking> Ticket_Tracking { get; set; }

    public virtual DbSet<Ticket_Patient_Claims_Info> Ticket_Patient_Claims_Info { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<Practice_Reporting> Practice_Reporting { get; set; }

    public virtual DbSet<Ticket_attachments> Ticket_attachments { get; set; }


    public virtual ObjectResult<string> FindInsuranceName(Nullable<long> insuranceId)
    {

        var insuranceIdParameter = insuranceId.HasValue ?
            new ObjectParameter("insuranceId", insuranceId) :
            new ObjectParameter("insuranceId", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FindInsuranceName", insuranceIdParameter);
    }


    public virtual int GetMaxColumnID(string col_Name)
    {

        var col_NameParameter = col_Name != null ?
            new ObjectParameter("Col_Name", col_Name) :
            new ObjectParameter("Col_Name", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMaxColumnID", col_NameParameter);
    }


    public virtual ObjectResult<string> SP_TableIdGenerator(string colName)
    {

        var colNameParameter = colName != null ?
            new ObjectParameter("ColName", colName) :
            new ObjectParameter("ColName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_TableIdGenerator", colNameParameter);
    }


    public virtual ObjectResult<SP_GetInsuranceInfo_Result> SP_GetInsuranceInfo(Nullable<long> iNSURANCEID)
    {

        var iNSURANCEIDParameter = iNSURANCEID.HasValue ?
            new ObjectParameter("INSURANCEID", iNSURANCEID) :
            new ObjectParameter("INSURANCEID", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetInsuranceInfo_Result>("SP_GetInsuranceInfo", iNSURANCEIDParameter);
    }


    public virtual ObjectResult<string> SP_GetLocationState(Nullable<long> lOCATIONCODE)
    {

        var lOCATIONCODEParameter = lOCATIONCODE.HasValue ?
            new ObjectParameter("LOCATIONCODE", lOCATIONCODE) :
            new ObjectParameter("LOCATIONCODE", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetLocationState", lOCATIONCODEParameter);
    }


    public virtual ObjectResult<Nullable<bool>> SP_GetParticipating(string pROVIDERCODE, Nullable<long> iNSPAYERID)
    {

        var pROVIDERCODEParameter = pROVIDERCODE != null ?
            new ObjectParameter("PROVIDERCODE", pROVIDERCODE) :
            new ObjectParameter("PROVIDERCODE", typeof(string));


        var iNSPAYERIDParameter = iNSPAYERID.HasValue ?
            new ObjectParameter("INSPAYERID", iNSPAYERID) :
            new ObjectParameter("INSPAYERID", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SP_GetParticipating", pROVIDERCODEParameter, iNSPAYERIDParameter);
    }


    public virtual ObjectResult<string> SP_GetPricingModifier(string mODIFIERCODE)
    {

        var mODIFIERCODEParameter = mODIFIERCODE != null ?
            new ObjectParameter("MODIFIERCODE", mODIFIERCODE) :
            new ObjectParameter("MODIFIERCODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetPricingModifier", mODIFIERCODEParameter);
    }


    public virtual ObjectResult<SP_InsFacilityInfoWithoutModifierAndProcedure_Result> SP_InsFacilityInfoWithoutModifierAndProcedure(string pRACTICECODE, string pROVIDER, Nullable<bool> bSELFPAY, string iNS, string sTATE, string lOCATION, string fACILITY_CODE)
    {

        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var iNSParameter = iNS != null ?
            new ObjectParameter("INS", iNS) :
            new ObjectParameter("INS", typeof(string));


        var sTATEParameter = sTATE != null ?
            new ObjectParameter("STATE", sTATE) :
            new ObjectParameter("STATE", typeof(string));


        var lOCATIONParameter = lOCATION != null ?
            new ObjectParameter("LOCATION", lOCATION) :
            new ObjectParameter("LOCATION", typeof(string));


        var fACILITY_CODEParameter = fACILITY_CODE != null ?
            new ObjectParameter("FACILITY_CODE", fACILITY_CODE) :
            new ObjectParameter("FACILITY_CODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsFacilityInfoWithoutModifierAndProcedure_Result>("SP_InsFacilityInfoWithoutModifierAndProcedure", pRACTICECODEParameter, pROVIDERParameter, bSELFPAYParameter, iNSParameter, sTATEParameter, lOCATIONParameter, fACILITY_CODEParameter);
    }


    public virtual ObjectResult<SP_InsPayerWithoutModifierAndProcedure_Result> SP_InsPayerWithoutModifierAndProcedure(string pROVIDERCODE, string iNSID, string sTATE, string lOCATIONCODE, string fACILITYCODE, string pRACTICECODE)
    {

        var pROVIDERCODEParameter = pROVIDERCODE != null ?
            new ObjectParameter("PROVIDERCODE", pROVIDERCODE) :
            new ObjectParameter("PROVIDERCODE", typeof(string));


        var iNSIDParameter = iNSID != null ?
            new ObjectParameter("INSID", iNSID) :
            new ObjectParameter("INSID", typeof(string));


        var sTATEParameter = sTATE != null ?
            new ObjectParameter("STATE", sTATE) :
            new ObjectParameter("STATE", typeof(string));


        var lOCATIONCODEParameter = lOCATIONCODE != null ?
            new ObjectParameter("LOCATIONCODE", lOCATIONCODE) :
            new ObjectParameter("LOCATIONCODE", typeof(string));


        var fACILITYCODEParameter = fACILITYCODE != null ?
            new ObjectParameter("FACILITYCODE", fACILITYCODE) :
            new ObjectParameter("FACILITYCODE", typeof(string));


        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsPayerWithoutModifierAndProcedure_Result>("SP_InsPayerWithoutModifierAndProcedure", pROVIDERCODEParameter, iNSIDParameter, sTATEParameter, lOCATIONCODEParameter, fACILITYCODEParameter, pRACTICECODEParameter);
    }


    public virtual ObjectResult<SP_InsStateWithoutModifierAndProcedure_Result> SP_InsStateWithoutModifierAndProcedure(string pRACTICECODE, string pROVIDER, Nullable<bool> bSELFPAY, string iNS, string sTATE, string lOCATION, string fACILITY_CODE)
    {

        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var iNSParameter = iNS != null ?
            new ObjectParameter("INS", iNS) :
            new ObjectParameter("INS", typeof(string));


        var sTATEParameter = sTATE != null ?
            new ObjectParameter("STATE", sTATE) :
            new ObjectParameter("STATE", typeof(string));


        var lOCATIONParameter = lOCATION != null ?
            new ObjectParameter("LOCATION", lOCATION) :
            new ObjectParameter("LOCATION", typeof(string));


        var fACILITY_CODEParameter = fACILITY_CODE != null ?
            new ObjectParameter("FACILITY_CODE", fACILITY_CODE) :
            new ObjectParameter("FACILITY_CODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsStateWithoutModifierAndProcedure_Result>("SP_InsStateWithoutModifierAndProcedure", pRACTICECODEParameter, pROVIDERParameter, bSELFPAYParameter, iNSParameter, sTATEParameter, lOCATIONParameter, fACILITY_CODEParameter);
    }


    public virtual ObjectResult<SP_ProviderInfo_Result> SP_ProviderInfo(Nullable<bool> sELFPAY, string pRACTICE_CODE, string pROVIDER_CODE, string lOCATION_CODE, string fACILITY_CODE, string sTATE, string iNS_ID)
    {

        var sELFPAYParameter = sELFPAY.HasValue ?
            new ObjectParameter("SELFPAY", sELFPAY) :
            new ObjectParameter("SELFPAY", typeof(bool));


        var pRACTICE_CODEParameter = pRACTICE_CODE != null ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(string));


        var pROVIDER_CODEParameter = pROVIDER_CODE != null ?
            new ObjectParameter("PROVIDER_CODE", pROVIDER_CODE) :
            new ObjectParameter("PROVIDER_CODE", typeof(string));


        var lOCATION_CODEParameter = lOCATION_CODE != null ?
            new ObjectParameter("LOCATION_CODE", lOCATION_CODE) :
            new ObjectParameter("LOCATION_CODE", typeof(string));


        var fACILITY_CODEParameter = fACILITY_CODE != null ?
            new ObjectParameter("FACILITY_CODE", fACILITY_CODE) :
            new ObjectParameter("FACILITY_CODE", typeof(string));


        var sTATEParameter = sTATE != null ?
            new ObjectParameter("STATE", sTATE) :
            new ObjectParameter("STATE", typeof(string));


        var iNS_IDParameter = iNS_ID != null ?
            new ObjectParameter("INS_ID", iNS_ID) :
            new ObjectParameter("INS_ID", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProviderInfo_Result>("SP_ProviderInfo", sELFPAYParameter, pRACTICE_CODEParameter, pROVIDER_CODEParameter, lOCATION_CODEParameter, fACILITY_CODEParameter, sTATEParameter, iNS_IDParameter);
    }


    public virtual ObjectResult<SP_ProviderWithoutModifierAndProcedure_Result> SP_ProviderWithoutModifierAndProcedure(string pROVIDER, string pRACTICECODE, Nullable<bool> bSELFPAY, string iNSPAYERID, string sTATE, string lOCATION, string fACILITYCODE)
    {

        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var iNSPAYERIDParameter = iNSPAYERID != null ?
            new ObjectParameter("INSPAYERID", iNSPAYERID) :
            new ObjectParameter("INSPAYERID", typeof(string));


        var sTATEParameter = sTATE != null ?
            new ObjectParameter("STATE", sTATE) :
            new ObjectParameter("STATE", typeof(string));


        var lOCATIONParameter = lOCATION != null ?
            new ObjectParameter("LOCATION", lOCATION) :
            new ObjectParameter("LOCATION", typeof(string));


        var fACILITYCODEParameter = fACILITYCODE != null ?
            new ObjectParameter("FACILITYCODE", fACILITYCODE) :
            new ObjectParameter("FACILITYCODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProviderWithoutModifierAndProcedure_Result>("SP_ProviderWithoutModifierAndProcedure", pROVIDERParameter, pRACTICECODEParameter, bSELFPAYParameter, iNSPAYERIDParameter, sTATEParameter, lOCATIONParameter, fACILITYCODEParameter);
    }


    public virtual ObjectResult<SP_InsLocationWithoutModifierAndProcedure_Result> SP_InsLocationWithoutModifierAndProcedure(string pRACTICECODE, string pROVIDER, Nullable<bool> bSELFPAY, string iNS, string sTATE, string lOCATION, string fACILITY_CODE)
    {

        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var iNSParameter = iNS != null ?
            new ObjectParameter("INS", iNS) :
            new ObjectParameter("INS", typeof(string));


        var sTATEParameter = sTATE != null ?
            new ObjectParameter("STATE", sTATE) :
            new ObjectParameter("STATE", typeof(string));


        var lOCATIONParameter = lOCATION != null ?
            new ObjectParameter("LOCATION", lOCATION) :
            new ObjectParameter("LOCATION", typeof(string));


        var fACILITY_CODEParameter = fACILITY_CODE != null ?
            new ObjectParameter("FACILITY_CODE", fACILITY_CODE) :
            new ObjectParameter("FACILITY_CODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsLocationWithoutModifierAndProcedure_Result>("SP_InsLocationWithoutModifierAndProcedure", pRACTICECODEParameter, pROVIDERParameter, bSELFPAYParameter, iNSParameter, sTATEParameter, lOCATIONParameter, fACILITY_CODEParameter);
    }


    public virtual ObjectResult<GETEFSPRACTICES_Result> GETEFSPRACTICES(Nullable<long> pRACTICECODE)
    {

        var pRACTICECODEParameter = pRACTICECODE.HasValue ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETEFSPRACTICES_Result>("GETEFSPRACTICES", pRACTICECODEParameter);
    }


    public virtual ObjectResult<GET_ISFACILITY_Result> GET_ISFACILITY(Nullable<long> pROVIDERCODE)
    {

        var pROVIDERCODEParameter = pROVIDERCODE.HasValue ?
            new ObjectParameter("PROVIDERCODE", pROVIDERCODE) :
            new ObjectParameter("PROVIDERCODE", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GET_ISFACILITY_Result>("GET_ISFACILITY", pROVIDERCODEParameter);
    }


    public virtual ObjectResult<SP_AGINGCOMPDEMO_Result> SP_AGINGCOMPDEMO(string cRITERIA, string sLOT)
    {

        var cRITERIAParameter = cRITERIA != null ?
            new ObjectParameter("CRITERIA", cRITERIA) :
            new ObjectParameter("CRITERIA", typeof(string));


        var sLOTParameter = sLOT != null ?
            new ObjectParameter("SLOT", sLOT) :
            new ObjectParameter("SLOT", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AGINGCOMPDEMO_Result>("SP_AGINGCOMPDEMO", cRITERIAParameter, sLOTParameter);
    }


    public virtual ObjectResult<SP_AGINGDEMO_Result> SP_AGINGDEMO(string agingslot, string criteria)
    {

        var agingslotParameter = agingslot != null ?
            new ObjectParameter("agingslot", agingslot) :
            new ObjectParameter("agingslot", typeof(string));


        var criteriaParameter = criteria != null ?
            new ObjectParameter("criteria", criteria) :
            new ObjectParameter("criteria", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AGINGDEMO_Result>("SP_AGINGDEMO", agingslotParameter, criteriaParameter);
    }


    public virtual ObjectResult<SP_CPADEMO_Result> SP_CPADEMO(string mONTH, string cRITERIA)
    {

        var mONTHParameter = mONTH != null ?
            new ObjectParameter("MONTH", mONTH) :
            new ObjectParameter("MONTH", typeof(string));


        var cRITERIAParameter = cRITERIA != null ?
            new ObjectParameter("CRITERIA", cRITERIA) :
            new ObjectParameter("CRITERIA", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CPADEMO_Result>("SP_CPADEMO", mONTHParameter, cRITERIAParameter);
    }


    public virtual ObjectResult<GetTeamsByOffice_Result> GetTeamsByOffice(Nullable<int> officeId, Nullable<int> departmentId, Nullable<int> companyId)
    {

        var officeIdParameter = officeId.HasValue ?
            new ObjectParameter("OfficeId", officeId) :
            new ObjectParameter("OfficeId", typeof(int));


        var departmentIdParameter = departmentId.HasValue ?
            new ObjectParameter("DepartmentId", departmentId) :
            new ObjectParameter("DepartmentId", typeof(int));


        var companyIdParameter = companyId.HasValue ?
            new ObjectParameter("CompanyId", companyId) :
            new ObjectParameter("CompanyId", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTeamsByOffice_Result>("GetTeamsByOffice", officeIdParameter, departmentIdParameter, companyIdParameter);
    }


    public virtual int GET_CPT_FEE_DYNAMICALLY(string pRACTICE_CODE, string pc, string pROVIDER_CODE, string ins_code, string iNSPAYER_ID, string iNSURANCE_STATE, string lOCATION_CODE, string fACILITY_CODE)
    {

        var pRACTICE_CODEParameter = pRACTICE_CODE != null ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(string));


        var pcParameter = pc != null ?
            new ObjectParameter("pc", pc) :
            new ObjectParameter("pc", typeof(string));


        var pROVIDER_CODEParameter = pROVIDER_CODE != null ?
            new ObjectParameter("PROVIDER_CODE", pROVIDER_CODE) :
            new ObjectParameter("PROVIDER_CODE", typeof(string));


        var ins_codeParameter = ins_code != null ?
            new ObjectParameter("ins_code", ins_code) :
            new ObjectParameter("ins_code", typeof(string));


        var iNSPAYER_IDParameter = iNSPAYER_ID != null ?
            new ObjectParameter("INSPAYER_ID", iNSPAYER_ID) :
            new ObjectParameter("INSPAYER_ID", typeof(string));


        var iNSURANCE_STATEParameter = iNSURANCE_STATE != null ?
            new ObjectParameter("INSURANCE_STATE", iNSURANCE_STATE) :
            new ObjectParameter("INSURANCE_STATE", typeof(string));


        var lOCATION_CODEParameter = lOCATION_CODE != null ?
            new ObjectParameter("LOCATION_CODE", lOCATION_CODE) :
            new ObjectParameter("LOCATION_CODE", typeof(string));


        var fACILITY_CODEParameter = fACILITY_CODE != null ?
            new ObjectParameter("FACILITY_CODE", fACILITY_CODE) :
            new ObjectParameter("FACILITY_CODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GET_CPT_FEE_DYNAMICALLY", pRACTICE_CODEParameter, pcParameter, pROVIDER_CODEParameter, ins_codeParameter, iNSPAYER_IDParameter, iNSURANCE_STATEParameter, lOCATION_CODEParameter, fACILITY_CODEParameter);
    }


    public virtual int GET_SINGLE_CPT_FEE_DYNAMICALLY(string pRACTICE_CODE, string pc, string pROVIDER_CODE, string ins_code, string iNSPAYER_ID, string iNSURANCE_STATE, string lOCATION_CODE, string fACILITY_CODE, string cPT, string modifier)
    {

        var pRACTICE_CODEParameter = pRACTICE_CODE != null ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(string));


        var pcParameter = pc != null ?
            new ObjectParameter("pc", pc) :
            new ObjectParameter("pc", typeof(string));


        var pROVIDER_CODEParameter = pROVIDER_CODE != null ?
            new ObjectParameter("PROVIDER_CODE", pROVIDER_CODE) :
            new ObjectParameter("PROVIDER_CODE", typeof(string));


        var ins_codeParameter = ins_code != null ?
            new ObjectParameter("ins_code", ins_code) :
            new ObjectParameter("ins_code", typeof(string));


        var iNSPAYER_IDParameter = iNSPAYER_ID != null ?
            new ObjectParameter("INSPAYER_ID", iNSPAYER_ID) :
            new ObjectParameter("INSPAYER_ID", typeof(string));


        var iNSURANCE_STATEParameter = iNSURANCE_STATE != null ?
            new ObjectParameter("INSURANCE_STATE", iNSURANCE_STATE) :
            new ObjectParameter("INSURANCE_STATE", typeof(string));


        var lOCATION_CODEParameter = lOCATION_CODE != null ?
            new ObjectParameter("LOCATION_CODE", lOCATION_CODE) :
            new ObjectParameter("LOCATION_CODE", typeof(string));


        var fACILITY_CODEParameter = fACILITY_CODE != null ?
            new ObjectParameter("FACILITY_CODE", fACILITY_CODE) :
            new ObjectParameter("FACILITY_CODE", typeof(string));


        var cPTParameter = cPT != null ?
            new ObjectParameter("CPT", cPT) :
            new ObjectParameter("CPT", typeof(string));


        var modifierParameter = modifier != null ?
            new ObjectParameter("Modifier", modifier) :
            new ObjectParameter("Modifier", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GET_SINGLE_CPT_FEE_DYNAMICALLY", pRACTICE_CODEParameter, pcParameter, pROVIDER_CODEParameter, ins_codeParameter, iNSPAYER_IDParameter, iNSURANCE_STATEParameter, lOCATION_CODEParameter, fACILITY_CODEParameter, cPTParameter, modifierParameter);
    }


    public virtual int Proc_CPTStandardFee(string strField, string state, string procCode, string modifier)
    {

        var strFieldParameter = strField != null ?
            new ObjectParameter("strField", strField) :
            new ObjectParameter("strField", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("state", state) :
            new ObjectParameter("state", typeof(string));


        var procCodeParameter = procCode != null ?
            new ObjectParameter("procCode", procCode) :
            new ObjectParameter("procCode", typeof(string));


        var modifierParameter = modifier != null ?
            new ObjectParameter("modifier", modifier) :
            new ObjectParameter("modifier", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Proc_CPTStandardFee", strFieldParameter, stateParameter, procCodeParameter, modifierParameter);
    }


    public virtual ObjectResult<Charges_at_CPT_Level_Result> Charges_at_CPT_Level(Nullable<long> practiceCode, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var datefromParameter = datefrom.HasValue ?
            new ObjectParameter("datefrom", datefrom) :
            new ObjectParameter("datefrom", typeof(System.DateTime));


        var datetoParameter = dateto.HasValue ?
            new ObjectParameter("dateto", dateto) :
            new ObjectParameter("dateto", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Charges_at_CPT_Level_Result>("Charges_at_CPT_Level", practiceCodeParameter, datefromParameter, datetoParameter);
    }


    public virtual ObjectResult<string> SP_PATIENTSEARCHDUP(string lASTNAME, string fIRSTNAME, string dOB, string zIP)
    {

        var lASTNAMEParameter = lASTNAME != null ?
            new ObjectParameter("LASTNAME", lASTNAME) :
            new ObjectParameter("LASTNAME", typeof(string));


        var fIRSTNAMEParameter = fIRSTNAME != null ?
            new ObjectParameter("FIRSTNAME", fIRSTNAME) :
            new ObjectParameter("FIRSTNAME", typeof(string));


        var dOBParameter = dOB != null ?
            new ObjectParameter("DOB", dOB) :
            new ObjectParameter("DOB", typeof(string));


        var zIPParameter = zIP != null ?
            new ObjectParameter("ZIP", zIP) :
            new ObjectParameter("ZIP", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_PATIENTSEARCHDUP", lASTNAMEParameter, fIRSTNAMEParameter, dOBParameter, zIPParameter);
    }


    public virtual ObjectResult<spGetBatchClaimsDiagnosis_Result> spGetBatchClaimsDiagnosis(string practice_id, string id, string id_type)
    {

        var practice_idParameter = practice_id != null ?
            new ObjectParameter("practice_id", practice_id) :
            new ObjectParameter("practice_id", typeof(string));


        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var id_typeParameter = id_type != null ?
            new ObjectParameter("id_type", id_type) :
            new ObjectParameter("id_type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBatchClaimsDiagnosis_Result>("spGetBatchClaimsDiagnosis", practice_idParameter, idParameter, id_typeParameter);
    }


    public virtual ObjectResult<spGetBatchClaimsProcedures_Result> spGetBatchClaimsProcedures(string practice_id, string id, string id_type)
    {

        var practice_idParameter = practice_id != null ?
            new ObjectParameter("practice_id", practice_id) :
            new ObjectParameter("practice_id", typeof(string));


        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var id_typeParameter = id_type != null ?
            new ObjectParameter("id_type", id_type) :
            new ObjectParameter("id_type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBatchClaimsProcedures_Result>("spGetBatchClaimsProcedures", practice_idParameter, idParameter, id_typeParameter);
    }


    public virtual ObjectResult<spGetBatchClaimsProviderPayers_Result> spGetBatchClaimsProviderPayers(string payer_id, string id, string id_type)
    {

        var payer_idParameter = payer_id != null ?
            new ObjectParameter("payer_id", payer_id) :
            new ObjectParameter("payer_id", typeof(string));


        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var id_typeParameter = id_type != null ?
            new ObjectParameter("id_type", id_type) :
            new ObjectParameter("id_type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBatchClaimsProviderPayers_Result>("spGetBatchClaimsProviderPayers", payer_idParameter, idParameter, id_typeParameter);
    }


    public virtual ObjectResult<spGetBatchCompanyDetails_Result> spGetBatchCompanyDetails(string practice_id)
    {

        var practice_idParameter = practice_id != null ?
            new ObjectParameter("practice_id", practice_id) :
            new ObjectParameter("practice_id", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBatchCompanyDetails_Result>("spGetBatchCompanyDetails", practice_idParameter);
    }


    public virtual ObjectResult<SP_PROVIDERPAYERSEARCH_Result> SP_PROVIDERPAYERSEARCH(Nullable<long> pROVCODE, Nullable<long> lOCACODE)
    {

        var pROVCODEParameter = pROVCODE.HasValue ?
            new ObjectParameter("PROVCODE", pROVCODE) :
            new ObjectParameter("PROVCODE", typeof(long));


        var lOCACODEParameter = lOCACODE.HasValue ?
            new ObjectParameter("LOCACODE", lOCACODE) :
            new ObjectParameter("LOCACODE", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PROVIDERPAYERSEARCH_Result>("SP_PROVIDERPAYERSEARCH", pROVCODEParameter, lOCACODEParameter);
    }


    public virtual ObjectResult<SP_GUARANTORSEARCH_Result> SP_GUARANTORSEARCH(string guarant_Lname, string guarant_Fname, string guarant_Home_Phone, string guarant_City, string guarant_State, string guarant_Zip, string guarant_Address, Nullable<System.DateTime> guarant_Dob)
    {

        var guarant_LnameParameter = guarant_Lname != null ?
            new ObjectParameter("Guarant_Lname", guarant_Lname) :
            new ObjectParameter("Guarant_Lname", typeof(string));


        var guarant_FnameParameter = guarant_Fname != null ?
            new ObjectParameter("Guarant_Fname", guarant_Fname) :
            new ObjectParameter("Guarant_Fname", typeof(string));


        var guarant_Home_PhoneParameter = guarant_Home_Phone != null ?
            new ObjectParameter("Guarant_Home_Phone", guarant_Home_Phone) :
            new ObjectParameter("Guarant_Home_Phone", typeof(string));


        var guarant_CityParameter = guarant_City != null ?
            new ObjectParameter("Guarant_City", guarant_City) :
            new ObjectParameter("Guarant_City", typeof(string));


        var guarant_StateParameter = guarant_State != null ?
            new ObjectParameter("Guarant_State", guarant_State) :
            new ObjectParameter("Guarant_State", typeof(string));


        var guarant_ZipParameter = guarant_Zip != null ?
            new ObjectParameter("Guarant_Zip", guarant_Zip) :
            new ObjectParameter("Guarant_Zip", typeof(string));


        var guarant_AddressParameter = guarant_Address != null ?
            new ObjectParameter("Guarant_Address", guarant_Address) :
            new ObjectParameter("Guarant_Address", typeof(string));


        var guarant_DobParameter = guarant_Dob.HasValue ?
            new ObjectParameter("Guarant_Dob", guarant_Dob) :
            new ObjectParameter("Guarant_Dob", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GUARANTORSEARCH_Result>("SP_GUARANTORSEARCH", guarant_LnameParameter, guarant_FnameParameter, guarant_Home_PhoneParameter, guarant_CityParameter, guarant_StateParameter, guarant_ZipParameter, guarant_AddressParameter, guarant_DobParameter);
    }


    public virtual ObjectResult<ValidateInsGroupDeletion_Result> ValidateInsGroupDeletion(Nullable<long> groupId)
    {

        var groupIdParameter = groupId.HasValue ?
            new ObjectParameter("groupId", groupId) :
            new ObjectParameter("groupId", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidateInsGroupDeletion_Result>("ValidateInsGroupDeletion", groupIdParameter);
    }


    public virtual int SP_GetClaimsListByDOS(Nullable<System.DateTime> dOSFrom, Nullable<System.DateTime> dOSTo, Nullable<long> practiceCode)
    {

        var dOSFromParameter = dOSFrom.HasValue ?
            new ObjectParameter("DOSFrom", dOSFrom) :
            new ObjectParameter("DOSFrom", typeof(System.DateTime));


        var dOSToParameter = dOSTo.HasValue ?
            new ObjectParameter("DOSTo", dOSTo) :
            new ObjectParameter("DOSTo", typeof(System.DateTime));


        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetClaimsListByDOS", dOSFromParameter, dOSToParameter, practiceCodeParameter);
    }


    public virtual ObjectResult<SP_GetBatchDetail_Result> SP_GetBatchDetail(Nullable<long> practiceCode, Nullable<long> providerCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBatchDetail_Result>("SP_GetBatchDetail", practiceCodeParameter, providerCodeParameter);
    }


    public virtual ObjectResult<Aging_Summary_Analysis_Report_Result> Aging_Summary_Analysis_Report(Nullable<long> practiceCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Aging_Summary_Analysis_Report_Result>("Aging_Summary_Analysis_Report", practiceCodeParameter);
    }


    public virtual ObjectResult<Aging_Summary_Analysis_Report_Patient_Result> Aging_Summary_Analysis_Report_Patient(Nullable<long> practiceCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Aging_Summary_Analysis_Report_Patient_Result>("Aging_Summary_Analysis_Report_Patient", practiceCodeParameter);
    }


    public virtual ObjectResult<Financial_Analysis_by_Provider_and_Procedure_Codes_Result> Financial_Analysis_by_Provider_and_Procedure_Codes(Nullable<long> practiceCode, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var datefromParameter = datefrom.HasValue ?
            new ObjectParameter("datefrom", datefrom) :
            new ObjectParameter("datefrom", typeof(System.DateTime));


        var datetoParameter = dateto.HasValue ?
            new ObjectParameter("dateto", dateto) :
            new ObjectParameter("dateto", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Financial_Analysis_by_Provider_and_Procedure_Codes_Result>("Financial_Analysis_by_Provider_and_Procedure_Codes", practiceCodeParameter, datefromParameter, datetoParameter);
    }


    public virtual ObjectResult<Financial_Analysis_At_CPT_Level_Result> Financial_Analysis_At_CPT_Level(Nullable<long> practiceCode, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var datefromParameter = datefrom.HasValue ?
            new ObjectParameter("datefrom", datefrom) :
            new ObjectParameter("datefrom", typeof(System.DateTime));


        var datetoParameter = dateto.HasValue ?
            new ObjectParameter("dateto", dateto) :
            new ObjectParameter("dateto", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Financial_Analysis_At_CPT_Level_Result>("Financial_Analysis_At_CPT_Level", practiceCodeParameter, datefromParameter, datetoParameter);
    }


    public virtual ObjectResult<SP_SearchProviderCPTFeePlan_Result> SP_SearchProviderCPTFeePlan(Nullable<long> practice_Code, Nullable<long> provider_Code, Nullable<long> insPayer, Nullable<long> location_Code, string insurance_State, Nullable<long> facility_code, Nullable<bool> selfPay)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        var provider_CodeParameter = provider_Code.HasValue ?
            new ObjectParameter("Provider_Code", provider_Code) :
            new ObjectParameter("Provider_Code", typeof(long));


        var insPayerParameter = insPayer.HasValue ?
            new ObjectParameter("InsPayer", insPayer) :
            new ObjectParameter("InsPayer", typeof(long));


        var location_CodeParameter = location_Code.HasValue ?
            new ObjectParameter("Location_Code", location_Code) :
            new ObjectParameter("Location_Code", typeof(long));


        var insurance_StateParameter = insurance_State != null ?
            new ObjectParameter("Insurance_State", insurance_State) :
            new ObjectParameter("Insurance_State", typeof(string));


        var facility_codeParameter = facility_code.HasValue ?
            new ObjectParameter("Facility_code", facility_code) :
            new ObjectParameter("Facility_code", typeof(long));


        var selfPayParameter = selfPay.HasValue ?
            new ObjectParameter("SelfPay", selfPay) :
            new ObjectParameter("SelfPay", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SearchProviderCPTFeePlan_Result>("SP_SearchProviderCPTFeePlan", practice_CodeParameter, provider_CodeParameter, insPayerParameter, location_CodeParameter, insurance_StateParameter, facility_codeParameter, selfPayParameter);
    }


    public virtual ObjectResult<SP_GetStandardCPTs_Result> SP_GetStandardCPTs(Nullable<int> page, Nullable<int> pageSize, string searchString, string sortBy, string sortOrder)
    {

        var pageParameter = page.HasValue ?
            new ObjectParameter("Page", page) :
            new ObjectParameter("Page", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var searchStringParameter = searchString != null ?
            new ObjectParameter("SearchString", searchString) :
            new ObjectParameter("SearchString", typeof(string));


        var sortByParameter = sortBy != null ?
            new ObjectParameter("SortBy", sortBy) :
            new ObjectParameter("SortBy", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetStandardCPTs_Result>("SP_GetStandardCPTs", pageParameter, pageSizeParameter, searchStringParameter, sortByParameter, sortOrderParameter);
    }


    public virtual ObjectResult<SP_GetStandardCPTSByPracticeState_Result> SP_GetStandardCPTSByPracticeState(Nullable<long> practiceCode, Nullable<int> page, Nullable<int> pageSize, string searchString, string sortBy, string sortOrder)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var pageParameter = page.HasValue ?
            new ObjectParameter("Page", page) :
            new ObjectParameter("Page", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var searchStringParameter = searchString != null ?
            new ObjectParameter("SearchString", searchString) :
            new ObjectParameter("SearchString", typeof(string));


        var sortByParameter = sortBy != null ?
            new ObjectParameter("SortBy", sortBy) :
            new ObjectParameter("SortBy", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetStandardCPTSByPracticeState_Result>("SP_GetStandardCPTSByPracticeState", practiceCodeParameter, pageParameter, pageSizeParameter, searchStringParameter, sortByParameter, sortOrderParameter);
    }


    public virtual int SP_DeleteProviderPlainWithCPTS(string planId, Nullable<long> userId)
    {

        var planIdParameter = planId != null ?
            new ObjectParameter("PlanId", planId) :
            new ObjectParameter("PlanId", typeof(string));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteProviderPlainWithCPTS", planIdParameter, userIdParameter);
    }


    public virtual int SP_CreateProviderCPTPlanDetails(Nullable<long> userId, Nullable<long> practiceCode, Nullable<long> providerCode, string insState, Nullable<long> locationCode, Nullable<long> facilityCode, Nullable<long> insuranceId, Nullable<bool> selfPay, string standardOrPercentAge, Nullable<decimal> percentageHigher, Nullable<bool> customize, Nullable<bool> modificationAllowed, Nullable<bool> computed)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(long));


        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        var insStateParameter = insState != null ?
            new ObjectParameter("InsState", insState) :
            new ObjectParameter("InsState", typeof(string));


        var locationCodeParameter = locationCode.HasValue ?
            new ObjectParameter("LocationCode", locationCode) :
            new ObjectParameter("LocationCode", typeof(long));


        var facilityCodeParameter = facilityCode.HasValue ?
            new ObjectParameter("FacilityCode", facilityCode) :
            new ObjectParameter("FacilityCode", typeof(long));


        var insuranceIdParameter = insuranceId.HasValue ?
            new ObjectParameter("InsuranceId", insuranceId) :
            new ObjectParameter("InsuranceId", typeof(long));


        var selfPayParameter = selfPay.HasValue ?
            new ObjectParameter("SelfPay", selfPay) :
            new ObjectParameter("SelfPay", typeof(bool));


        var standardOrPercentAgeParameter = standardOrPercentAge != null ?
            new ObjectParameter("StandardOrPercentAge", standardOrPercentAge) :
            new ObjectParameter("StandardOrPercentAge", typeof(string));


        var percentageHigherParameter = percentageHigher.HasValue ?
            new ObjectParameter("PercentageHigher", percentageHigher) :
            new ObjectParameter("PercentageHigher", typeof(decimal));


        var customizeParameter = customize.HasValue ?
            new ObjectParameter("Customize", customize) :
            new ObjectParameter("Customize", typeof(bool));


        var modificationAllowedParameter = modificationAllowed.HasValue ?
            new ObjectParameter("ModificationAllowed", modificationAllowed) :
            new ObjectParameter("ModificationAllowed", typeof(bool));


        var computedParameter = computed.HasValue ?
            new ObjectParameter("Computed", computed) :
            new ObjectParameter("Computed", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreateProviderCPTPlanDetails", userIdParameter, practiceCodeParameter, providerCodeParameter, insStateParameter, locationCodeParameter, facilityCodeParameter, insuranceIdParameter, selfPayParameter, standardOrPercentAgeParameter, percentageHigherParameter, customizeParameter, modificationAllowedParameter, computedParameter);
    }


    public virtual ObjectResult<GetInsuranceNamesByGroup_Result> GetInsuranceNamesByGroup(Nullable<long> inusranceGroupId)
    {

        var inusranceGroupIdParameter = inusranceGroupId.HasValue ?
            new ObjectParameter("InusranceGroupId", inusranceGroupId) :
            new ObjectParameter("InusranceGroupId", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInsuranceNamesByGroup_Result>("GetInsuranceNamesByGroup", inusranceGroupIdParameter);
    }


    public virtual ObjectResult<GetPatientForStatement_Result> GetPatientForStatement(Nullable<long> practiceCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientForStatement_Result>("GetPatientForStatement", practiceCodeParameter);
    }


    public virtual ObjectResult<GetPatientWithClaimsForStatement_Result> GetPatientWithClaimsForStatement(string patientsAccounts, string excludedClaimsIds)
    {

        var patientsAccountsParameter = patientsAccounts != null ?
            new ObjectParameter("PatientsAccounts", patientsAccounts) :
            new ObjectParameter("PatientsAccounts", typeof(string));


        var excludedClaimsIdsParameter = excludedClaimsIds != null ?
            new ObjectParameter("ExcludedClaimsIds", excludedClaimsIds) :
            new ObjectParameter("ExcludedClaimsIds", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientWithClaimsForStatement_Result>("GetPatientWithClaimsForStatement", patientsAccountsParameter, excludedClaimsIdsParameter);
    }


    public virtual ObjectResult<GetClaimsForStatement_Result> GetClaimsForStatement(Nullable<long> patientAccount)
    {

        var patientAccountParameter = patientAccount.HasValue ?
            new ObjectParameter("PatientAccount", patientAccount) :
            new ObjectParameter("PatientAccount", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClaimsForStatement_Result>("GetClaimsForStatement", patientAccountParameter);
    }


    public virtual ObjectResult<GetAppointmentById_Result> GetAppointmentById(Nullable<long> appointment_id)
    {

        var appointment_idParameter = appointment_id.HasValue ?
            new ObjectParameter("appointment_id", appointment_id) :
            new ObjectParameter("appointment_id", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAppointmentById_Result>("GetAppointmentById", appointment_idParameter);
    }


    public virtual ObjectResult<sp_provider_working_times_Result> sp_provider_working_times(Nullable<long> practice_code, Nullable<long> provider_code, Nullable<long> location_code, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
    {

        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(long));


        var provider_codeParameter = provider_code.HasValue ?
            new ObjectParameter("Provider_code", provider_code) :
            new ObjectParameter("Provider_code", typeof(long));


        var location_codeParameter = location_code.HasValue ?
            new ObjectParameter("Location_code", location_code) :
            new ObjectParameter("Location_code", typeof(long));


        var dateFromParameter = dateFrom.HasValue ?
            new ObjectParameter("DateFrom", dateFrom) :
            new ObjectParameter("DateFrom", typeof(System.DateTime));


        var dateToParameter = dateTo.HasValue ?
            new ObjectParameter("DateTo", dateTo) :
            new ObjectParameter("DateTo", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_provider_working_times_Result>("sp_provider_working_times", practice_codeParameter, provider_codeParameter, location_codeParameter, dateFromParameter, dateToParameter);
    }


    public virtual ObjectResult<GetAppointment_Result> GetAppointment(Nullable<long> practice_Code, Nullable<long> provider_code, Nullable<long> location_code, Nullable<System.DateTime> date, string time_From)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        var provider_codeParameter = provider_code.HasValue ?
            new ObjectParameter("Provider_code", provider_code) :
            new ObjectParameter("Provider_code", typeof(long));


        var location_codeParameter = location_code.HasValue ?
            new ObjectParameter("Location_code", location_code) :
            new ObjectParameter("Location_code", typeof(long));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var time_FromParameter = time_From != null ?
            new ObjectParameter("Time_From", time_From) :
            new ObjectParameter("Time_From", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAppointment_Result>("GetAppointment", practice_CodeParameter, provider_codeParameter, location_codeParameter, dateParameter, time_FromParameter);
    }


    public virtual ObjectResult<SPAppChkEligibility_Result> SPAppChkEligibility(Nullable<long> praccode, Nullable<long> patacct, Nullable<long> pROVID)
    {

        var praccodeParameter = praccode.HasValue ?
            new ObjectParameter("praccode", praccode) :
            new ObjectParameter("praccode", typeof(long));


        var patacctParameter = patacct.HasValue ?
            new ObjectParameter("patacct", patacct) :
            new ObjectParameter("patacct", typeof(long));


        var pROVIDParameter = pROVID.HasValue ?
            new ObjectParameter("PROVID", pROVID) :
            new ObjectParameter("PROVID", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPAppChkEligibility_Result>("SPAppChkEligibility", praccodeParameter, patacctParameter, pROVIDParameter);
    }


    public virtual ObjectResult<Nullable<long>> f_SP_InsPayer(string pROVIDERCODE, string iNSID, string sTATE, string lOCATIONCODE, string fACILITYCODE, string pROCCODE, string mODIFIER, string pRACTICECODE)
    {

        var pROVIDERCODEParameter = pROVIDERCODE != null ?
            new ObjectParameter("PROVIDERCODE", pROVIDERCODE) :
            new ObjectParameter("PROVIDERCODE", typeof(string));


        var iNSIDParameter = iNSID != null ?
            new ObjectParameter("INSID", iNSID) :
            new ObjectParameter("INSID", typeof(string));


        var sTATEParameter = sTATE != null ?
            new ObjectParameter("STATE", sTATE) :
            new ObjectParameter("STATE", typeof(string));


        var lOCATIONCODEParameter = lOCATIONCODE != null ?
            new ObjectParameter("LOCATIONCODE", lOCATIONCODE) :
            new ObjectParameter("LOCATIONCODE", typeof(string));


        var fACILITYCODEParameter = fACILITYCODE != null ?
            new ObjectParameter("FACILITYCODE", fACILITYCODE) :
            new ObjectParameter("FACILITYCODE", typeof(string));


        var pROCCODEParameter = pROCCODE != null ?
            new ObjectParameter("PROCCODE", pROCCODE) :
            new ObjectParameter("PROCCODE", typeof(string));


        var mODIFIERParameter = mODIFIER != null ?
            new ObjectParameter("MODIFIER", mODIFIER) :
            new ObjectParameter("MODIFIER", typeof(string));


        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("f_SP_InsPayer", pROVIDERCODEParameter, iNSIDParameter, sTATEParameter, lOCATIONCODEParameter, fACILITYCODEParameter, pROCCODEParameter, mODIFIERParameter, pRACTICECODEParameter);
    }


    public virtual ObjectResult<CPTs_Ana_by_Report_Result> CPTs_Ana_by_Report(Nullable<long> practiceCode, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var datefromParameter = datefrom.HasValue ?
            new ObjectParameter("datefrom", datefrom) :
            new ObjectParameter("datefrom", typeof(System.DateTime));


        var datetoParameter = dateto.HasValue ?
            new ObjectParameter("dateto", dateto) :
            new ObjectParameter("dateto", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPTs_Ana_by_Report_Result>("CPTs_Ana_by_Report", practiceCodeParameter, datefromParameter, datetoParameter);
    }


    public virtual ObjectResult<CPTs_Analysis_by_Report_Result> CPTs_Analysis_by_Report(Nullable<long> practiceCode, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var datefromParameter = datefrom.HasValue ?
            new ObjectParameter("datefrom", datefrom) :
            new ObjectParameter("datefrom", typeof(System.DateTime));


        var datetoParameter = dateto.HasValue ?
            new ObjectParameter("dateto", dateto) :
            new ObjectParameter("dateto", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CPTs_Analysis_by_Report_Result>("CPTs_Analysis_by_Report", practiceCodeParameter, datefromParameter, datetoParameter);
    }


    public virtual int Financial_Summary()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Financial_Summary");
    }


    [DbFunction("NPMDBEntities", "Func_SPLIT_STRING")]
    public virtual IQueryable<string> Func_SPLIT_STRING(string sString, string cDelimiter)
    {

        var sStringParameter = sString != null ?
            new ObjectParameter("sString", sString) :
            new ObjectParameter("sString", typeof(string));


        var cDelimiterParameter = cDelimiter != null ?
            new ObjectParameter("cDelimiter", cDelimiter) :
            new ObjectParameter("cDelimiter", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[NPMDBEntities].[Func_SPLIT_STRING](@sString, @cDelimiter)", sStringParameter, cDelimiterParameter);
    }


    public virtual ObjectResult<PayerWise_Analysis_by_Report_Result> PayerWise_Analysis_by_Report(Nullable<long> practiceCode, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var datefromParameter = datefrom.HasValue ?
            new ObjectParameter("datefrom", datefrom) :
            new ObjectParameter("datefrom", typeof(System.DateTime));


        var datetoParameter = dateto.HasValue ?
            new ObjectParameter("dateto", dateto) :
            new ObjectParameter("dateto", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayerWise_Analysis_by_Report_Result>("PayerWise_Analysis_by_Report", practiceCodeParameter, datefromParameter, datetoParameter);
    }


    public virtual ObjectResult<Payments_at_CPT_Level_Result> Payments_at_CPT_Level(Nullable<long> practiceCode, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var datefromParameter = datefrom.HasValue ?
            new ObjectParameter("datefrom", datefrom) :
            new ObjectParameter("datefrom", typeof(System.DateTime));


        var datetoParameter = dateto.HasValue ?
            new ObjectParameter("dateto", dateto) :
            new ObjectParameter("dateto", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payments_at_CPT_Level_Result>("Payments_at_CPT_Level", practiceCodeParameter, datefromParameter, datetoParameter);
    }


    public virtual ObjectResult<procItemized_Statement_Claim_Due_Result> procItemized_Statement_Claim_Due()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<procItemized_Statement_Claim_Due_Result>("procItemized_Statement_Claim_Due");
    }


    public virtual int procItemized_Statement_Combined(Nullable<long> practice, Nullable<long> pacct)
    {

        var practiceParameter = practice.HasValue ?
            new ObjectParameter("practice", practice) :
            new ObjectParameter("practice", typeof(long));


        var pacctParameter = pacct.HasValue ?
            new ObjectParameter("pacct", pacct) :
            new ObjectParameter("pacct", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("procItemized_Statement_Combined", practiceParameter, pacctParameter);
    }


    public virtual ObjectResult<ProviderWise_Financials_by_Report_Result> ProviderWise_Financials_by_Report(Nullable<long> practiceCode, Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var datefromParameter = datefrom.HasValue ?
            new ObjectParameter("datefrom", datefrom) :
            new ObjectParameter("datefrom", typeof(System.DateTime));


        var datetoParameter = dateto.HasValue ?
            new ObjectParameter("dateto", dateto) :
            new ObjectParameter("dateto", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProviderWise_Financials_by_Report_Result>("ProviderWise_Financials_by_Report", practiceCodeParameter, datefromParameter, datetoParameter);
    }


    public virtual int RefferingPhysicianSearch(string first_name, string last_name, string address, string city, string state, string zip_code, string phone, string upin, string nPI)
    {

        var first_nameParameter = first_name != null ?
            new ObjectParameter("first_name", first_name) :
            new ObjectParameter("first_name", typeof(string));


        var last_nameParameter = last_name != null ?
            new ObjectParameter("last_name", last_name) :
            new ObjectParameter("last_name", typeof(string));


        var addressParameter = address != null ?
            new ObjectParameter("address", address) :
            new ObjectParameter("address", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("city", city) :
            new ObjectParameter("city", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("state", state) :
            new ObjectParameter("state", typeof(string));


        var zip_codeParameter = zip_code != null ?
            new ObjectParameter("zip_code", zip_code) :
            new ObjectParameter("zip_code", typeof(string));


        var phoneParameter = phone != null ?
            new ObjectParameter("phone", phone) :
            new ObjectParameter("phone", typeof(string));


        var upinParameter = upin != null ?
            new ObjectParameter("upin", upin) :
            new ObjectParameter("upin", typeof(string));


        var nPIParameter = nPI != null ?
            new ObjectParameter("NPI", nPI) :
            new ObjectParameter("NPI", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RefferingPhysicianSearch", first_nameParameter, last_nameParameter, addressParameter, cityParameter, stateParameter, zip_codeParameter, phoneParameter, upinParameter, nPIParameter);
    }


    public virtual int SP_Aging_Papulated()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Aging_Papulated");
    }


    public virtual int SP_GENERATEPATIENTSTATEMENT(Nullable<long> pATACCT, Nullable<long> pRAC, string cLMNO)
    {

        var pATACCTParameter = pATACCT.HasValue ?
            new ObjectParameter("PATACCT", pATACCT) :
            new ObjectParameter("PATACCT", typeof(long));


        var pRACParameter = pRAC.HasValue ?
            new ObjectParameter("PRAC", pRAC) :
            new ObjectParameter("PRAC", typeof(long));


        var cLMNOParameter = cLMNO != null ?
            new ObjectParameter("CLMNO", cLMNO) :
            new ObjectParameter("CLMNO", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GENERATEPATIENTSTATEMENT", pATACCTParameter, pRACParameter, cLMNOParameter);
    }


    public virtual int SP_GENERATEPATIENTSTATEMENT_bkp_091619(Nullable<long> pATACCT, Nullable<long> pRAC, string cLMNO)
    {

        var pATACCTParameter = pATACCT.HasValue ?
            new ObjectParameter("PATACCT", pATACCT) :
            new ObjectParameter("PATACCT", typeof(long));


        var pRACParameter = pRAC.HasValue ?
            new ObjectParameter("PRAC", pRAC) :
            new ObjectParameter("PRAC", typeof(long));


        var cLMNOParameter = cLMNO != null ?
            new ObjectParameter("CLMNO", cLMNO) :
            new ObjectParameter("CLMNO", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GENERATEPATIENTSTATEMENT_bkp_091619", pATACCTParameter, pRACParameter, cLMNOParameter);
    }


    public virtual ObjectResult<SP_GetClaimsListByDOS1_Result> SP_GetClaimsListByDOS1(Nullable<System.DateTime> dOSFrom, Nullable<System.DateTime> dOSTo, Nullable<long> practiceCode)
    {

        var dOSFromParameter = dOSFrom.HasValue ?
            new ObjectParameter("DOSFrom", dOSFrom) :
            new ObjectParameter("DOSFrom", typeof(System.DateTime));


        var dOSToParameter = dOSTo.HasValue ?
            new ObjectParameter("DOSTo", dOSTo) :
            new ObjectParameter("DOSTo", typeof(System.DateTime));


        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetClaimsListByDOS1_Result>("SP_GetClaimsListByDOS1", dOSFromParameter, dOSToParameter, practiceCodeParameter);
    }


    public virtual ObjectResult<SP_InsuranceSearch_a_Result> SP_InsuranceSearch_a(Nullable<long> practiceCode, Nullable<long> payerId, string payerDescription, Nullable<long> nameId, string insuranceName, Nullable<long> insuranceId, string groupName, string zIP, string insuranceAddress, string state, string city, Nullable<int> searchFrom)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var payerIdParameter = payerId.HasValue ?
            new ObjectParameter("PayerId", payerId) :
            new ObjectParameter("PayerId", typeof(long));


        var payerDescriptionParameter = payerDescription != null ?
            new ObjectParameter("PayerDescription", payerDescription) :
            new ObjectParameter("PayerDescription", typeof(string));


        var nameIdParameter = nameId.HasValue ?
            new ObjectParameter("NameId", nameId) :
            new ObjectParameter("NameId", typeof(long));


        var insuranceNameParameter = insuranceName != null ?
            new ObjectParameter("InsuranceName", insuranceName) :
            new ObjectParameter("InsuranceName", typeof(string));


        var insuranceIdParameter = insuranceId.HasValue ?
            new ObjectParameter("InsuranceId", insuranceId) :
            new ObjectParameter("InsuranceId", typeof(long));


        var groupNameParameter = groupName != null ?
            new ObjectParameter("GroupName", groupName) :
            new ObjectParameter("GroupName", typeof(string));


        var zIPParameter = zIP != null ?
            new ObjectParameter("ZIP", zIP) :
            new ObjectParameter("ZIP", typeof(string));


        var insuranceAddressParameter = insuranceAddress != null ?
            new ObjectParameter("InsuranceAddress", insuranceAddress) :
            new ObjectParameter("InsuranceAddress", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("State", state) :
            new ObjectParameter("State", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var searchFromParameter = searchFrom.HasValue ?
            new ObjectParameter("SearchFrom", searchFrom) :
            new ObjectParameter("SearchFrom", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsuranceSearch_a_Result>("SP_InsuranceSearch_a", practiceCodeParameter, payerIdParameter, payerDescriptionParameter, nameIdParameter, insuranceNameParameter, insuranceIdParameter, groupNameParameter, zIPParameter, insuranceAddressParameter, stateParameter, cityParameter, searchFromParameter);
    }


    public virtual int SP_InsuranceSearch_AfzalBahi(Nullable<long> practiceCode, Nullable<long> payerId, string payerDescription, Nullable<long> nameId, string insuranceName, Nullable<long> insuranceId, string groupName, string zIP, string insuranceAddress, string state, string city, Nullable<int> searchFrom)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var payerIdParameter = payerId.HasValue ?
            new ObjectParameter("PayerId", payerId) :
            new ObjectParameter("PayerId", typeof(long));


        var payerDescriptionParameter = payerDescription != null ?
            new ObjectParameter("PayerDescription", payerDescription) :
            new ObjectParameter("PayerDescription", typeof(string));


        var nameIdParameter = nameId.HasValue ?
            new ObjectParameter("NameId", nameId) :
            new ObjectParameter("NameId", typeof(long));


        var insuranceNameParameter = insuranceName != null ?
            new ObjectParameter("InsuranceName", insuranceName) :
            new ObjectParameter("InsuranceName", typeof(string));


        var insuranceIdParameter = insuranceId.HasValue ?
            new ObjectParameter("InsuranceId", insuranceId) :
            new ObjectParameter("InsuranceId", typeof(long));


        var groupNameParameter = groupName != null ?
            new ObjectParameter("GroupName", groupName) :
            new ObjectParameter("GroupName", typeof(string));


        var zIPParameter = zIP != null ?
            new ObjectParameter("ZIP", zIP) :
            new ObjectParameter("ZIP", typeof(string));


        var insuranceAddressParameter = insuranceAddress != null ?
            new ObjectParameter("InsuranceAddress", insuranceAddress) :
            new ObjectParameter("InsuranceAddress", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("State", state) :
            new ObjectParameter("State", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var searchFromParameter = searchFrom.HasValue ?
            new ObjectParameter("SearchFrom", searchFrom) :
            new ObjectParameter("SearchFrom", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsuranceSearch_AfzalBahi", practiceCodeParameter, payerIdParameter, payerDescriptionParameter, nameIdParameter, insuranceNameParameter, insuranceIdParameter, groupNameParameter, zIPParameter, insuranceAddressParameter, stateParameter, cityParameter, searchFromParameter);
    }


    public virtual ObjectResult<SP_InsuranceSearch_BK_11082018_Result> SP_InsuranceSearch_BK_11082018(Nullable<long> practiceCode, Nullable<long> payerId, string payerDescription, Nullable<long> nameId, string insuranceName, Nullable<long> insuranceId, string groupName, string zIP, string insuranceAddress, string state, string city, Nullable<int> searchFrom)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var payerIdParameter = payerId.HasValue ?
            new ObjectParameter("PayerId", payerId) :
            new ObjectParameter("PayerId", typeof(long));


        var payerDescriptionParameter = payerDescription != null ?
            new ObjectParameter("PayerDescription", payerDescription) :
            new ObjectParameter("PayerDescription", typeof(string));


        var nameIdParameter = nameId.HasValue ?
            new ObjectParameter("NameId", nameId) :
            new ObjectParameter("NameId", typeof(long));


        var insuranceNameParameter = insuranceName != null ?
            new ObjectParameter("InsuranceName", insuranceName) :
            new ObjectParameter("InsuranceName", typeof(string));


        var insuranceIdParameter = insuranceId.HasValue ?
            new ObjectParameter("InsuranceId", insuranceId) :
            new ObjectParameter("InsuranceId", typeof(long));


        var groupNameParameter = groupName != null ?
            new ObjectParameter("GroupName", groupName) :
            new ObjectParameter("GroupName", typeof(string));


        var zIPParameter = zIP != null ?
            new ObjectParameter("ZIP", zIP) :
            new ObjectParameter("ZIP", typeof(string));


        var insuranceAddressParameter = insuranceAddress != null ?
            new ObjectParameter("InsuranceAddress", insuranceAddress) :
            new ObjectParameter("InsuranceAddress", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("State", state) :
            new ObjectParameter("State", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var searchFromParameter = searchFrom.HasValue ?
            new ObjectParameter("SearchFrom", searchFrom) :
            new ObjectParameter("SearchFrom", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsuranceSearch_BK_11082018_Result>("SP_InsuranceSearch_BK_11082018", practiceCodeParameter, payerIdParameter, payerDescriptionParameter, nameIdParameter, insuranceNameParameter, insuranceIdParameter, groupNameParameter, zIPParameter, insuranceAddressParameter, stateParameter, cityParameter, searchFromParameter);
    }


    public virtual int SP_InsuranceSearch_N(string practiceCode, string payerId, string payerDescription, string nameId, string insuranceName, string insuranceId, string groupName, string zIP, string insuranceAddress, string state, string city, string searchFrom)
    {

        var practiceCodeParameter = practiceCode != null ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(string));


        var payerIdParameter = payerId != null ?
            new ObjectParameter("PayerId", payerId) :
            new ObjectParameter("PayerId", typeof(string));


        var payerDescriptionParameter = payerDescription != null ?
            new ObjectParameter("PayerDescription", payerDescription) :
            new ObjectParameter("PayerDescription", typeof(string));


        var nameIdParameter = nameId != null ?
            new ObjectParameter("NameId", nameId) :
            new ObjectParameter("NameId", typeof(string));


        var insuranceNameParameter = insuranceName != null ?
            new ObjectParameter("InsuranceName", insuranceName) :
            new ObjectParameter("InsuranceName", typeof(string));


        var insuranceIdParameter = insuranceId != null ?
            new ObjectParameter("InsuranceId", insuranceId) :
            new ObjectParameter("InsuranceId", typeof(string));


        var groupNameParameter = groupName != null ?
            new ObjectParameter("GroupName", groupName) :
            new ObjectParameter("GroupName", typeof(string));


        var zIPParameter = zIP != null ?
            new ObjectParameter("ZIP", zIP) :
            new ObjectParameter("ZIP", typeof(string));


        var insuranceAddressParameter = insuranceAddress != null ?
            new ObjectParameter("InsuranceAddress", insuranceAddress) :
            new ObjectParameter("InsuranceAddress", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("State", state) :
            new ObjectParameter("State", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var searchFromParameter = searchFrom != null ?
            new ObjectParameter("SearchFrom", searchFrom) :
            new ObjectParameter("SearchFrom", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsuranceSearch_N", practiceCodeParameter, payerIdParameter, payerDescriptionParameter, nameIdParameter, insuranceNameParameter, insuranceIdParameter, groupNameParameter, zIPParameter, insuranceAddressParameter, stateParameter, cityParameter, searchFromParameter);
    }


    public virtual int SP_laim_Charges_Summary()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_laim_Charges_Summary");
    }


    public virtual int SP_PatientSearch_bkp12262018(string practiceCode, string patientAccount, string firstName, string lastName, string sSN, string homePhone, string zIP, string claimNo, string policyNo, Nullable<bool> includePTL)
    {

        var practiceCodeParameter = practiceCode != null ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(string));


        var patientAccountParameter = patientAccount != null ?
            new ObjectParameter("PatientAccount", patientAccount) :
            new ObjectParameter("PatientAccount", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var sSNParameter = sSN != null ?
            new ObjectParameter("SSN", sSN) :
            new ObjectParameter("SSN", typeof(string));


        var homePhoneParameter = homePhone != null ?
            new ObjectParameter("HomePhone", homePhone) :
            new ObjectParameter("HomePhone", typeof(string));


        var zIPParameter = zIP != null ?
            new ObjectParameter("ZIP", zIP) :
            new ObjectParameter("ZIP", typeof(string));


        var claimNoParameter = claimNo != null ?
            new ObjectParameter("ClaimNo", claimNo) :
            new ObjectParameter("ClaimNo", typeof(string));


        var policyNoParameter = policyNo != null ?
            new ObjectParameter("PolicyNo", policyNo) :
            new ObjectParameter("PolicyNo", typeof(string));


        var includePTLParameter = includePTL.HasValue ?
            new ObjectParameter("IncludePTL", includePTL) :
            new ObjectParameter("IncludePTL", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PatientSearch_bkp12262018", practiceCodeParameter, patientAccountParameter, firstNameParameter, lastNameParameter, sSNParameter, homePhoneParameter, zIPParameter, claimNoParameter, policyNoParameter, includePTLParameter);
    }


    public virtual int SP_PatientSearchNew(string practiceCode, string patientAccount, string firstName, string lastName, string sSN, string homePhone, string zIP, string claimNo, string policyNo, Nullable<bool> includePTL)
    {

        var practiceCodeParameter = practiceCode != null ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(string));


        var patientAccountParameter = patientAccount != null ?
            new ObjectParameter("PatientAccount", patientAccount) :
            new ObjectParameter("PatientAccount", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var sSNParameter = sSN != null ?
            new ObjectParameter("SSN", sSN) :
            new ObjectParameter("SSN", typeof(string));


        var homePhoneParameter = homePhone != null ?
            new ObjectParameter("HomePhone", homePhone) :
            new ObjectParameter("HomePhone", typeof(string));


        var zIPParameter = zIP != null ?
            new ObjectParameter("ZIP", zIP) :
            new ObjectParameter("ZIP", typeof(string));


        var claimNoParameter = claimNo != null ?
            new ObjectParameter("ClaimNo", claimNo) :
            new ObjectParameter("ClaimNo", typeof(string));


        var policyNoParameter = policyNo != null ?
            new ObjectParameter("PolicyNo", policyNo) :
            new ObjectParameter("PolicyNo", typeof(string));


        var includePTLParameter = includePTL.HasValue ?
            new ObjectParameter("IncludePTL", includePTL) :
            new ObjectParameter("IncludePTL", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_PatientSearchNew", practiceCodeParameter, patientAccountParameter, firstNameParameter, lastNameParameter, sSNParameter, homePhoneParameter, zIPParameter, claimNoParameter, policyNoParameter, includePTLParameter);
    }


    public virtual ObjectResult<SP_PATSTATEMENT_CLAIMSUMMARY_Result> SP_PATSTATEMENT_CLAIMSUMMARY(Nullable<long> pATACCT)
    {

        var pATACCTParameter = pATACCT.HasValue ?
            new ObjectParameter("PATACCT", pATACCT) :
            new ObjectParameter("PATACCT", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PATSTATEMENT_CLAIMSUMMARY_Result>("SP_PATSTATEMENT_CLAIMSUMMARY", pATACCTParameter);
    }


    public virtual int SP_ProcedureSearch_BKP_Afzl(string procedureCode, string procedureDescription)
    {

        var procedureCodeParameter = procedureCode != null ?
            new ObjectParameter("ProcedureCode", procedureCode) :
            new ObjectParameter("ProcedureCode", typeof(string));


        var procedureDescriptionParameter = procedureDescription != null ?
            new ObjectParameter("ProcedureDescription", procedureDescription) :
            new ObjectParameter("ProcedureDescription", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ProcedureSearch_BKP_Afzl", procedureCodeParameter, procedureDescriptionParameter);
    }


    public virtual int usp_update_claims_totals_new()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_update_claims_totals_new");
    }


    public virtual ObjectResult<sp_getBatchHistory_Result> sp_getBatchHistory(Nullable<long> practice_Code, Nullable<long> provider_Code, Nullable<System.DateTime> date_From, Nullable<System.DateTime> date_To, string date_Type)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        var provider_CodeParameter = provider_Code.HasValue ?
            new ObjectParameter("Provider_Code", provider_Code) :
            new ObjectParameter("Provider_Code", typeof(long));


        var date_FromParameter = date_From.HasValue ?
            new ObjectParameter("Date_From", date_From) :
            new ObjectParameter("Date_From", typeof(System.DateTime));


        var date_ToParameter = date_To.HasValue ?
            new ObjectParameter("Date_To", date_To) :
            new ObjectParameter("Date_To", typeof(System.DateTime));


        var date_TypeParameter = date_Type != null ?
            new ObjectParameter("Date_Type", date_Type) :
            new ObjectParameter("Date_Type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getBatchHistory_Result>("sp_getBatchHistory", practice_CodeParameter, provider_CodeParameter, date_FromParameter, date_ToParameter, date_TypeParameter);
    }


    public virtual ObjectResult<SP_PatientSearch_Result> SP_PatientSearch(string practiceCode, string patientAccount, string firstName, string lastName, string sSN, string homePhone, string zIP, string claimNo, string policyNo, Nullable<bool> includePTL, Nullable<bool> isActive, string dob, string dateFrom, string dateTo, string dateType)
    {

        var practiceCodeParameter = practiceCode != null ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(string));


        var patientAccountParameter = patientAccount != null ?
            new ObjectParameter("PatientAccount", patientAccount) :
            new ObjectParameter("PatientAccount", typeof(string));


        var firstNameParameter = firstName != null ?
            new ObjectParameter("FirstName", firstName) :
            new ObjectParameter("FirstName", typeof(string));


        var lastNameParameter = lastName != null ?
            new ObjectParameter("LastName", lastName) :
            new ObjectParameter("LastName", typeof(string));


        var sSNParameter = sSN != null ?
            new ObjectParameter("SSN", sSN) :
            new ObjectParameter("SSN", typeof(string));


        var homePhoneParameter = homePhone != null ?
            new ObjectParameter("HomePhone", homePhone) :
            new ObjectParameter("HomePhone", typeof(string));


        var zIPParameter = zIP != null ?
            new ObjectParameter("ZIP", zIP) :
            new ObjectParameter("ZIP", typeof(string));


        var claimNoParameter = claimNo != null ?
            new ObjectParameter("ClaimNo", claimNo) :
            new ObjectParameter("ClaimNo", typeof(string));


        var policyNoParameter = policyNo != null ?
            new ObjectParameter("PolicyNo", policyNo) :
            new ObjectParameter("PolicyNo", typeof(string));


        var includePTLParameter = includePTL.HasValue ?
            new ObjectParameter("IncludePTL", includePTL) :
            new ObjectParameter("IncludePTL", typeof(bool));


        var isActiveParameter = isActive.HasValue ?
            new ObjectParameter("IsActive", isActive) :
            new ObjectParameter("IsActive", typeof(bool));


        var dobParameter = dob != null ?
            new ObjectParameter("dob", dob) :
            new ObjectParameter("dob", typeof(string));


        var dateFromParameter = dateFrom != null ?
            new ObjectParameter("dateFrom", dateFrom) :
            new ObjectParameter("dateFrom", typeof(string));


        var dateToParameter = dateTo != null ?
            new ObjectParameter("dateTo", dateTo) :
            new ObjectParameter("dateTo", typeof(string));


        var dateTypeParameter = dateType != null ?
            new ObjectParameter("dateType", dateType) :
            new ObjectParameter("dateType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PatientSearch_Result>("SP_PatientSearch", practiceCodeParameter, patientAccountParameter, firstNameParameter, lastNameParameter, sSNParameter, homePhoneParameter, zIPParameter, claimNoParameter, policyNoParameter, includePTLParameter, isActiveParameter, dobParameter, dateFromParameter, dateToParameter, dateTypeParameter);
    }


    public virtual ObjectResult<SP_Search_Claim_Batch_Error_Result> SP_Search_Claim_Batch_Error(Nullable<long> practice_Code, Nullable<long> provider_Code, Nullable<long> batch_Id, Nullable<System.DateTime> date_From, Nullable<System.DateTime> date_To)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        var provider_CodeParameter = provider_Code.HasValue ?
            new ObjectParameter("Provider_Code", provider_Code) :
            new ObjectParameter("Provider_Code", typeof(long));


        var batch_IdParameter = batch_Id.HasValue ?
            new ObjectParameter("Batch_Id", batch_Id) :
            new ObjectParameter("Batch_Id", typeof(long));


        var date_FromParameter = date_From.HasValue ?
            new ObjectParameter("Date_From", date_From) :
            new ObjectParameter("Date_From", typeof(System.DateTime));


        var date_ToParameter = date_To.HasValue ?
            new ObjectParameter("Date_To", date_To) :
            new ObjectParameter("Date_To", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Search_Claim_Batch_Error_Result>("SP_Search_Claim_Batch_Error", practice_CodeParameter, provider_CodeParameter, batch_IdParameter, date_FromParameter, date_ToParameter);
    }


    public virtual ObjectResult<spGetBatchClaimsInsurancesInfo_Result> spGetBatchClaimsInsurancesInfo(string practice_id, string id, string id_type)
    {

        var practice_idParameter = practice_id != null ?
            new ObjectParameter("practice_id", practice_id) :
            new ObjectParameter("practice_id", typeof(string));


        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var id_typeParameter = id_type != null ?
            new ObjectParameter("id_type", id_type) :
            new ObjectParameter("id_type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBatchClaimsInsurancesInfo_Result>("spGetBatchClaimsInsurancesInfo", practice_idParameter, idParameter, id_typeParameter);
    }


    public virtual ObjectResult<GetOfficeTiming_Result> GetOfficeTiming(Nullable<long> practice_Code, Nullable<long> provider_code, Nullable<long> location_code, Nullable<System.DateTime> date)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        var provider_codeParameter = provider_code.HasValue ?
            new ObjectParameter("Provider_code", provider_code) :
            new ObjectParameter("Provider_code", typeof(long));


        var location_codeParameter = location_code.HasValue ?
            new ObjectParameter("Location_code", location_code) :
            new ObjectParameter("Location_code", typeof(long));


        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOfficeTiming_Result>("GetOfficeTiming", practice_CodeParameter, provider_codeParameter, location_codeParameter, dateParameter);
    }


    public virtual ObjectResult<GetUnassignedAppointmemtReasons_Result> GetUnassignedAppointmemtReasons(Nullable<long> practiceCode, Nullable<long> providerCode, Nullable<long> locationCode, string searchText)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        var locationCodeParameter = locationCode.HasValue ?
            new ObjectParameter("LocationCode", locationCode) :
            new ObjectParameter("LocationCode", typeof(long));


        var searchTextParameter = searchText != null ?
            new ObjectParameter("SearchText", searchText) :
            new ObjectParameter("SearchText", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUnassignedAppointmemtReasons_Result>("GetUnassignedAppointmemtReasons", practiceCodeParameter, providerCodeParameter, locationCodeParameter, searchTextParameter);
    }


    public virtual int InsertPracAppointmentReasons(Nullable<long> practiceCode, Nullable<long> providerCode, Nullable<long> locationCode, string appointmentStatusesIds, Nullable<long> userId)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        var locationCodeParameter = locationCode.HasValue ?
            new ObjectParameter("LocationCode", locationCode) :
            new ObjectParameter("LocationCode", typeof(long));


        var appointmentStatusesIdsParameter = appointmentStatusesIds != null ?
            new ObjectParameter("AppointmentStatusesIds", appointmentStatusesIds) :
            new ObjectParameter("AppointmentStatusesIds", typeof(string));


        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPracAppointmentReasons", practiceCodeParameter, providerCodeParameter, locationCodeParameter, appointmentStatusesIdsParameter, userIdParameter);
    }


    public virtual ObjectResult<GetBatchClaims_Result> GetBatchClaims(Nullable<long> batch_Id)
    {

        var batch_IdParameter = batch_Id.HasValue ?
            new ObjectParameter("Batch_Id", batch_Id) :
            new ObjectParameter("Batch_Id", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchClaims_Result>("GetBatchClaims", batch_IdParameter);
    }


    public virtual ObjectResult<SP_ERACHECKDETAIL_Result> SP_ERACHECKDETAIL(Nullable<long> eRAID, string cHKNO, string cHKDT)
    {

        var eRAIDParameter = eRAID.HasValue ?
            new ObjectParameter("ERAID", eRAID) :
            new ObjectParameter("ERAID", typeof(long));


        var cHKNOParameter = cHKNO != null ?
            new ObjectParameter("CHKNO", cHKNO) :
            new ObjectParameter("CHKNO", typeof(string));


        var cHKDTParameter = cHKDT != null ?
            new ObjectParameter("CHKDT", cHKDT) :
            new ObjectParameter("CHKDT", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ERACHECKDETAIL_Result>("SP_ERACHECKDETAIL", eRAIDParameter, cHKNOParameter, cHKDTParameter);
    }


    public virtual ObjectResult<SP_ERAADJCODEGLOSSARY_Result> SP_ERAADJCODEGLOSSARY(Nullable<long> eRAID)
    {

        var eRAIDParameter = eRAID.HasValue ?
            new ObjectParameter("ERAID", eRAID) :
            new ObjectParameter("ERAID", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ERAADJCODEGLOSSARY_Result>("SP_ERAADJCODEGLOSSARY", eRAIDParameter);
    }


    public virtual int By_Carrier_DOS(Nullable<long> practiceCode, Nullable<System.DateTime> dATEFROM, Nullable<System.DateTime> dATETO, string locationcode, string dateType)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var dATEFROMParameter = dATEFROM.HasValue ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(System.DateTime));


        var dATETOParameter = dATETO.HasValue ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(System.DateTime));


        var locationcodeParameter = locationcode != null ?
            new ObjectParameter("locationcode", locationcode) :
            new ObjectParameter("locationcode", typeof(string));


        var dateTypeParameter = dateType != null ?
            new ObjectParameter("DateType", dateType) :
            new ObjectParameter("DateType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("By_Carrier_DOS", practiceCodeParameter, dATEFROMParameter, dATETOParameter, locationcodeParameter, dateTypeParameter);
    }


    public virtual int By_Primary_Dx_DOS(Nullable<long> practiceCode, Nullable<System.DateTime> dATEFROM, Nullable<System.DateTime> dATETO, string locationcode, string dateType)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var dATEFROMParameter = dATEFROM.HasValue ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(System.DateTime));


        var dATETOParameter = dATETO.HasValue ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(System.DateTime));


        var locationcodeParameter = locationcode != null ?
            new ObjectParameter("locationcode", locationcode) :
            new ObjectParameter("locationcode", typeof(string));


        var dateTypeParameter = dateType != null ?
            new ObjectParameter("DateType", dateType) :
            new ObjectParameter("DateType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("By_Primary_Dx_DOS", practiceCodeParameter, dATEFROMParameter, dATETOParameter, locationcodeParameter, dateTypeParameter);
    }


    public virtual ObjectResult<Payment_By_Carrier_Result> Payment_By_Carrier(Nullable<long> practiceCode, Nullable<System.DateTime> dATEFROM, Nullable<System.DateTime> dATETO, string locationcode, string dateType)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var dATEFROMParameter = dATEFROM.HasValue ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(System.DateTime));


        var dATETOParameter = dATETO.HasValue ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(System.DateTime));


        var locationcodeParameter = locationcode != null ?
            new ObjectParameter("locationcode", locationcode) :
            new ObjectParameter("locationcode", typeof(string));


        var dateTypeParameter = dateType != null ?
            new ObjectParameter("DateType", dateType) :
            new ObjectParameter("DateType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment_By_Carrier_Result>("Payment_By_Carrier", practiceCodeParameter, dATEFROMParameter, dATETOParameter, locationcodeParameter, dateTypeParameter);
    }


    public virtual ObjectResult<By_Cpt_DOS_Result> By_Cpt_DOS(Nullable<long> practiceCode, Nullable<System.DateTime> dATEFROM, Nullable<System.DateTime> dATETO, string locationcode, string dateType)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var dATEFROMParameter = dATEFROM.HasValue ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(System.DateTime));


        var dATETOParameter = dATETO.HasValue ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(System.DateTime));


        var locationcodeParameter = locationcode != null ?
            new ObjectParameter("locationcode", locationcode) :
            new ObjectParameter("locationcode", typeof(string));


        var dateTypeParameter = dateType != null ?
            new ObjectParameter("DateType", dateType) :
            new ObjectParameter("DateType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<By_Cpt_DOS_Result>("By_Cpt_DOS", practiceCodeParameter, dATEFROMParameter, dATETOParameter, locationcodeParameter, dateTypeParameter);
    }


    public virtual ObjectResult<Payment_Daily_Refresh_Result> Payment_Daily_Refresh(Nullable<long> practiceCode, Nullable<System.DateTime> dATEFROM, Nullable<System.DateTime> dATETO, string locationcode, string dateType)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var dATEFROMParameter = dATEFROM.HasValue ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(System.DateTime));


        var dATETOParameter = dATETO.HasValue ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(System.DateTime));


        var locationcodeParameter = locationcode != null ?
            new ObjectParameter("locationcode", locationcode) :
            new ObjectParameter("locationcode", typeof(string));


        var dateTypeParameter = dateType != null ?
            new ObjectParameter("DateType", dateType) :
            new ObjectParameter("DateType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment_Daily_Refresh_Result>("Payment_Daily_Refresh", practiceCodeParameter, dATEFROMParameter, dATETOParameter, locationcodeParameter, dateTypeParameter);
    }


    public virtual int By_Cpt_DOS_bkp(Nullable<long> practiceCode, Nullable<System.DateTime> dATEFROM, Nullable<System.DateTime> dATETO, string locationcode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var dATEFROMParameter = dATEFROM.HasValue ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(System.DateTime));


        var dATETOParameter = dATETO.HasValue ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(System.DateTime));


        var locationcodeParameter = locationcode != null ?
            new ObjectParameter("locationcode", locationcode) :
            new ObjectParameter("locationcode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("By_Cpt_DOS_bkp", practiceCodeParameter, dATEFROMParameter, dATETOParameter, locationcodeParameter);
    }


    public virtual ObjectResult<SP_GETRECALLVISITS_EGD_Result> SP_GETRECALLVISITS_EGD(Nullable<long> pRAC, string dATEFROM, string dATETO)
    {

        var pRACParameter = pRAC.HasValue ?
            new ObjectParameter("PRAC", pRAC) :
            new ObjectParameter("PRAC", typeof(long));


        var dATEFROMParameter = dATEFROM != null ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(string));


        var dATETOParameter = dATETO != null ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETRECALLVISITS_EGD_Result>("SP_GETRECALLVISITS_EGD", pRACParameter, dATEFROMParameter, dATETOParameter);
    }


    public virtual ObjectResult<Aging_Summary_Top_5_Payers_Result> Aging_Summary_Top_5_Payers(Nullable<long> practiceCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Aging_Summary_Top_5_Payers_Result>("Aging_Summary_Top_5_Payers", practiceCodeParameter);
    }


    public virtual ObjectResult<SP_GETPRACTICEANALYSIS_Result> SP_GETPRACTICEANALYSIS(Nullable<long> pRAC, string dATEFROM, string dATETO)
    {

        var pRACParameter = pRAC.HasValue ?
            new ObjectParameter("PRAC", pRAC) :
            new ObjectParameter("PRAC", typeof(long));


        var dATEFROMParameter = dATEFROM != null ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(string));


        var dATETOParameter = dATETO != null ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETPRACTICEANALYSIS_Result>("SP_GETPRACTICEANALYSIS", pRACParameter, dATEFROMParameter, dATETOParameter);
    }


    public virtual ObjectResult<SP_GETPERIODANALYSISANDCLOSING_Result> SP_GETPERIODANALYSISANDCLOSING(Nullable<long> pRAC, string dATEFROM, string dATETO)
    {

        var pRACParameter = pRAC.HasValue ?
            new ObjectParameter("PRAC", pRAC) :
            new ObjectParameter("PRAC", typeof(long));


        var dATEFROMParameter = dATEFROM != null ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(string));


        var dATETOParameter = dATETO != null ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETPERIODANALYSISANDCLOSING_Result>("SP_GETPERIODANALYSISANDCLOSING", pRACParameter, dATEFROMParameter, dATETOParameter);
    }


    public virtual ObjectResult<SP_GETPATIENTBDAYS_Result> SP_GETPATIENTBDAYS(Nullable<long> pRAC, string dT)
    {

        var pRACParameter = pRAC.HasValue ?
            new ObjectParameter("PRAC", pRAC) :
            new ObjectParameter("PRAC", typeof(long));


        var dTParameter = dT != null ?
            new ObjectParameter("DT", dT) :
            new ObjectParameter("DT", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETPATIENTBDAYS_Result>("SP_GETPATIENTBDAYS", pRACParameter, dTParameter);
    }


    public virtual ObjectResult<SP_GETAGINGDASHBOARD_Result> SP_GETAGINGDASHBOARD(Nullable<long> pRAC)
    {

        var pRACParameter = pRAC.HasValue ?
            new ObjectParameter("PRAC", pRAC) :
            new ObjectParameter("PRAC", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETAGINGDASHBOARD_Result>("SP_GETAGINGDASHBOARD", pRACParameter);
    }


    public virtual int OVER_ALL_CHARGES_DOS(Nullable<long> practiceCode, Nullable<System.DateTime> dATEFROM, Nullable<System.DateTime> dATETO, string locationcode, string dateType)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var dATEFROMParameter = dATEFROM.HasValue ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(System.DateTime));


        var dATETOParameter = dATETO.HasValue ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(System.DateTime));


        var locationcodeParameter = locationcode != null ?
            new ObjectParameter("locationcode", locationcode) :
            new ObjectParameter("locationcode", typeof(string));


        var dateTypeParameter = dateType != null ?
            new ObjectParameter("DateType", dateType) :
            new ObjectParameter("DateType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OVER_ALL_CHARGES_DOS", practiceCodeParameter, dATEFROMParameter, dATETOParameter, locationcodeParameter, dateTypeParameter);
    }


    public virtual int Payment_Month_Wise(Nullable<long> practiceCode, Nullable<System.DateTime> dATEFROM, Nullable<System.DateTime> dATETO, string locationcode, string dateType)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var dATEFROMParameter = dATEFROM.HasValue ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(System.DateTime));


        var dATETOParameter = dATETO.HasValue ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(System.DateTime));


        var locationcodeParameter = locationcode != null ?
            new ObjectParameter("locationcode", locationcode) :
            new ObjectParameter("locationcode", typeof(string));


        var dateTypeParameter = dateType != null ?
            new ObjectParameter("DateType", dateType) :
            new ObjectParameter("DateType", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Payment_Month_Wise", practiceCodeParameter, dATEFROMParameter, dATETOParameter, locationcodeParameter, dateTypeParameter);
    }


    public virtual int SP_COSSCPABYADDCRT(string datecriteria, string datacriteria, string fromdate, string todate, string facname)
    {

        var datecriteriaParameter = datecriteria != null ?
            new ObjectParameter("datecriteria", datecriteria) :
            new ObjectParameter("datecriteria", typeof(string));


        var datacriteriaParameter = datacriteria != null ?
            new ObjectParameter("datacriteria", datacriteria) :
            new ObjectParameter("datacriteria", typeof(string));


        var fromdateParameter = fromdate != null ?
            new ObjectParameter("Fromdate", fromdate) :
            new ObjectParameter("Fromdate", typeof(string));


        var todateParameter = todate != null ?
            new ObjectParameter("Todate", todate) :
            new ObjectParameter("Todate", typeof(string));


        var facnameParameter = facname != null ?
            new ObjectParameter("facname", facname) :
            new ObjectParameter("facname", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_COSSCPABYADDCRT", datecriteriaParameter, datacriteriaParameter, fromdateParameter, todateParameter, facnameParameter);
    }


    public virtual ObjectResult<GetInsurancePayersByName_Result> GetInsurancePayersByName(Nullable<long> insuranceNameId)
    {

        var insuranceNameIdParameter = insuranceNameId.HasValue ?
            new ObjectParameter("InsuranceNameId", insuranceNameId) :
            new ObjectParameter("InsuranceNameId", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInsurancePayersByName_Result>("GetInsurancePayersByName", insuranceNameIdParameter);
    }


    public virtual ObjectResult<GetInsurancePayersByInsPayerState_Result> GetInsurancePayersByInsPayerState(string insurancePayerState)
    {

        var insurancePayerStateParameter = insurancePayerState != null ?
            new ObjectParameter("InsurancePayerState", insurancePayerState) :
            new ObjectParameter("InsurancePayerState", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInsurancePayersByInsPayerState_Result>("GetInsurancePayersByInsPayerState", insurancePayerStateParameter);
    }


    public virtual ObjectResult<GetInsurancePayersByInsPayerId_Result> GetInsurancePayersByInsPayerId(string insurancePayerId)
    {

        var insurancePayerIdParameter = insurancePayerId != null ?
            new ObjectParameter("InsurancePayerId", insurancePayerId) :
            new ObjectParameter("InsurancePayerId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInsurancePayersByInsPayerId_Result>("GetInsurancePayersByInsPayerId", insurancePayerIdParameter);
    }


    public virtual int Add_DxCode_For_Provider_diagnosis(Nullable<long> practice_code, string diagCode)
    {

        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(long));


        var diagCodeParameter = diagCode != null ?
            new ObjectParameter("diagCode", diagCode) :
            new ObjectParameter("diagCode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_DxCode_For_Provider_diagnosis", practice_codeParameter, diagCodeParameter);
    }


    public virtual ObjectResult<GetPatientWithClaimsForItemizedStatement_Result> GetPatientWithClaimsForItemizedStatement(string patientsAccounts, string excludedClaimsIds)
    {

        var patientsAccountsParameter = patientsAccounts != null ?
            new ObjectParameter("PatientsAccounts", patientsAccounts) :
            new ObjectParameter("PatientsAccounts", typeof(string));


        var excludedClaimsIdsParameter = excludedClaimsIds != null ?
            new ObjectParameter("ExcludedClaimsIds", excludedClaimsIds) :
            new ObjectParameter("ExcludedClaimsIds", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPatientWithClaimsForItemizedStatement_Result>("GetPatientWithClaimsForItemizedStatement", patientsAccountsParameter, excludedClaimsIdsParameter);
    }


    public virtual ObjectResult<SP_PATIENTAPPSEARCH_Result> SP_PATIENTAPPSEARCH(Nullable<long> pATACCT)
    {

        var pATACCTParameter = pATACCT.HasValue ?
            new ObjectParameter("PATACCT", pATACCT) :
            new ObjectParameter("PATACCT", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PATIENTAPPSEARCH_Result>("SP_PATIENTAPPSEARCH", pATACCTParameter);
    }


    public virtual ObjectResult<uspGetPatientAttachments_Result> uspGetPatientAttachments(Nullable<long> patientAccount)
    {

        var patientAccountParameter = patientAccount.HasValue ?
            new ObjectParameter("patientAccount", patientAccount) :
            new ObjectParameter("patientAccount", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPatientAttachments_Result>("uspGetPatientAttachments", patientAccountParameter);
    }


    public virtual ObjectResult<SP_Missing_Appointment_Report_Result> SP_Missing_Appointment_Report(Nullable<long> pRAC, string dATEFROM, string dATETO)
    {

        var pRACParameter = pRAC.HasValue ?
            new ObjectParameter("PRAC", pRAC) :
            new ObjectParameter("PRAC", typeof(long));


        var dATEFROMParameter = dATEFROM != null ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(string));


        var dATETOParameter = dATETO != null ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Missing_Appointment_Report_Result>("SP_Missing_Appointment_Report", pRACParameter, dATEFROMParameter, dATETOParameter);
    }


    public virtual ObjectResult<SP_Appointment_Detail_Report_Result> SP_Appointment_Detail_Report(Nullable<long> pRAC, string dATEFROM, string dATETO)
    {

        var pRACParameter = pRAC.HasValue ?
            new ObjectParameter("PRAC", pRAC) :
            new ObjectParameter("PRAC", typeof(long));


        var dATEFROMParameter = dATEFROM != null ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(string));


        var dATETOParameter = dATETO != null ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Appointment_Detail_Report_Result>("SP_Appointment_Detail_Report", pRACParameter, dATEFROMParameter, dATETOParameter);
    }


    public virtual ObjectResult<Nullable<int>> uspProviderOfficeTimingBlock(Nullable<System.DateTime> date, string timeFrom, Nullable<int> duration, Nullable<long> providerCode, Nullable<long> practiceCode, Nullable<long> locationCode)
    {

        var dateParameter = date.HasValue ?
            new ObjectParameter("Date", date) :
            new ObjectParameter("Date", typeof(System.DateTime));


        var timeFromParameter = timeFrom != null ?
            new ObjectParameter("TimeFrom", timeFrom) :
            new ObjectParameter("TimeFrom", typeof(string));


        var durationParameter = duration.HasValue ?
            new ObjectParameter("Duration", duration) :
            new ObjectParameter("Duration", typeof(int));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var locationCodeParameter = locationCode.HasValue ?
            new ObjectParameter("LocationCode", locationCode) :
            new ObjectParameter("LocationCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspProviderOfficeTimingBlock", dateParameter, timeFromParameter, durationParameter, providerCodeParameter, practiceCodeParameter, locationCodeParameter);
    }


    public virtual ObjectResult<Check_Duplicate_Blocking_Rule_Result> Check_Duplicate_Blocking_Rule(Nullable<long> pracCode, Nullable<long> providerCode, Nullable<long> locationCode, Nullable<System.DateTime> noAppStartTime, Nullable<System.DateTime> noAppEndTime)
    {

        var pracCodeParameter = pracCode.HasValue ?
            new ObjectParameter("PracCode", pracCode) :
            new ObjectParameter("PracCode", typeof(long));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        var locationCodeParameter = locationCode.HasValue ?
            new ObjectParameter("LocationCode", locationCode) :
            new ObjectParameter("LocationCode", typeof(long));


        var noAppStartTimeParameter = noAppStartTime.HasValue ?
            new ObjectParameter("NoAppStartTime", noAppStartTime) :
            new ObjectParameter("NoAppStartTime", typeof(System.DateTime));


        var noAppEndTimeParameter = noAppEndTime.HasValue ?
            new ObjectParameter("NoAppEndTime", noAppEndTime) :
            new ObjectParameter("NoAppEndTime", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Check_Duplicate_Blocking_Rule_Result>("Check_Duplicate_Blocking_Rule", pracCodeParameter, providerCodeParameter, locationCodeParameter, noAppStartTimeParameter, noAppEndTimeParameter);
    }


    public virtual ObjectResult<Check_Office_Timing_Result> Check_Office_Timing(Nullable<long> pracCode, Nullable<long> providerCode, Nullable<long> locationCode, Nullable<System.DateTime> noAppStartTime, Nullable<System.DateTime> noAppEndTime)
    {

        var pracCodeParameter = pracCode.HasValue ?
            new ObjectParameter("PracCode", pracCode) :
            new ObjectParameter("PracCode", typeof(long));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        var locationCodeParameter = locationCode.HasValue ?
            new ObjectParameter("LocationCode", locationCode) :
            new ObjectParameter("LocationCode", typeof(long));


        var noAppStartTimeParameter = noAppStartTime.HasValue ?
            new ObjectParameter("NoAppStartTime", noAppStartTime) :
            new ObjectParameter("NoAppStartTime", typeof(System.DateTime));


        var noAppEndTimeParameter = noAppEndTime.HasValue ?
            new ObjectParameter("NoAppEndTime", noAppEndTime) :
            new ObjectParameter("NoAppEndTime", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Check_Office_Timing_Result>("Check_Office_Timing", pracCodeParameter, providerCodeParameter, locationCodeParameter, noAppStartTimeParameter, noAppEndTimeParameter);
    }


    public virtual int SP_ERAAUTOPOST(Nullable<long> eRAID, Nullable<long> uSRID, Nullable<System.DateTime> depositDate)
    {

        var eRAIDParameter = eRAID.HasValue ?
            new ObjectParameter("ERAID", eRAID) :
            new ObjectParameter("ERAID", typeof(long));


        var uSRIDParameter = uSRID.HasValue ?
            new ObjectParameter("USRID", uSRID) :
            new ObjectParameter("USRID", typeof(long));


        var depositDateParameter = depositDate.HasValue ?
            new ObjectParameter("DepositDate", depositDate) :
            new ObjectParameter("DepositDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ERAAUTOPOST", eRAIDParameter, uSRIDParameter, depositDateParameter);
    }


    public virtual int SP_ERACLAIMSAUTOPOST(Nullable<long> eRAID, string cLMNO, Nullable<long> uSRID, Nullable<System.DateTime> depositDate)
    {

        var eRAIDParameter = eRAID.HasValue ?
            new ObjectParameter("ERAID", eRAID) :
            new ObjectParameter("ERAID", typeof(long));


        var cLMNOParameter = cLMNO != null ?
            new ObjectParameter("CLMNO", cLMNO) :
            new ObjectParameter("CLMNO", typeof(string));


        var uSRIDParameter = uSRID.HasValue ?
            new ObjectParameter("USRID", uSRID) :
            new ObjectParameter("USRID", typeof(long));


        var depositDateParameter = depositDate.HasValue ?
            new ObjectParameter("DepositDate", depositDate) :
            new ObjectParameter("DepositDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ERACLAIMSAUTOPOST", eRAIDParameter, cLMNOParameter, uSRIDParameter, depositDateParameter);
    }


    public virtual ObjectResult<SP_ClaimInsuranceSearch_Result> SP_ClaimInsuranceSearch(string practiceCode, string insurance_id, string facilityId, string balance, string datefrom, string dateTo)
    {

        var practiceCodeParameter = practiceCode != null ?
            new ObjectParameter("practiceCode", practiceCode) :
            new ObjectParameter("practiceCode", typeof(string));


        var insurance_idParameter = insurance_id != null ?
            new ObjectParameter("Insurance_id", insurance_id) :
            new ObjectParameter("Insurance_id", typeof(string));


        var facilityIdParameter = facilityId != null ?
            new ObjectParameter("FacilityId", facilityId) :
            new ObjectParameter("FacilityId", typeof(string));


        var balanceParameter = balance != null ?
            new ObjectParameter("Balance", balance) :
            new ObjectParameter("Balance", typeof(string));


        var datefromParameter = datefrom != null ?
            new ObjectParameter("Datefrom", datefrom) :
            new ObjectParameter("Datefrom", typeof(string));


        var dateToParameter = dateTo != null ?
            new ObjectParameter("DateTo", dateTo) :
            new ObjectParameter("DateTo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ClaimInsuranceSearch_Result>("SP_ClaimInsuranceSearch", practiceCodeParameter, insurance_idParameter, facilityIdParameter, balanceParameter, datefromParameter, dateToParameter);
    }


    public virtual ObjectResult<SP_ClaimPatientSearchnew_Result> SP_ClaimPatientSearchnew(string practiceCode, string patientAccount, string facilityId, string balance)
    {

        var practiceCodeParameter = practiceCode != null ?
            new ObjectParameter("practiceCode", practiceCode) :
            new ObjectParameter("practiceCode", typeof(string));


        var patientAccountParameter = patientAccount != null ?
            new ObjectParameter("patientAccount", patientAccount) :
            new ObjectParameter("patientAccount", typeof(string));


        var facilityIdParameter = facilityId != null ?
            new ObjectParameter("FacilityId", facilityId) :
            new ObjectParameter("FacilityId", typeof(string));


        var balanceParameter = balance != null ?
            new ObjectParameter("Balance", balance) :
            new ObjectParameter("Balance", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ClaimPatientSearchnew_Result>("SP_ClaimPatientSearchnew", practiceCodeParameter, patientAccountParameter, facilityIdParameter, balanceParameter);
    }


    public virtual ObjectResult<SP_PaymentSearchlistnew_Result> SP_PaymentSearchlistnew(string paymentFrom, string checkNo, string facilityId, string postedBy, string batchNo, string paymentId, string patientName, string insuranceName, string paymentType, string paymentStatus, string paymentDateFrom, string paymentDateTo)
    {

        var paymentFromParameter = paymentFrom != null ?
            new ObjectParameter("paymentFrom", paymentFrom) :
            new ObjectParameter("paymentFrom", typeof(string));


        var checkNoParameter = checkNo != null ?
            new ObjectParameter("CheckNo", checkNo) :
            new ObjectParameter("CheckNo", typeof(string));


        var facilityIdParameter = facilityId != null ?
            new ObjectParameter("FacilityId", facilityId) :
            new ObjectParameter("FacilityId", typeof(string));


        var postedByParameter = postedBy != null ?
            new ObjectParameter("postedBy", postedBy) :
            new ObjectParameter("postedBy", typeof(string));


        var batchNoParameter = batchNo != null ?
            new ObjectParameter("BatchNo", batchNo) :
            new ObjectParameter("BatchNo", typeof(string));


        var paymentIdParameter = paymentId != null ?
            new ObjectParameter("paymentId", paymentId) :
            new ObjectParameter("paymentId", typeof(string));


        var patientNameParameter = patientName != null ?
            new ObjectParameter("PatientName", patientName) :
            new ObjectParameter("PatientName", typeof(string));


        var insuranceNameParameter = insuranceName != null ?
            new ObjectParameter("InsuranceName", insuranceName) :
            new ObjectParameter("InsuranceName", typeof(string));


        var paymentTypeParameter = paymentType != null ?
            new ObjectParameter("PaymentType", paymentType) :
            new ObjectParameter("PaymentType", typeof(string));


        var paymentStatusParameter = paymentStatus != null ?
            new ObjectParameter("PaymentStatus", paymentStatus) :
            new ObjectParameter("PaymentStatus", typeof(string));


        var paymentDateFromParameter = paymentDateFrom != null ?
            new ObjectParameter("PaymentDateFrom", paymentDateFrom) :
            new ObjectParameter("PaymentDateFrom", typeof(string));


        var paymentDateToParameter = paymentDateTo != null ?
            new ObjectParameter("PaymentDateTo", paymentDateTo) :
            new ObjectParameter("PaymentDateTo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PaymentSearchlistnew_Result>("SP_PaymentSearchlistnew", paymentFromParameter, checkNoParameter, facilityIdParameter, postedByParameter, batchNoParameter, paymentIdParameter, patientNameParameter, insuranceNameParameter, paymentTypeParameter, paymentStatusParameter, paymentDateFromParameter, paymentDateToParameter);
    }


    public virtual ObjectResult<SP_PaymentSearchlistfinal_Result> SP_PaymentSearchlistfinal(string paymentFrom, string checkNo, string facilityId, string postedBy, string batchNo, string paymentId, string patientName, string insuranceName, string paymentType, string paymentStatus, string paymentDateFrom, string paymentDateTo)
    {

        var paymentFromParameter = paymentFrom != null ?
            new ObjectParameter("paymentFrom", paymentFrom) :
            new ObjectParameter("paymentFrom", typeof(string));


        var checkNoParameter = checkNo != null ?
            new ObjectParameter("CheckNo", checkNo) :
            new ObjectParameter("CheckNo", typeof(string));


        var facilityIdParameter = facilityId != null ?
            new ObjectParameter("FacilityId", facilityId) :
            new ObjectParameter("FacilityId", typeof(string));


        var postedByParameter = postedBy != null ?
            new ObjectParameter("postedBy", postedBy) :
            new ObjectParameter("postedBy", typeof(string));


        var batchNoParameter = batchNo != null ?
            new ObjectParameter("BatchNo", batchNo) :
            new ObjectParameter("BatchNo", typeof(string));


        var paymentIdParameter = paymentId != null ?
            new ObjectParameter("paymentId", paymentId) :
            new ObjectParameter("paymentId", typeof(string));


        var patientNameParameter = patientName != null ?
            new ObjectParameter("PatientName", patientName) :
            new ObjectParameter("PatientName", typeof(string));


        var insuranceNameParameter = insuranceName != null ?
            new ObjectParameter("InsuranceName", insuranceName) :
            new ObjectParameter("InsuranceName", typeof(string));


        var paymentTypeParameter = paymentType != null ?
            new ObjectParameter("PaymentType", paymentType) :
            new ObjectParameter("PaymentType", typeof(string));


        var paymentStatusParameter = paymentStatus != null ?
            new ObjectParameter("PaymentStatus", paymentStatus) :
            new ObjectParameter("PaymentStatus", typeof(string));


        var paymentDateFromParameter = paymentDateFrom != null ?
            new ObjectParameter("PaymentDateFrom", paymentDateFrom) :
            new ObjectParameter("PaymentDateFrom", typeof(string));


        var paymentDateToParameter = paymentDateTo != null ?
            new ObjectParameter("PaymentDateTo", paymentDateTo) :
            new ObjectParameter("PaymentDateTo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PaymentSearchlistfinal_Result>("SP_PaymentSearchlistfinal", paymentFromParameter, checkNoParameter, facilityIdParameter, postedByParameter, batchNoParameter, paymentIdParameter, patientNameParameter, insuranceNameParameter, paymentTypeParameter, paymentStatusParameter, paymentDateFromParameter, paymentDateToParameter);
    }


    public virtual ObjectResult<SP_GetClaimPaymentDetail_Result> SP_GetClaimPaymentDetail(Nullable<long> claimId)
    {

        var claimIdParameter = claimId.HasValue ?
            new ObjectParameter("ClaimId", claimId) :
            new ObjectParameter("ClaimId", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetClaimPaymentDetail_Result>("SP_GetClaimPaymentDetail", claimIdParameter);
    }


    public virtual ObjectResult<SP_GetClaimPaymentDetail_Updated_Result> SP_GetClaimPaymentDetail_Updated(Nullable<long> claimId)
    {

        var claimIdParameter = claimId.HasValue ?
            new ObjectParameter("ClaimId", claimId) :
            new ObjectParameter("ClaimId", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetClaimPaymentDetail_Updated_Result>("SP_GetClaimPaymentDetail_Updated", claimIdParameter);
    }


    public virtual ObjectResult<sp_insuranceardetailreport_Result> sp_insuranceardetailreport(Nullable<long> practicecode)
    {

        var practicecodeParameter = practicecode.HasValue ?
            new ObjectParameter("practicecode", practicecode) :
            new ObjectParameter("practicecode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_insuranceardetailreport_Result>("sp_insuranceardetailreport", practicecodeParameter);
    }


    public virtual ObjectResult<EligRequestTEST_Result> EligRequestTEST(Nullable<long> pATIENT_ACCOUNT)
    {

        var pATIENT_ACCOUNTParameter = pATIENT_ACCOUNT.HasValue ?
            new ObjectParameter("PATIENT_ACCOUNT", pATIENT_ACCOUNT) :
            new ObjectParameter("PATIENT_ACCOUNT", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EligRequestTEST_Result>("EligRequestTEST", pATIENT_ACCOUNTParameter);
    }


    public virtual ObjectResult<EligRequests_Result> EligRequests(Nullable<long> pATIENT_ACCOUNT, Nullable<long> practice_Code, Nullable<long> pROVID, Nullable<long> iNSURANCE_ID)
    {

        var pATIENT_ACCOUNTParameter = pATIENT_ACCOUNT.HasValue ?
            new ObjectParameter("PATIENT_ACCOUNT", pATIENT_ACCOUNT) :
            new ObjectParameter("PATIENT_ACCOUNT", typeof(long));


        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("practice_Code", practice_Code) :
            new ObjectParameter("practice_Code", typeof(long));


        var pROVIDParameter = pROVID.HasValue ?
            new ObjectParameter("PROVID", pROVID) :
            new ObjectParameter("PROVID", typeof(long));


        var iNSURANCE_IDParameter = iNSURANCE_ID.HasValue ?
            new ObjectParameter("INSURANCE_ID", iNSURANCE_ID) :
            new ObjectParameter("INSURANCE_ID", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EligRequests_Result>("EligRequests", pATIENT_ACCOUNTParameter, practice_CodeParameter, pROVIDParameter, iNSURANCE_IDParameter);
    }


    public virtual ObjectResult<Aging_Summary_report_Top_5_Payers_Result> Aging_Summary_report_Top_5_Payers(Nullable<long> practiceCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Aging_Summary_report_Top_5_Payers_Result>("Aging_Summary_report_Top_5_Payers", practiceCodeParameter);
    }


    public virtual ObjectResult<uspGetBatchClaimsProviderPayers_Result> uspGetBatchClaimsProviderPayers(string payer_id, string id, string id_type)
    {

        var payer_idParameter = payer_id != null ?
            new ObjectParameter("payer_id", payer_id) :
            new ObjectParameter("payer_id", typeof(string));


        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var id_typeParameter = id_type != null ?
            new ObjectParameter("id_type", id_type) :
            new ObjectParameter("id_type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBatchClaimsProviderPayers_Result>("uspGetBatchClaimsProviderPayers", payer_idParameter, idParameter, id_typeParameter);
    }


    public virtual ObjectResult<uspGetBatchClaimsProviderPayersDataFromUSP_Result> uspGetBatchClaimsProviderPayersDataFromUSP(string payer_id, string id, string id_type)
    {

        var payer_idParameter = payer_id != null ?
            new ObjectParameter("payer_id", payer_id) :
            new ObjectParameter("payer_id", typeof(string));


        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var id_typeParameter = id_type != null ?
            new ObjectParameter("id_type", id_type) :
            new ObjectParameter("id_type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetBatchClaimsProviderPayersDataFromUSP_Result>("uspGetBatchClaimsProviderPayersDataFromUSP", payer_idParameter, idParameter, id_typeParameter);
    }


    public virtual ObjectResult<Aging_Summary_Analysis_Reporting_Result> Aging_Summary_Analysis_Reporting(Nullable<long> practiceCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Aging_Summary_Analysis_Reporting_Result>("Aging_Summary_Analysis_Reporting", practiceCodeParameter);
    }


    public virtual ObjectResult<DelayClaimReports_Result> DelayClaimReports(Nullable<long> practicecode)
    {

        var practicecodeParameter = practicecode.HasValue ?
            new ObjectParameter("practicecode", practicecode) :
            new ObjectParameter("practicecode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DelayClaimReports_Result>("DelayClaimReports", practicecodeParameter);
    }


    public virtual ObjectResult<SP_NDCSEARCHBySearch_Result> SP_NDCSEARCHBySearch(string hcpcs_code, string nDC2, string drug_Name)
    {

        var hcpcs_codeParameter = hcpcs_code != null ?
            new ObjectParameter("hcpcs_code", hcpcs_code) :
            new ObjectParameter("hcpcs_code", typeof(string));


        var nDC2Parameter = nDC2 != null ?
            new ObjectParameter("NDC2", nDC2) :
            new ObjectParameter("NDC2", typeof(string));


        var drug_NameParameter = drug_Name != null ?
            new ObjectParameter("Drug_Name", drug_Name) :
            new ObjectParameter("Drug_Name", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_NDCSEARCHBySearch_Result>("SP_NDCSEARCHBySearch", hcpcs_codeParameter, nDC2Parameter, drug_NameParameter);
    }


    public virtual ObjectResult<SP_NDCSEARCHBySearchCriteria_Result> SP_NDCSEARCHBySearchCriteria(string hcpcs_code, string nDC2, string drug_Name)
    {

        var hcpcs_codeParameter = hcpcs_code != null ?
            new ObjectParameter("hcpcs_code", hcpcs_code) :
            new ObjectParameter("hcpcs_code", typeof(string));


        var nDC2Parameter = nDC2 != null ?
            new ObjectParameter("NDC2", nDC2) :
            new ObjectParameter("NDC2", typeof(string));


        var drug_NameParameter = drug_Name != null ?
            new ObjectParameter("Drug_Name", drug_Name) :
            new ObjectParameter("Drug_Name", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_NDCSEARCHBySearchCriteria_Result>("SP_NDCSEARCHBySearchCriteria", hcpcs_codeParameter, nDC2Parameter, drug_NameParameter);
    }


    public virtual ObjectResult<Nullable<int>> uspAuthTWOFAC(Nullable<long> pUserid, Nullable<long> pCode)
    {

        var pUseridParameter = pUserid.HasValue ?
            new ObjectParameter("pUserid", pUserid) :
            new ObjectParameter("pUserid", typeof(long));


        var pCodeParameter = pCode.HasValue ?
            new ObjectParameter("pCode", pCode) :
            new ObjectParameter("pCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspAuthTWOFAC", pUseridParameter, pCodeParameter);
    }


    public virtual ObjectResult<DXSearchCriteria_Result> DXSearchCriteria(string dXCode, string des)
    {

        var dXCodeParameter = dXCode != null ?
            new ObjectParameter("DXCode", dXCode) :
            new ObjectParameter("DXCode", typeof(string));


        var desParameter = des != null ?
            new ObjectParameter("des", des) :
            new ObjectParameter("des", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DXSearchCriteria_Result>("DXSearchCriteria", dXCodeParameter, desParameter);
    }


    public virtual ObjectResult<check_CPtPlan_Result> check_CPtPlan(Nullable<long> practice_code, Nullable<long> providerCode, Nullable<long> location_code, string location_State)
    {

        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("Practice_code", practice_code) :
            new ObjectParameter("Practice_code", typeof(long));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("providerCode", providerCode) :
            new ObjectParameter("providerCode", typeof(long));


        var location_codeParameter = location_code.HasValue ?
            new ObjectParameter("location_code", location_code) :
            new ObjectParameter("location_code", typeof(long));


        var location_StateParameter = location_State != null ?
            new ObjectParameter("Location_State", location_State) :
            new ObjectParameter("Location_State", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<check_CPtPlan_Result>("check_CPtPlan", practice_codeParameter, providerCodeParameter, location_codeParameter, location_StateParameter);
    }


    public virtual ObjectResult<SP_getpraticedataforCPTPlan_Result> SP_getpraticedataforCPTPlan(Nullable<long> practice_code)
    {

        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("Practice_code", practice_code) :
            new ObjectParameter("Practice_code", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getpraticedataforCPTPlan_Result>("SP_getpraticedataforCPTPlan", practice_codeParameter);
    }


    public virtual ObjectResult<spGetAllViolations_Result> spGetAllViolations()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllViolations_Result>("spGetAllViolations");
    }


    public virtual int spGetAllFailedClaims()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAllFailedClaims");
    }


    public virtual ObjectResult<fetchFailedClaims_Result> fetchFailedClaims()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<fetchFailedClaims_Result>("fetchFailedClaims");
    }


    public virtual ObjectResult<spGetAllCleanClaims_Result> spGetAllCleanClaims()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllCleanClaims_Result>("spGetAllCleanClaims");
    }


    public virtual ObjectResult<spGetAllClaimsInQueue_Result> spGetAllClaimsInQueue()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllClaimsInQueue_Result>("spGetAllClaimsInQueue");
    }


    public virtual int sp_FindErorrClaims()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FindErorrClaims");
    }


    public virtual int sp_ScrubberProcess()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ScrubberProcess");
    }


    public virtual int SP_GetProviderCPTPlanIDtemp(string pRACTICECODE, string pROVIDER, Nullable<bool> bSELFPAY, string pROCEDURECODE, string mODIFIER)
    {

        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var pROCEDURECODEParameter = pROCEDURECODE != null ?
            new ObjectParameter("PROCEDURECODE", pROCEDURECODE) :
            new ObjectParameter("PROCEDURECODE", typeof(string));


        var mODIFIERParameter = mODIFIER != null ?
            new ObjectParameter("MODIFIER", mODIFIER) :
            new ObjectParameter("MODIFIER", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetProviderCPTPlanIDtemp", pRACTICECODEParameter, pROVIDERParameter, bSELFPAYParameter, pROCEDURECODEParameter, mODIFIERParameter);
    }


    public virtual int GetProviderCPTPlanIDTemptesting(string pRACTICECODE, string pROVIDER, Nullable<bool> bSELFPAY, string pROCEDURECODE, string mODIFIER)
    {

        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var pROCEDURECODEParameter = pROCEDURECODE != null ?
            new ObjectParameter("PROCEDURECODE", pROCEDURECODE) :
            new ObjectParameter("PROCEDURECODE", typeof(string));


        var mODIFIERParameter = mODIFIER != null ?
            new ObjectParameter("MODIFIER", mODIFIER) :
            new ObjectParameter("MODIFIER", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetProviderCPTPlanIDTemptesting", pRACTICECODEParameter, pROVIDERParameter, bSELFPAYParameter, pROCEDURECODEParameter, mODIFIERParameter);
    }


    public virtual int GetProviderCPTPlanIDTemptestingreturntypefix(string pRACTICECODE, string pROVIDER, Nullable<bool> bSELFPAY, string pROCEDURECODE, string mODIFIER)
    {

        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var pROCEDURECODEParameter = pROCEDURECODE != null ?
            new ObjectParameter("PROCEDURECODE", pROCEDURECODE) :
            new ObjectParameter("PROCEDURECODE", typeof(string));


        var mODIFIERParameter = mODIFIER != null ?
            new ObjectParameter("MODIFIER", mODIFIER) :
            new ObjectParameter("MODIFIER", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetProviderCPTPlanIDTemptestingreturntypefix", pRACTICECODEParameter, pROVIDERParameter, bSELFPAYParameter, pROCEDURECODEParameter, mODIFIERParameter);
    }


    public virtual ObjectResult<string> GetProvidercptplanidusingsp(string pRACTICECODE, string pROVIDER, Nullable<bool> bSELFPAY, string pROCEDURECODE, string mODIFIER)
    {

        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var pROCEDURECODEParameter = pROCEDURECODE != null ?
            new ObjectParameter("PROCEDURECODE", pROCEDURECODE) :
            new ObjectParameter("PROCEDURECODE", typeof(string));


        var mODIFIERParameter = mODIFIER != null ?
            new ObjectParameter("MODIFIER", mODIFIER) :
            new ObjectParameter("MODIFIER", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetProvidercptplanidusingsp", pRACTICECODEParameter, pROVIDERParameter, bSELFPAYParameter, pROCEDURECODEParameter, mODIFIERParameter);
    }


    public virtual ObjectResult<SP_SelectAllPracticeUsers_Result> SP_SelectAllPracticeUsers(Nullable<long> practice_Code)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectAllPracticeUsers_Result>("SP_SelectAllPracticeUsers", practice_CodeParameter);
    }


    public virtual ObjectResult<SP_GetAllAssignedClaimForusers_Result> SP_GetAllAssignedClaimForusers(Nullable<long> assigned_To_UserId, Nullable<long> practice_code)
    {

        var assigned_To_UserIdParameter = assigned_To_UserId.HasValue ?
            new ObjectParameter("Assigned_To_UserId", assigned_To_UserId) :
            new ObjectParameter("Assigned_To_UserId", typeof(long));


        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllAssignedClaimForusers_Result>("SP_GetAllAssignedClaimForusers", assigned_To_UserIdParameter, practice_codeParameter);
    }


    public virtual ObjectResult<SP_userReportCharges_Result> SP_userReportCharges(string practice_code, string userid, string dateFrom, string dateTo)
    {

        var practice_codeParameter = practice_code != null ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(string));


        var useridParameter = userid != null ?
            new ObjectParameter("userid", userid) :
            new ObjectParameter("userid", typeof(string));


        var dateFromParameter = dateFrom != null ?
            new ObjectParameter("dateFrom", dateFrom) :
            new ObjectParameter("dateFrom", typeof(string));


        var dateToParameter = dateTo != null ?
            new ObjectParameter("dateTo", dateTo) :
            new ObjectParameter("dateTo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_userReportCharges_Result>("SP_userReportCharges", practice_codeParameter, useridParameter, dateFromParameter, dateToParameter);
    }


    public virtual ObjectResult<SP_PassedClaimsSearch_Result1> SP_PassedClaimsSearch(Nullable<System.DateTime> dos_from, Nullable<System.DateTime> dos_to, string patient_account, string billing_physician, string location_code, Nullable<bool> icd9_claim, string type, string status, string insurance_id, Nullable<long> practice_code)
    {

        var dos_fromParameter = dos_from.HasValue ?
            new ObjectParameter("dos_from", dos_from) :
            new ObjectParameter("dos_from", typeof(System.DateTime));


        var dos_toParameter = dos_to.HasValue ?
            new ObjectParameter("dos_to", dos_to) :
            new ObjectParameter("dos_to", typeof(System.DateTime));


        var patient_accountParameter = patient_account != null ?
            new ObjectParameter("patient_account", patient_account) :
            new ObjectParameter("patient_account", typeof(string));


        var billing_physicianParameter = billing_physician != null ?
            new ObjectParameter("billing_physician", billing_physician) :
            new ObjectParameter("billing_physician", typeof(string));


        var location_codeParameter = location_code != null ?
            new ObjectParameter("location_code", location_code) :
            new ObjectParameter("location_code", typeof(string));


        var icd9_claimParameter = icd9_claim.HasValue ?
            new ObjectParameter("icd9_claim", icd9_claim) :
            new ObjectParameter("icd9_claim", typeof(bool));


        var typeParameter = type != null ?
            new ObjectParameter("type", type) :
            new ObjectParameter("type", typeof(string));


        var statusParameter = status != null ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(string));


        var insurance_idParameter = insurance_id != null ?
            new ObjectParameter("insurance_id", insurance_id) :
            new ObjectParameter("insurance_id", typeof(string));


        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PassedClaimsSearch_Result1>("SP_PassedClaimsSearch", dos_fromParameter, dos_toParameter, patient_accountParameter, billing_physicianParameter, location_codeParameter, icd9_claimParameter, typeParameter, statusParameter, insurance_idParameter, practice_codeParameter);
    }


    public virtual ObjectResult<SP_userReportChargesNewPMOSB_Result> SP_userReportChargesNewPMOSB(string practice_code, string userid, string dateFrom, string dateTo)
    {

        var practice_codeParameter = practice_code != null ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(string));


        var useridParameter = userid != null ?
            new ObjectParameter("userid", userid) :
            new ObjectParameter("userid", typeof(string));


        var dateFromParameter = dateFrom != null ?
            new ObjectParameter("dateFrom", dateFrom) :
            new ObjectParameter("dateFrom", typeof(string));


        var dateToParameter = dateTo != null ?
            new ObjectParameter("dateTo", dateTo) :
            new ObjectParameter("dateTo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_userReportChargesNewPMOSB_Result>("SP_userReportChargesNewPMOSB", practice_codeParameter, useridParameter, dateFromParameter, dateToParameter);
    }


    public virtual int SP_rollingReport(Nullable<long> practiceCode, Nullable<int> duration)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var durationParameter = duration.HasValue ?
            new ObjectParameter("duration", duration) :
            new ObjectParameter("duration", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_rollingReport", practiceCodeParameter, durationParameter);
    }


    public virtual int SP_GetclaimbymultiIDS(string claimId, string practiceCode)
    {

        var claimIdParameter = claimId != null ?
            new ObjectParameter("ClaimId", claimId) :
            new ObjectParameter("ClaimId", typeof(string));


        var practiceCodeParameter = practiceCode != null ?
            new ObjectParameter("practiceCode", practiceCode) :
            new ObjectParameter("practiceCode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetclaimbymultiIDS", claimIdParameter, practiceCodeParameter);
    }


    public virtual ObjectResult<SP_PaymentCreatiaForSreach_Result> SP_PaymentCreatiaForSreach(string paymentFrom, string checkNo, string facilityId, string postedBy, string batchNo, string paymentId, string patientName, string insuranceName, string paymentType, string paymentStatus, string paymentDateFrom, string paymentDateTo)
    {

        var paymentFromParameter = paymentFrom != null ?
            new ObjectParameter("paymentFrom", paymentFrom) :
            new ObjectParameter("paymentFrom", typeof(string));


        var checkNoParameter = checkNo != null ?
            new ObjectParameter("CheckNo", checkNo) :
            new ObjectParameter("CheckNo", typeof(string));


        var facilityIdParameter = facilityId != null ?
            new ObjectParameter("FacilityId", facilityId) :
            new ObjectParameter("FacilityId", typeof(string));


        var postedByParameter = postedBy != null ?
            new ObjectParameter("postedBy", postedBy) :
            new ObjectParameter("postedBy", typeof(string));


        var batchNoParameter = batchNo != null ?
            new ObjectParameter("BatchNo", batchNo) :
            new ObjectParameter("BatchNo", typeof(string));


        var paymentIdParameter = paymentId != null ?
            new ObjectParameter("paymentId", paymentId) :
            new ObjectParameter("paymentId", typeof(string));


        var patientNameParameter = patientName != null ?
            new ObjectParameter("PatientName", patientName) :
            new ObjectParameter("PatientName", typeof(string));


        var insuranceNameParameter = insuranceName != null ?
            new ObjectParameter("InsuranceName", insuranceName) :
            new ObjectParameter("InsuranceName", typeof(string));


        var paymentTypeParameter = paymentType != null ?
            new ObjectParameter("PaymentType", paymentType) :
            new ObjectParameter("PaymentType", typeof(string));


        var paymentStatusParameter = paymentStatus != null ?
            new ObjectParameter("PaymentStatus", paymentStatus) :
            new ObjectParameter("PaymentStatus", typeof(string));


        var paymentDateFromParameter = paymentDateFrom != null ?
            new ObjectParameter("PaymentDateFrom", paymentDateFrom) :
            new ObjectParameter("PaymentDateFrom", typeof(string));


        var paymentDateToParameter = paymentDateTo != null ?
            new ObjectParameter("PaymentDateTo", paymentDateTo) :
            new ObjectParameter("PaymentDateTo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PaymentCreatiaForSreach_Result>("SP_PaymentCreatiaForSreach", paymentFromParameter, checkNoParameter, facilityIdParameter, postedByParameter, batchNoParameter, paymentIdParameter, patientNameParameter, insuranceNameParameter, paymentTypeParameter, paymentStatusParameter, paymentDateFromParameter, paymentDateToParameter);
    }


    public virtual ObjectResult<SP_AllPaymentSearch_Result> SP_AllPaymentSearch(string paymentFrom, string checkNo, string facilityId, string postedBy, string batchNo, string paymentId, string patientName, string insuranceName, string paymentType, string paymentStatus, string paymentDateFrom, string paymentDateTo, string practice_code)
    {

        var paymentFromParameter = paymentFrom != null ?
            new ObjectParameter("paymentFrom", paymentFrom) :
            new ObjectParameter("paymentFrom", typeof(string));


        var checkNoParameter = checkNo != null ?
            new ObjectParameter("CheckNo", checkNo) :
            new ObjectParameter("CheckNo", typeof(string));


        var facilityIdParameter = facilityId != null ?
            new ObjectParameter("FacilityId", facilityId) :
            new ObjectParameter("FacilityId", typeof(string));


        var postedByParameter = postedBy != null ?
            new ObjectParameter("postedBy", postedBy) :
            new ObjectParameter("postedBy", typeof(string));


        var batchNoParameter = batchNo != null ?
            new ObjectParameter("BatchNo", batchNo) :
            new ObjectParameter("BatchNo", typeof(string));


        var paymentIdParameter = paymentId != null ?
            new ObjectParameter("paymentId", paymentId) :
            new ObjectParameter("paymentId", typeof(string));


        var patientNameParameter = patientName != null ?
            new ObjectParameter("PatientName", patientName) :
            new ObjectParameter("PatientName", typeof(string));


        var insuranceNameParameter = insuranceName != null ?
            new ObjectParameter("InsuranceName", insuranceName) :
            new ObjectParameter("InsuranceName", typeof(string));


        var paymentTypeParameter = paymentType != null ?
            new ObjectParameter("PaymentType", paymentType) :
            new ObjectParameter("PaymentType", typeof(string));


        var paymentStatusParameter = paymentStatus != null ?
            new ObjectParameter("PaymentStatus", paymentStatus) :
            new ObjectParameter("PaymentStatus", typeof(string));


        var paymentDateFromParameter = paymentDateFrom != null ?
            new ObjectParameter("PaymentDateFrom", paymentDateFrom) :
            new ObjectParameter("PaymentDateFrom", typeof(string));


        var paymentDateToParameter = paymentDateTo != null ?
            new ObjectParameter("PaymentDateTo", paymentDateTo) :
            new ObjectParameter("PaymentDateTo", typeof(string));


        var practice_codeParameter = practice_code != null ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AllPaymentSearch_Result>("SP_AllPaymentSearch", paymentFromParameter, checkNoParameter, facilityIdParameter, postedByParameter, batchNoParameter, paymentIdParameter, patientNameParameter, insuranceNameParameter, paymentTypeParameter, paymentStatusParameter, paymentDateFromParameter, paymentDateToParameter, practice_codeParameter);
    }


    public virtual ObjectResult<uspGetAllPaymentbySearch_Result> uspGetAllPaymentbySearch(string paymentFrom, string checkNo, string facilityId, string postedBy, string batchNo, string paymentId, string patientName, string insuranceName, string paymentType, string paymentStatus, string paymentDateFrom, string paymentDateTo, string practice_code)
    {

        var paymentFromParameter = paymentFrom != null ?
            new ObjectParameter("paymentFrom", paymentFrom) :
            new ObjectParameter("paymentFrom", typeof(string));


        var checkNoParameter = checkNo != null ?
            new ObjectParameter("CheckNo", checkNo) :
            new ObjectParameter("CheckNo", typeof(string));


        var facilityIdParameter = facilityId != null ?
            new ObjectParameter("FacilityId", facilityId) :
            new ObjectParameter("FacilityId", typeof(string));


        var postedByParameter = postedBy != null ?
            new ObjectParameter("postedBy", postedBy) :
            new ObjectParameter("postedBy", typeof(string));


        var batchNoParameter = batchNo != null ?
            new ObjectParameter("BatchNo", batchNo) :
            new ObjectParameter("BatchNo", typeof(string));


        var paymentIdParameter = paymentId != null ?
            new ObjectParameter("paymentId", paymentId) :
            new ObjectParameter("paymentId", typeof(string));


        var patientNameParameter = patientName != null ?
            new ObjectParameter("PatientName", patientName) :
            new ObjectParameter("PatientName", typeof(string));


        var insuranceNameParameter = insuranceName != null ?
            new ObjectParameter("InsuranceName", insuranceName) :
            new ObjectParameter("InsuranceName", typeof(string));


        var paymentTypeParameter = paymentType != null ?
            new ObjectParameter("PaymentType", paymentType) :
            new ObjectParameter("PaymentType", typeof(string));


        var paymentStatusParameter = paymentStatus != null ?
            new ObjectParameter("PaymentStatus", paymentStatus) :
            new ObjectParameter("PaymentStatus", typeof(string));


        var paymentDateFromParameter = paymentDateFrom != null ?
            new ObjectParameter("PaymentDateFrom", paymentDateFrom) :
            new ObjectParameter("PaymentDateFrom", typeof(string));


        var paymentDateToParameter = paymentDateTo != null ?
            new ObjectParameter("PaymentDateTo", paymentDateTo) :
            new ObjectParameter("PaymentDateTo", typeof(string));


        var practice_codeParameter = practice_code != null ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllPaymentbySearch_Result>("uspGetAllPaymentbySearch", paymentFromParameter, checkNoParameter, facilityIdParameter, postedByParameter, batchNoParameter, paymentIdParameter, patientNameParameter, insuranceNameParameter, paymentTypeParameter, paymentStatusParameter, paymentDateFromParameter, paymentDateToParameter, practice_codeParameter);
    }


    public virtual ObjectResult<SP_Claim_patientbysearch_Result> SP_Claim_patientbysearch(string practiceCode, string patientAccount, string facilityId, string balance)
    {

        var practiceCodeParameter = practiceCode != null ?
            new ObjectParameter("practiceCode", practiceCode) :
            new ObjectParameter("practiceCode", typeof(string));


        var patientAccountParameter = patientAccount != null ?
            new ObjectParameter("patientAccount", patientAccount) :
            new ObjectParameter("patientAccount", typeof(string));


        var facilityIdParameter = facilityId != null ?
            new ObjectParameter("FacilityId", facilityId) :
            new ObjectParameter("FacilityId", typeof(string));


        var balanceParameter = balance != null ?
            new ObjectParameter("Balance", balance) :
            new ObjectParameter("Balance", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Claim_patientbysearch_Result>("SP_Claim_patientbysearch", practiceCodeParameter, patientAccountParameter, facilityIdParameter, balanceParameter);
    }


    public virtual ObjectResult<SP_Claim_Insurancebysearch_Result> SP_Claim_Insurancebysearch(string practiceCode, string insurance_id, string facilityId, string balance, string datefrom, string dateTo)
    {

        var practiceCodeParameter = practiceCode != null ?
            new ObjectParameter("practiceCode", practiceCode) :
            new ObjectParameter("practiceCode", typeof(string));


        var insurance_idParameter = insurance_id != null ?
            new ObjectParameter("Insurance_id", insurance_id) :
            new ObjectParameter("Insurance_id", typeof(string));


        var facilityIdParameter = facilityId != null ?
            new ObjectParameter("FacilityId", facilityId) :
            new ObjectParameter("FacilityId", typeof(string));


        var balanceParameter = balance != null ?
            new ObjectParameter("Balance", balance) :
            new ObjectParameter("Balance", typeof(string));


        var datefromParameter = datefrom != null ?
            new ObjectParameter("Datefrom", datefrom) :
            new ObjectParameter("Datefrom", typeof(string));


        var dateToParameter = dateTo != null ?
            new ObjectParameter("DateTo", dateTo) :
            new ObjectParameter("DateTo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Claim_Insurancebysearch_Result>("SP_Claim_Insurancebysearch", practiceCodeParameter, insurance_idParameter, facilityIdParameter, balanceParameter, datefromParameter, dateToParameter);
    }


    public virtual ObjectResult<Payment_detail_Proctest_Result> Payment_detail_Proctest(Nullable<long> practiceCode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var dateFromParameter = dateFrom.HasValue ?
            new ObjectParameter("DateFrom", dateFrom) :
            new ObjectParameter("DateFrom", typeof(System.DateTime));


        var dateToParameter = dateTo.HasValue ?
            new ObjectParameter("DateTo", dateTo) :
            new ObjectParameter("DateTo", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment_detail_Proctest_Result>("Payment_detail_Proctest", practiceCodeParameter, dateFromParameter, dateToParameter);
    }


    public virtual ObjectResult<SP_GETAGINGDASHBOARD_Tets_Result> SP_GETAGINGDASHBOARD_Tets(Nullable<long> pRAC)
    {

        var pRACParameter = pRAC.HasValue ?
            new ObjectParameter("PRAC", pRAC) :
            new ObjectParameter("PRAC", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETAGINGDASHBOARD_Tets_Result>("SP_GETAGINGDASHBOARD_Tets", pRACParameter);
    }


    public virtual ObjectResult<SP_CountAssignedAccounts_Result> SP_CountAssignedAccounts(Nullable<long> practice_code, Nullable<long> userid)
    {

        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("Practice_code", practice_code) :
            new ObjectParameter("Practice_code", typeof(long));


        var useridParameter = userid.HasValue ?
            new ObjectParameter("Userid", userid) :
            new ObjectParameter("Userid", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CountAssignedAccounts_Result>("SP_CountAssignedAccounts", practice_codeParameter, useridParameter);
    }


    public virtual ObjectResult<SP_CountAssignedclaims_Result> SP_CountAssignedclaims(Nullable<long> practice_code, Nullable<long> userid)
    {

        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("Practice_code", practice_code) :
            new ObjectParameter("Practice_code", typeof(long));


        var useridParameter = userid.HasValue ?
            new ObjectParameter("Userid", userid) :
            new ObjectParameter("Userid", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CountAssignedclaims_Result>("SP_CountAssignedclaims", practice_codeParameter, useridParameter);
    }


    public virtual ObjectResult<SP_GetSpecificClaiminfo_Result> SP_GetSpecificClaiminfo(Nullable<long> claim_No)
    {

        var claim_NoParameter = claim_No.HasValue ?
            new ObjectParameter("Claim_No", claim_No) :
            new ObjectParameter("Claim_No", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSpecificClaiminfo_Result>("SP_GetSpecificClaiminfo", claim_NoParameter);
    }


    public virtual ObjectResult<SP_GetClaimById_Result> SP_GetClaimById(Nullable<long> claimId, string practiceCode)
    {

        var claimIdParameter = claimId.HasValue ?
            new ObjectParameter("ClaimId", claimId) :
            new ObjectParameter("ClaimId", typeof(long));


        var practiceCodeParameter = practiceCode != null ?
            new ObjectParameter("practiceCode", practiceCode) :
            new ObjectParameter("practiceCode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetClaimById_Result>("SP_GetClaimById", claimIdParameter, practiceCodeParameter);
    }


    public virtual ObjectResult<spGetFailedClaimsFromScrubber_Result> spGetFailedClaimsFromScrubber(Nullable<long> practiceCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("practiceCode", practiceCode) :
            new ObjectParameter("practiceCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFailedClaimsFromScrubber_Result>("spGetFailedClaimsFromScrubber", practiceCodeParameter);
    }


    public virtual ObjectResult<spGetCleanClaims_Result> spGetCleanClaims(Nullable<long> practiceCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("practiceCode", practiceCode) :
            new ObjectParameter("practiceCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCleanClaims_Result>("spGetCleanClaims", practiceCodeParameter);
    }


    public virtual int insertInScrubberQueue(Nullable<long> claimNo, Nullable<long> patientAccount, Nullable<System.DateTime> addToQDate, Nullable<long> providerCode, string status, string cPT, Nullable<System.DateTime> approvalDate, Nullable<System.DateTime> failingDate)
    {

        var claimNoParameter = claimNo.HasValue ?
            new ObjectParameter("ClaimNo", claimNo) :
            new ObjectParameter("ClaimNo", typeof(long));


        var patientAccountParameter = patientAccount.HasValue ?
            new ObjectParameter("PatientAccount", patientAccount) :
            new ObjectParameter("PatientAccount", typeof(long));


        var addToQDateParameter = addToQDate.HasValue ?
            new ObjectParameter("AddToQDate", addToQDate) :
            new ObjectParameter("AddToQDate", typeof(System.DateTime));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        var statusParameter = status != null ?
            new ObjectParameter("Status", status) :
            new ObjectParameter("Status", typeof(string));


        var cPTParameter = cPT != null ?
            new ObjectParameter("CPT", cPT) :
            new ObjectParameter("CPT", typeof(string));


        var approvalDateParameter = approvalDate.HasValue ?
            new ObjectParameter("ApprovalDate", approvalDate) :
            new ObjectParameter("ApprovalDate", typeof(System.DateTime));


        var failingDateParameter = failingDate.HasValue ?
            new ObjectParameter("FailingDate", failingDate) :
            new ObjectParameter("FailingDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertInScrubberQueue", claimNoParameter, patientAccountParameter, addToQDateParameter, providerCodeParameter, statusParameter, cPTParameter, approvalDateParameter, failingDateParameter);
    }


    public virtual int sp_deleteFromScrubberQueue(Nullable<long> claimNo)
    {

        var claimNoParameter = claimNo.HasValue ?
            new ObjectParameter("ClaimNo", claimNo) :
            new ObjectParameter("ClaimNo", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_deleteFromScrubberQueue", claimNoParameter);
    }


    public virtual ObjectResult<string> CheckMatching_Column(string columnname, string practiceCode)
    {

        var columnnameParameter = columnname != null ?
            new ObjectParameter("columnname", columnname) :
            new ObjectParameter("columnname", typeof(string));


        var practiceCodeParameter = practiceCode != null ?
            new ObjectParameter("practiceCode", practiceCode) :
            new ObjectParameter("practiceCode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CheckMatching_Column", columnnameParameter, practiceCodeParameter);
    }


    public virtual ObjectResult<string> GetCustomEditColums(string tableName)
    {

        var tableNameParameter = tableName != null ?
            new ObjectParameter("TableName", tableName) :
            new ObjectParameter("TableName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCustomEditColums", tableNameParameter);
    }


    public virtual ObjectResult<string> USP_GetCustomEditTable()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("USP_GetCustomEditTable");
    }


    public virtual ObjectResult<SP_PATIENTSTATEMENTCOUNT_BYCLAIM_Result> SP_PATIENTSTATEMENTCOUNT_BYCLAIM(Nullable<long> cLAIM_NO)
    {

        var cLAIM_NOParameter = cLAIM_NO.HasValue ?
            new ObjectParameter("CLAIM_NO", cLAIM_NO) :
            new ObjectParameter("CLAIM_NO", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PATIENTSTATEMENTCOUNT_BYCLAIM_Result>("SP_PATIENTSTATEMENTCOUNT_BYCLAIM", cLAIM_NOParameter);
    }


    public virtual ObjectResult<sp_GetScrubberRejectionReports_Result> sp_GetScrubberRejectionReports(Nullable<long> practiceCode, Nullable<System.DateTime> date_From, Nullable<System.DateTime> date_To)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("practiceCode", practiceCode) :
            new ObjectParameter("practiceCode", typeof(long));


        var date_FromParameter = date_From.HasValue ?
            new ObjectParameter("Date_From", date_From) :
            new ObjectParameter("Date_From", typeof(System.DateTime));


        var date_ToParameter = date_To.HasValue ?
            new ObjectParameter("Date_To", date_To) :
            new ObjectParameter("Date_To", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetScrubberRejectionReports_Result>("sp_GetScrubberRejectionReports", practiceCodeParameter, date_FromParameter, date_ToParameter);
    }


    public virtual ObjectResult<sp_GetScrubberRejectionReportDetailes_Result> sp_GetScrubberRejectionReportDetailes(Nullable<long> practiceCode, Nullable<System.DateTime> date_From, Nullable<System.DateTime> date_To)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("practiceCode", practiceCode) :
            new ObjectParameter("practiceCode", typeof(long));


        var date_FromParameter = date_From.HasValue ?
            new ObjectParameter("Date_From", date_From) :
            new ObjectParameter("Date_From", typeof(System.DateTime));


        var date_ToParameter = date_To.HasValue ?
            new ObjectParameter("Date_To", date_To) :
            new ObjectParameter("Date_To", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetScrubberRejectionReportDetailes_Result>("sp_GetScrubberRejectionReportDetailes", practiceCodeParameter, date_FromParameter, date_ToParameter);
    }


    public virtual ObjectResult<USPGetAlertAgainst_PAT_Result> USPGetAlertAgainst_PAT(Nullable<long> patient_Account)
    {

        var patient_AccountParameter = patient_Account.HasValue ?
            new ObjectParameter("Patient_Account", patient_Account) :
            new ObjectParameter("Patient_Account", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USPGetAlertAgainst_PAT_Result>("USPGetAlertAgainst_PAT", patient_AccountParameter);
    }


    public virtual ObjectResult<string> GET_PA_BY_ACCOUNT(Nullable<long> aCCOUNT_NO)
    {

        var aCCOUNT_NOParameter = aCCOUNT_NO.HasValue ?
            new ObjectParameter("ACCOUNT_NO", aCCOUNT_NO) :
            new ObjectParameter("ACCOUNT_NO", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GET_PA_BY_ACCOUNT", aCCOUNT_NOParameter);
    }


    public virtual ObjectResult<SP_NDCSEARCH_Result> SP_NDCSEARCH(string hcpcs_code, string nDC2, string drug_Name, string practice_Code)
    {

        var hcpcs_codeParameter = hcpcs_code != null ?
            new ObjectParameter("hcpcs_code", hcpcs_code) :
            new ObjectParameter("hcpcs_code", typeof(string));


        var nDC2Parameter = nDC2 != null ?
            new ObjectParameter("NDC2", nDC2) :
            new ObjectParameter("NDC2", typeof(string));


        var drug_NameParameter = drug_Name != null ?
            new ObjectParameter("Drug_Name", drug_Name) :
            new ObjectParameter("Drug_Name", typeof(string));


        var practice_CodeParameter = practice_Code != null ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_NDCSEARCH_Result>("SP_NDCSEARCH", hcpcs_codeParameter, nDC2Parameter, drug_NameParameter, practice_CodeParameter);
    }


    public virtual ObjectResult<NDCSearchCriteria_Result> NDCSearchCriteria(string hcpcs_code, string nDC2, string drug_Name, string practice_Code)
    {

        var hcpcs_codeParameter = hcpcs_code != null ?
            new ObjectParameter("hcpcs_code", hcpcs_code) :
            new ObjectParameter("hcpcs_code", typeof(string));


        var nDC2Parameter = nDC2 != null ?
            new ObjectParameter("NDC2", nDC2) :
            new ObjectParameter("NDC2", typeof(string));


        var drug_NameParameter = drug_Name != null ?
            new ObjectParameter("Drug_Name", drug_Name) :
            new ObjectParameter("Drug_Name", typeof(string));


        var practice_CodeParameter = practice_Code != null ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NDCSearchCriteria_Result>("NDCSearchCriteria", hcpcs_codeParameter, nDC2Parameter, drug_NameParameter, practice_CodeParameter);
    }


    public virtual ObjectResult<GetPracticeFacilites_Result> GetPracticeFacilites(Nullable<long> practiceCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("practiceCode", practiceCode) :
            new ObjectParameter("practiceCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPracticeFacilites_Result>("GetPracticeFacilites", practiceCodeParameter);
    }


    public virtual ObjectResult<GetPracticeActiveUsers_Result> GetPracticeActiveUsers(Nullable<long> practice_Code)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPracticeActiveUsers_Result>("GetPracticeActiveUsers", practice_CodeParameter);
    }


    public virtual ObjectResult<SP_ERASEARCH_Result> SP_ERASEARCH(Nullable<long> eRAID, string cHECKNO, string cHKAMT, string dATEFROM, string dATETO, string pATACCT, string iCN, string pSTATUS, string dATETYPE, Nullable<long> pRAC)
    {

        var eRAIDParameter = eRAID.HasValue ?
            new ObjectParameter("ERAID", eRAID) :
            new ObjectParameter("ERAID", typeof(long));


        var cHECKNOParameter = cHECKNO != null ?
            new ObjectParameter("CHECKNO", cHECKNO) :
            new ObjectParameter("CHECKNO", typeof(string));


        var cHKAMTParameter = cHKAMT != null ?
            new ObjectParameter("CHKAMT", cHKAMT) :
            new ObjectParameter("CHKAMT", typeof(string));


        var dATEFROMParameter = dATEFROM != null ?
            new ObjectParameter("DATEFROM", dATEFROM) :
            new ObjectParameter("DATEFROM", typeof(string));


        var dATETOParameter = dATETO != null ?
            new ObjectParameter("DATETO", dATETO) :
            new ObjectParameter("DATETO", typeof(string));


        var pATACCTParameter = pATACCT != null ?
            new ObjectParameter("PATACCT", pATACCT) :
            new ObjectParameter("PATACCT", typeof(string));


        var iCNParameter = iCN != null ?
            new ObjectParameter("ICN", iCN) :
            new ObjectParameter("ICN", typeof(string));


        var pSTATUSParameter = pSTATUS != null ?
            new ObjectParameter("PSTATUS", pSTATUS) :
            new ObjectParameter("PSTATUS", typeof(string));


        var dATETYPEParameter = dATETYPE != null ?
            new ObjectParameter("DATETYPE", dATETYPE) :
            new ObjectParameter("DATETYPE", typeof(string));


        var pRACParameter = pRAC.HasValue ?
            new ObjectParameter("PRAC", pRAC) :
            new ObjectParameter("PRAC", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ERASEARCH_Result>("SP_ERASEARCH", eRAIDParameter, cHECKNOParameter, cHKAMTParameter, dATEFROMParameter, dATETOParameter, pATACCTParameter, iCNParameter, pSTATUSParameter, dATETYPEParameter, pRACParameter);
    }


    public virtual ObjectResult<SP_PATIENTSTATEMENTCOUNT_Result> SP_PATIENTSTATEMENTCOUNT(Nullable<long> pRACTICE_CODE)
    {

        var pRACTICE_CODEParameter = pRACTICE_CODE.HasValue ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PATIENTSTATEMENTCOUNT_Result>("SP_PATIENTSTATEMENTCOUNT", pRACTICE_CODEParameter);
    }


    public virtual ObjectResult<SP_ERACLAIMDETAIL_Result> SP_ERACLAIMDETAIL(Nullable<long> cLMNO, Nullable<long> eRAID, string pSTATUS, string pDATEF, string pDATET)
    {

        var cLMNOParameter = cLMNO.HasValue ?
            new ObjectParameter("CLMNO", cLMNO) :
            new ObjectParameter("CLMNO", typeof(long));


        var eRAIDParameter = eRAID.HasValue ?
            new ObjectParameter("ERAID", eRAID) :
            new ObjectParameter("ERAID", typeof(long));


        var pSTATUSParameter = pSTATUS != null ?
            new ObjectParameter("PSTATUS", pSTATUS) :
            new ObjectParameter("PSTATUS", typeof(string));


        var pDATEFParameter = pDATEF != null ?
            new ObjectParameter("PDATEF", pDATEF) :
            new ObjectParameter("PDATEF", typeof(string));


        var pDATETParameter = pDATET != null ?
            new ObjectParameter("PDATET", pDATET) :
            new ObjectParameter("PDATET", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ERACLAIMDETAIL_Result>("SP_ERACLAIMDETAIL", cLMNOParameter, eRAIDParameter, pSTATUSParameter, pDATEFParameter, pDATETParameter);
    }


    public virtual ObjectResult<spGetBatchClaimsInfo_Result> spGetBatchClaimsInfo(string practice_id, string id, string id_type)
    {

        var practice_idParameter = practice_id != null ?
            new ObjectParameter("practice_id", practice_id) :
            new ObjectParameter("practice_id", typeof(string));


        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var id_typeParameter = id_type != null ?
            new ObjectParameter("id_type", id_type) :
            new ObjectParameter("id_type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBatchClaimsInfo_Result>("spGetBatchClaimsInfo", practice_idParameter, idParameter, id_typeParameter);
    }


    public virtual ObjectResult<Payment_Detail_Result> Payment_Detail(Nullable<long> practiceCode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<long> patAcc)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var dateFromParameter = dateFrom.HasValue ?
            new ObjectParameter("DateFrom", dateFrom) :
            new ObjectParameter("DateFrom", typeof(System.DateTime));


        var dateToParameter = dateTo.HasValue ?
            new ObjectParameter("DateTo", dateTo) :
            new ObjectParameter("DateTo", typeof(System.DateTime));


        var patAccParameter = patAcc.HasValue ?
            new ObjectParameter("PatAcc", patAcc) :
            new ObjectParameter("PatAcc", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment_Detail_Result>("Payment_Detail", practiceCodeParameter, dateFromParameter, dateToParameter, patAccParameter);
    }


    public virtual ObjectResult<USP_PATIENT_AGING_REPORT_NPM_Result> USP_PATIENT_AGING_REPORT_NPM(Nullable<long> pRACTICE_CODE)
    {

        var pRACTICE_CODEParameter = pRACTICE_CODE.HasValue ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_PATIENT_AGING_REPORT_NPM_Result>("USP_PATIENT_AGING_REPORT_NPM", pRACTICE_CODEParameter);
    }


    public virtual ObjectResult<USP_COLLECTION_ANALYSIS_REPORT_NPM_Result> USP_COLLECTION_ANALYSIS_REPORT_NPM(Nullable<long> pRACTICE_CODE, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
    {

        var pRACTICE_CODEParameter = pRACTICE_CODE.HasValue ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(long));


        var dateFromParameter = dateFrom.HasValue ?
            new ObjectParameter("DateFrom", dateFrom) :
            new ObjectParameter("DateFrom", typeof(System.DateTime));


        var dateToParameter = dateTo.HasValue ?
            new ObjectParameter("DateTo", dateTo) :
            new ObjectParameter("DateTo", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_COLLECTION_ANALYSIS_REPORT_NPM_Result>("USP_COLLECTION_ANALYSIS_REPORT_NPM", pRACTICE_CODEParameter, dateFromParameter, dateToParameter);
    }


    public virtual ObjectResult<SP_GetProviderCPTPlan_Result> SP_GetProviderCPTPlan(string sTRPLAN)
    {

        var sTRPLANParameter = sTRPLAN != null ?
            new ObjectParameter("STRPLAN", sTRPLAN) :
            new ObjectParameter("STRPLAN", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetProviderCPTPlan_Result>("SP_GetProviderCPTPlan", sTRPLANParameter);
    }


    public virtual ObjectResult<SP_InsLocationPlan_Result> SP_InsLocationPlan(string pRACTICECODE, string pROVIDER, Nullable<bool> bSELFPAY, string iNS, string sTATE, string lOCATION, string fACILITY_CODE, string pROCEDURECODE, string mODIFIER, string aLTERNATE_CODE)
    {

        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var iNSParameter = iNS != null ?
            new ObjectParameter("INS", iNS) :
            new ObjectParameter("INS", typeof(string));


        var sTATEParameter = sTATE != null ?
            new ObjectParameter("STATE", sTATE) :
            new ObjectParameter("STATE", typeof(string));


        var lOCATIONParameter = lOCATION != null ?
            new ObjectParameter("LOCATION", lOCATION) :
            new ObjectParameter("LOCATION", typeof(string));


        var fACILITY_CODEParameter = fACILITY_CODE != null ?
            new ObjectParameter("FACILITY_CODE", fACILITY_CODE) :
            new ObjectParameter("FACILITY_CODE", typeof(string));


        var pROCEDURECODEParameter = pROCEDURECODE != null ?
            new ObjectParameter("PROCEDURECODE", pROCEDURECODE) :
            new ObjectParameter("PROCEDURECODE", typeof(string));


        var mODIFIERParameter = mODIFIER != null ?
            new ObjectParameter("MODIFIER", mODIFIER) :
            new ObjectParameter("MODIFIER", typeof(string));


        var aLTERNATE_CODEParameter = aLTERNATE_CODE != null ?
            new ObjectParameter("ALTERNATE_CODE", aLTERNATE_CODE) :
            new ObjectParameter("ALTERNATE_CODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsLocationPlan_Result>("SP_InsLocationPlan", pRACTICECODEParameter, pROVIDERParameter, bSELFPAYParameter, iNSParameter, sTATEParameter, lOCATIONParameter, fACILITY_CODEParameter, pROCEDURECODEParameter, mODIFIERParameter, aLTERNATE_CODEParameter);
    }


    public virtual ObjectResult<SP_InsPayer_Result> SP_InsPayer(string pROVIDERCODE, string iNSID, string sTATE, string lOCATIONCODE, string fACILITYCODE, string pROCCODE, string mODIFIER, string pRACTICECODE, string aLTERNATE_CODE)
    {

        var pROVIDERCODEParameter = pROVIDERCODE != null ?
            new ObjectParameter("PROVIDERCODE", pROVIDERCODE) :
            new ObjectParameter("PROVIDERCODE", typeof(string));


        var iNSIDParameter = iNSID != null ?
            new ObjectParameter("INSID", iNSID) :
            new ObjectParameter("INSID", typeof(string));


        var sTATEParameter = sTATE != null ?
            new ObjectParameter("STATE", sTATE) :
            new ObjectParameter("STATE", typeof(string));


        var lOCATIONCODEParameter = lOCATIONCODE != null ?
            new ObjectParameter("LOCATIONCODE", lOCATIONCODE) :
            new ObjectParameter("LOCATIONCODE", typeof(string));


        var fACILITYCODEParameter = fACILITYCODE != null ?
            new ObjectParameter("FACILITYCODE", fACILITYCODE) :
            new ObjectParameter("FACILITYCODE", typeof(string));


        var pROCCODEParameter = pROCCODE != null ?
            new ObjectParameter("PROCCODE", pROCCODE) :
            new ObjectParameter("PROCCODE", typeof(string));


        var mODIFIERParameter = mODIFIER != null ?
            new ObjectParameter("MODIFIER", mODIFIER) :
            new ObjectParameter("MODIFIER", typeof(string));


        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var aLTERNATE_CODEParameter = aLTERNATE_CODE != null ?
            new ObjectParameter("ALTERNATE_CODE", aLTERNATE_CODE) :
            new ObjectParameter("ALTERNATE_CODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsPayer_Result>("SP_InsPayer", pROVIDERCODEParameter, iNSIDParameter, sTATEParameter, lOCATIONCODEParameter, fACILITYCODEParameter, pROCCODEParameter, mODIFIERParameter, pRACTICECODEParameter, aLTERNATE_CODEParameter);
    }


    public virtual ObjectResult<SP_InsStatePlan_Result> SP_InsStatePlan(string pRACTICECODE, string pROVIDER, Nullable<bool> bSELFPAY, string iNS, string sTATE, string lOCATION, string fACILITY_CODE, string pROCEDURECODE, string mODIFIER, string aLTERNATE_CODE)
    {

        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var iNSParameter = iNS != null ?
            new ObjectParameter("INS", iNS) :
            new ObjectParameter("INS", typeof(string));


        var sTATEParameter = sTATE != null ?
            new ObjectParameter("STATE", sTATE) :
            new ObjectParameter("STATE", typeof(string));


        var lOCATIONParameter = lOCATION != null ?
            new ObjectParameter("LOCATION", lOCATION) :
            new ObjectParameter("LOCATION", typeof(string));


        var fACILITY_CODEParameter = fACILITY_CODE != null ?
            new ObjectParameter("FACILITY_CODE", fACILITY_CODE) :
            new ObjectParameter("FACILITY_CODE", typeof(string));


        var pROCEDURECODEParameter = pROCEDURECODE != null ?
            new ObjectParameter("PROCEDURECODE", pROCEDURECODE) :
            new ObjectParameter("PROCEDURECODE", typeof(string));


        var mODIFIERParameter = mODIFIER != null ?
            new ObjectParameter("MODIFIER", mODIFIER) :
            new ObjectParameter("MODIFIER", typeof(string));


        var aLTERNATE_CODEParameter = aLTERNATE_CODE != null ?
            new ObjectParameter("ALTERNATE_CODE", aLTERNATE_CODE) :
            new ObjectParameter("ALTERNATE_CODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsStatePlan_Result>("SP_InsStatePlan", pRACTICECODEParameter, pROVIDERParameter, bSELFPAYParameter, iNSParameter, sTATEParameter, lOCATIONParameter, fACILITY_CODEParameter, pROCEDURECODEParameter, mODIFIERParameter, aLTERNATE_CODEParameter);
    }


    public virtual ObjectResult<SP_InsFacilityPlan_Result> SP_InsFacilityPlan(string pRACTICECODE, string pROVIDER, Nullable<bool> bSELFPAY, string iNS, string sTATE, string lOCATION, string fACILITY_CODE, string pROCEDURECODE, string mODIFIER, string aLTERNATE_CODE)
    {

        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var iNSParameter = iNS != null ?
            new ObjectParameter("INS", iNS) :
            new ObjectParameter("INS", typeof(string));


        var sTATEParameter = sTATE != null ?
            new ObjectParameter("STATE", sTATE) :
            new ObjectParameter("STATE", typeof(string));


        var lOCATIONParameter = lOCATION != null ?
            new ObjectParameter("LOCATION", lOCATION) :
            new ObjectParameter("LOCATION", typeof(string));


        var fACILITY_CODEParameter = fACILITY_CODE != null ?
            new ObjectParameter("FACILITY_CODE", fACILITY_CODE) :
            new ObjectParameter("FACILITY_CODE", typeof(string));


        var pROCEDURECODEParameter = pROCEDURECODE != null ?
            new ObjectParameter("PROCEDURECODE", pROCEDURECODE) :
            new ObjectParameter("PROCEDURECODE", typeof(string));


        var mODIFIERParameter = mODIFIER != null ?
            new ObjectParameter("MODIFIER", mODIFIER) :
            new ObjectParameter("MODIFIER", typeof(string));


        var aLTERNATE_CODEParameter = aLTERNATE_CODE != null ?
            new ObjectParameter("ALTERNATE_CODE", aLTERNATE_CODE) :
            new ObjectParameter("ALTERNATE_CODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsFacilityPlan_Result>("SP_InsFacilityPlan", pRACTICECODEParameter, pROVIDERParameter, bSELFPAYParameter, iNSParameter, sTATEParameter, lOCATIONParameter, fACILITY_CODEParameter, pROCEDURECODEParameter, mODIFIERParameter, aLTERNATE_CODEParameter);
    }


    public virtual ObjectResult<SP_ProviderPlan_Result> SP_ProviderPlan(string pROVIDER, string pRACTICECODE, Nullable<bool> bSELFPAY, string iNSPAYERID, string sTATE, string lOCATION, string fACILITYCODE, string mODIFIER, string pROCEDURECODE, string aLTERNATE_CODE)
    {

        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var iNSPAYERIDParameter = iNSPAYERID != null ?
            new ObjectParameter("INSPAYERID", iNSPAYERID) :
            new ObjectParameter("INSPAYERID", typeof(string));


        var sTATEParameter = sTATE != null ?
            new ObjectParameter("STATE", sTATE) :
            new ObjectParameter("STATE", typeof(string));


        var lOCATIONParameter = lOCATION != null ?
            new ObjectParameter("LOCATION", lOCATION) :
            new ObjectParameter("LOCATION", typeof(string));


        var fACILITYCODEParameter = fACILITYCODE != null ?
            new ObjectParameter("FACILITYCODE", fACILITYCODE) :
            new ObjectParameter("FACILITYCODE", typeof(string));


        var mODIFIERParameter = mODIFIER != null ?
            new ObjectParameter("MODIFIER", mODIFIER) :
            new ObjectParameter("MODIFIER", typeof(string));


        var pROCEDURECODEParameter = pROCEDURECODE != null ?
            new ObjectParameter("PROCEDURECODE", pROCEDURECODE) :
            new ObjectParameter("PROCEDURECODE", typeof(string));


        var aLTERNATE_CODEParameter = aLTERNATE_CODE != null ?
            new ObjectParameter("ALTERNATE_CODE", aLTERNATE_CODE) :
            new ObjectParameter("ALTERNATE_CODE", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProviderPlan_Result>("SP_ProviderPlan", pROVIDERParameter, pRACTICECODEParameter, bSELFPAYParameter, iNSPAYERIDParameter, sTATEParameter, lOCATIONParameter, fACILITYCODEParameter, mODIFIERParameter, pROCEDURECODEParameter, aLTERNATE_CODEParameter);
    }


    public virtual ObjectResult<USP_Patient_Wise_Aging_Summary_Report_NPM_Result> USP_Patient_Wise_Aging_Summary_Report_NPM(Nullable<long> practice_code)
    {

        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("Practice_code", practice_code) :
            new ObjectParameter("Practice_code", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Patient_Wise_Aging_Summary_Report_NPM_Result>("USP_Patient_Wise_Aging_Summary_Report_NPM", practice_codeParameter);
    }


    public virtual ObjectResult<SP_Search_Claim_Batch_Error_EDI_Result> SP_Search_Claim_Batch_Error_EDI(Nullable<long> practice_Code, Nullable<long> provider_Code, Nullable<long> batch_Id, Nullable<System.DateTime> date_From, Nullable<System.DateTime> date_To, string batchtype)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        var provider_CodeParameter = provider_Code.HasValue ?
            new ObjectParameter("Provider_Code", provider_Code) :
            new ObjectParameter("Provider_Code", typeof(long));


        var batch_IdParameter = batch_Id.HasValue ?
            new ObjectParameter("Batch_Id", batch_Id) :
            new ObjectParameter("Batch_Id", typeof(long));


        var date_FromParameter = date_From.HasValue ?
            new ObjectParameter("Date_From", date_From) :
            new ObjectParameter("Date_From", typeof(System.DateTime));


        var date_ToParameter = date_To.HasValue ?
            new ObjectParameter("Date_To", date_To) :
            new ObjectParameter("Date_To", typeof(System.DateTime));


        var batchtypeParameter = batchtype != null ?
            new ObjectParameter("batchtype", batchtype) :
            new ObjectParameter("batchtype", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Search_Claim_Batch_Error_EDI_Result>("SP_Search_Claim_Batch_Error_EDI", practice_CodeParameter, provider_CodeParameter, batch_IdParameter, date_FromParameter, date_ToParameter, batchtypeParameter);
    }


    public virtual ObjectResult<GetCPTPlanByProviderPlanId_Umer_Result> GetCPTPlanByProviderPlanId_Umer(string providerCPTPlanID)
    {

        var providerCPTPlanIDParameter = providerCPTPlanID != null ?
            new ObjectParameter("ProviderCPTPlanID", providerCPTPlanID) :
            new ObjectParameter("ProviderCPTPlanID", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCPTPlanByProviderPlanId_Umer_Result>("GetCPTPlanByProviderPlanId_Umer", providerCPTPlanIDParameter);
    }


    public virtual ObjectResult<spGetFailedClaims_Result> spGetFailedClaims()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFailedClaims_Result>("spGetFailedClaims");
    }


    public virtual ObjectResult<spGetBatchClaimsProcedurestest_Result> spGetBatchClaimsProcedurestest(string practice_id, string id, string id_type)
    {

        var practice_idParameter = practice_id != null ?
            new ObjectParameter("practice_id", practice_id) :
            new ObjectParameter("practice_id", typeof(string));


        var idParameter = id != null ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(string));


        var id_typeParameter = id_type != null ?
            new ObjectParameter("id_type", id_type) :
            new ObjectParameter("id_type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetBatchClaimsProcedurestest_Result>("spGetBatchClaimsProcedurestest", practice_idParameter, idParameter, id_typeParameter);
    }


    public virtual ObjectResult<GetAppointmentEvents_Result> GetAppointmentEvents(Nullable<long> practice_Code, string provider_codes, Nullable<System.DateTime> sDate, Nullable<System.DateTime> eDate, string location_codes)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("practice_Code", practice_Code) :
            new ObjectParameter("practice_Code", typeof(long));


        var provider_codesParameter = provider_codes != null ?
            new ObjectParameter("provider_codes", provider_codes) :
            new ObjectParameter("provider_codes", typeof(string));


        var sDateParameter = sDate.HasValue ?
            new ObjectParameter("sDate", sDate) :
            new ObjectParameter("sDate", typeof(System.DateTime));


        var eDateParameter = eDate.HasValue ?
            new ObjectParameter("eDate", eDate) :
            new ObjectParameter("eDate", typeof(System.DateTime));


        var location_codesParameter = location_codes != null ?
            new ObjectParameter("location_codes", location_codes) :
            new ObjectParameter("location_codes", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAppointmentEvents_Result>("GetAppointmentEvents", practice_CodeParameter, provider_codesParameter, sDateParameter, eDateParameter, location_codesParameter);
    }


    public virtual ObjectResult<USP_Charge_Breakdown_Result> USP_Charge_Breakdown(Nullable<long> pRACTICE_CODE, string pROVIDER_CODE, Nullable<System.DateTime> fROM_DATE, Nullable<System.DateTime> tO_DATE)
    {

        var pRACTICE_CODEParameter = pRACTICE_CODE.HasValue ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(long));


        var pROVIDER_CODEParameter = pROVIDER_CODE != null ?
            new ObjectParameter("PROVIDER_CODE", pROVIDER_CODE) :
            new ObjectParameter("PROVIDER_CODE", typeof(string));


        var fROM_DATEParameter = fROM_DATE.HasValue ?
            new ObjectParameter("FROM_DATE", fROM_DATE) :
            new ObjectParameter("FROM_DATE", typeof(System.DateTime));


        var tO_DATEParameter = tO_DATE.HasValue ?
            new ObjectParameter("TO_DATE", tO_DATE) :
            new ObjectParameter("TO_DATE", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Charge_Breakdown_Result>("USP_Charge_Breakdown", pRACTICE_CODEParameter, pROVIDER_CODEParameter, fROM_DATEParameter, tO_DATEParameter);
    }


    public virtual ObjectResult<USP_Visit_Claim_Activity_Report_Result> USP_Visit_Claim_Activity_Report(Nullable<long> pRACTICE_CODE, string pROVIDER_CODE, Nullable<System.DateTime> fROM_DATE, Nullable<System.DateTime> tO_DATE)
    {

        var pRACTICE_CODEParameter = pRACTICE_CODE.HasValue ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(long));


        var pROVIDER_CODEParameter = pROVIDER_CODE != null ?
            new ObjectParameter("PROVIDER_CODE", pROVIDER_CODE) :
            new ObjectParameter("PROVIDER_CODE", typeof(string));


        var fROM_DATEParameter = fROM_DATE.HasValue ?
            new ObjectParameter("FROM_DATE", fROM_DATE) :
            new ObjectParameter("FROM_DATE", typeof(System.DateTime));


        var tO_DATEParameter = tO_DATE.HasValue ?
            new ObjectParameter("TO_DATE", tO_DATE) :
            new ObjectParameter("TO_DATE", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Visit_Claim_Activity_Report_Result>("USP_Visit_Claim_Activity_Report", pRACTICE_CODEParameter, pROVIDER_CODEParameter, fROM_DATEParameter, tO_DATEParameter);
    }


    public virtual ObjectResult<SP_GetProviderCPTPlanID_Result> SP_GetProviderCPTPlanID(string pRACTICECODE, string pROVIDER, string insPyer_ID, string location, string facilityCode, Nullable<bool> bSELFPAY, string pROCEDURECODE, string mODIFIER, string aLTERNATE_CODE, Nullable<System.DateTime> dOS)
    {

        var pRACTICECODEParameter = pRACTICECODE != null ?
            new ObjectParameter("PRACTICECODE", pRACTICECODE) :
            new ObjectParameter("PRACTICECODE", typeof(string));


        var pROVIDERParameter = pROVIDER != null ?
            new ObjectParameter("PROVIDER", pROVIDER) :
            new ObjectParameter("PROVIDER", typeof(string));


        var insPyer_IDParameter = insPyer_ID != null ?
            new ObjectParameter("InsPyer_ID", insPyer_ID) :
            new ObjectParameter("InsPyer_ID", typeof(string));


        var locationParameter = location != null ?
            new ObjectParameter("Location", location) :
            new ObjectParameter("Location", typeof(string));


        var facilityCodeParameter = facilityCode != null ?
            new ObjectParameter("FacilityCode", facilityCode) :
            new ObjectParameter("FacilityCode", typeof(string));


        var bSELFPAYParameter = bSELFPAY.HasValue ?
            new ObjectParameter("BSELFPAY", bSELFPAY) :
            new ObjectParameter("BSELFPAY", typeof(bool));


        var pROCEDURECODEParameter = pROCEDURECODE != null ?
            new ObjectParameter("PROCEDURECODE", pROCEDURECODE) :
            new ObjectParameter("PROCEDURECODE", typeof(string));


        var mODIFIERParameter = mODIFIER != null ?
            new ObjectParameter("MODIFIER", mODIFIER) :
            new ObjectParameter("MODIFIER", typeof(string));


        var aLTERNATE_CODEParameter = aLTERNATE_CODE != null ?
            new ObjectParameter("ALTERNATE_CODE", aLTERNATE_CODE) :
            new ObjectParameter("ALTERNATE_CODE", typeof(string));


        var dOSParameter = dOS.HasValue ?
            new ObjectParameter("DOS", dOS) :
            new ObjectParameter("DOS", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetProviderCPTPlanID_Result>("SP_GetProviderCPTPlanID", pRACTICECODEParameter, pROVIDERParameter, insPyer_IDParameter, locationParameter, facilityCodeParameter, bSELFPAYParameter, pROCEDURECODEParameter, mODIFIERParameter, aLTERNATE_CODEParameter, dOSParameter);
    }


    public virtual ObjectResult<SP_CLAIMSUMMARYAMOUNTS_Result> SP_CLAIMSUMMARYAMOUNTS(Nullable<long> pATACCT)
    {

        var pATACCTParameter = pATACCT.HasValue ?
            new ObjectParameter("PATACCT", pATACCT) :
            new ObjectParameter("PATACCT", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CLAIMSUMMARYAMOUNTS_Result>("SP_CLAIMSUMMARYAMOUNTS", pATACCTParameter);
    }


    public virtual ObjectResult<USP_ERAClaimOverPayment_Result> USP_ERAClaimOverPayment(Nullable<long> eRAID)
    {

        var eRAIDParameter = eRAID.HasValue ?
            new ObjectParameter("ERAID", eRAID) :
            new ObjectParameter("ERAID", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_ERAClaimOverPayment_Result>("USP_ERAClaimOverPayment", eRAIDParameter);
    }


    public virtual ObjectResult<GetExistingAppointmentData_Result> GetExistingAppointmentData(Nullable<long> practice_Code, Nullable<long> patient_Acc, Nullable<System.DateTime> appt_Date)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("practice_Code", practice_Code) :
            new ObjectParameter("practice_Code", typeof(long));


        var patient_AccParameter = patient_Acc.HasValue ?
            new ObjectParameter("patient_Acc", patient_Acc) :
            new ObjectParameter("patient_Acc", typeof(long));


        var appt_DateParameter = appt_Date.HasValue ?
            new ObjectParameter("Appt_Date", appt_Date) :
            new ObjectParameter("Appt_Date", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExistingAppointmentData_Result>("GetExistingAppointmentData", practice_CodeParameter, patient_AccParameter, appt_DateParameter);
    }


    public virtual ObjectResult<SP_getuserDailyReport_Result> SP_getuserDailyReport(string practice_code, string userid, string dateFrom, string dateTo)
    {

        var practice_codeParameter = practice_code != null ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(string));


        var useridParameter = userid != null ?
            new ObjectParameter("userid", userid) :
            new ObjectParameter("userid", typeof(string));


        var dateFromParameter = dateFrom != null ?
            new ObjectParameter("dateFrom", dateFrom) :
            new ObjectParameter("dateFrom", typeof(string));


        var dateToParameter = dateTo != null ?
            new ObjectParameter("dateTo", dateTo) :
            new ObjectParameter("dateTo", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getuserDailyReport_Result>("SP_getuserDailyReport", practice_codeParameter, useridParameter, dateFromParameter, dateToParameter);
    }


    public virtual ObjectResult<SP_FacilitiesSearch_Result> SP_FacilitiesSearch(Nullable<long> code, string name, string type, string nPI, string zip, string city, string state, Nullable<long> practice_code)
    {

        var codeParameter = code.HasValue ?
            new ObjectParameter("Code", code) :
            new ObjectParameter("Code", typeof(long));


        var nameParameter = name != null ?
            new ObjectParameter("Name", name) :
            new ObjectParameter("Name", typeof(string));


        var typeParameter = type != null ?
            new ObjectParameter("Type", type) :
            new ObjectParameter("Type", typeof(string));


        var nPIParameter = nPI != null ?
            new ObjectParameter("NPI", nPI) :
            new ObjectParameter("NPI", typeof(string));


        var zipParameter = zip != null ?
            new ObjectParameter("Zip", zip) :
            new ObjectParameter("Zip", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("State", state) :
            new ObjectParameter("State", typeof(string));


        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("Practice_code", practice_code) :
            new ObjectParameter("Practice_code", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FacilitiesSearch_Result>("SP_FacilitiesSearch", codeParameter, nameParameter, typeParameter, nPIParameter, zipParameter, cityParameter, stateParameter, practice_codeParameter);
    }


    public virtual ObjectResult<Payment_detail_Proc_Result> Payment_detail_Proc(Nullable<long> practiceCode, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var dateFromParameter = dateFrom.HasValue ?
            new ObjectParameter("DateFrom", dateFrom) :
            new ObjectParameter("DateFrom", typeof(System.DateTime));


        var dateToParameter = dateTo.HasValue ?
            new ObjectParameter("DateTo", dateTo) :
            new ObjectParameter("DateTo", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Payment_detail_Proc_Result>("Payment_detail_Proc", practiceCodeParameter, dateFromParameter, dateToParameter);
    }


    public virtual ObjectResult<Nullable<long>> USP_UpdateSyncedClaim_ERA(Nullable<long> eRAID)
    {

        var eRAIDParameter = eRAID.HasValue ?
            new ObjectParameter("ERAID", eRAID) :
            new ObjectParameter("ERAID", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("USP_UpdateSyncedClaim_ERA", eRAIDParameter);
    }


    public virtual ObjectResult<SP_GetUserAuthorization_Result> SP_GetUserAuthorization(Nullable<long> userId)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserAuthorization_Result>("SP_GetUserAuthorization", userIdParameter);
    }


    public virtual ObjectResult<USP_Denial_Report_Result> USP_Denial_Report(Nullable<long> pRACTICE_CODE, string rEPORT_CRITERIA, Nullable<System.DateTime> fROM_DATE, Nullable<System.DateTime> tO_DATE)
    {

        var pRACTICE_CODEParameter = pRACTICE_CODE.HasValue ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(long));


        var rEPORT_CRITERIAParameter = rEPORT_CRITERIA != null ?
            new ObjectParameter("REPORT_CRITERIA", rEPORT_CRITERIA) :
            new ObjectParameter("REPORT_CRITERIA", typeof(string));


        var fROM_DATEParameter = fROM_DATE.HasValue ?
            new ObjectParameter("FROM_DATE", fROM_DATE) :
            new ObjectParameter("FROM_DATE", typeof(System.DateTime));


        var tO_DATEParameter = tO_DATE.HasValue ?
            new ObjectParameter("TO_DATE", tO_DATE) :
            new ObjectParameter("TO_DATE", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Denial_Report_Result>("USP_Denial_Report", pRACTICE_CODEParameter, rEPORT_CRITERIAParameter, fROM_DATEParameter, tO_DATEParameter);
    }


    public virtual ObjectResult<GetClaimChargesByClaimNo_Result> GetClaimChargesByClaimNo(Nullable<long> claim_No)
    {

        var claim_NoParameter = claim_No.HasValue ?
            new ObjectParameter("Claim_No", claim_No) :
            new ObjectParameter("Claim_No", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetClaimChargesByClaimNo_Result>("GetClaimChargesByClaimNo", claim_NoParameter);
    }


    public virtual ObjectResult<GetPanelCodeCPTDetailsClaim_Result> GetPanelCodeCPTDetailsClaim(Nullable<long> practiceCode, Nullable<long> providerCode, Nullable<long> locationCode, string panelCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        var locationCodeParameter = locationCode.HasValue ?
            new ObjectParameter("LocationCode", locationCode) :
            new ObjectParameter("LocationCode", typeof(long));


        var panelCodeParameter = panelCode != null ?
            new ObjectParameter("PanelCode", panelCode) :
            new ObjectParameter("PanelCode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPanelCodeCPTDetailsClaim_Result>("GetPanelCodeCPTDetailsClaim", practiceCodeParameter, providerCodeParameter, locationCodeParameter, panelCodeParameter);
    }


    public virtual ObjectResult<GetPanelBillingSummaryByPractice_Result> GetPanelBillingSummaryByPractice(Nullable<long> practice_Code)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPanelBillingSummaryByPractice_Result>("GetPanelBillingSummaryByPractice", practice_CodeParameter);
    }


    public virtual ObjectResult<SP_getcptplanlist_Result> SP_getcptplanlist(Nullable<long> practice_Code)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_getcptplanlist_Result>("SP_getcptplanlist", practice_CodeParameter);
    }


    public virtual int GetPanelCptDetails(Nullable<long> practiceCode, Nullable<long> providerCode, Nullable<long> locationCode, string cptCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        var locationCodeParameter = locationCode.HasValue ?
            new ObjectParameter("LocationCode", locationCode) :
            new ObjectParameter("LocationCode", typeof(long));


        var cptCodeParameter = cptCode != null ?
            new ObjectParameter("CptCode", cptCode) :
            new ObjectParameter("CptCode", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPanelCptDetails", practiceCodeParameter, providerCodeParameter, locationCodeParameter, cptCodeParameter);
    }


    public virtual ObjectResult<sp_get999Report_EDI_Result> sp_get999Report_EDI(Nullable<long> practice_Code)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get999Report_EDI_Result>("sp_get999Report_EDI", practice_CodeParameter);
    }


    public virtual ObjectResult<GetCPTPlanByProviderPlanId_Result> GetCPTPlanByProviderPlanId(string providerCPTPlanID, Nullable<int> page, Nullable<int> pageSize, string searchString, string sortBy, string sortOrder)
    {

        var providerCPTPlanIDParameter = providerCPTPlanID != null ?
            new ObjectParameter("ProviderCPTPlanID", providerCPTPlanID) :
            new ObjectParameter("ProviderCPTPlanID", typeof(string));


        var pageParameter = page.HasValue ?
            new ObjectParameter("Page", page) :
            new ObjectParameter("Page", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var searchStringParameter = searchString != null ?
            new ObjectParameter("SearchString", searchString) :
            new ObjectParameter("SearchString", typeof(string));


        var sortByParameter = sortBy != null ?
            new ObjectParameter("SortBy", sortBy) :
            new ObjectParameter("SortBy", typeof(string));


        var sortOrderParameter = sortOrder != null ?
            new ObjectParameter("SortOrder", sortOrder) :
            new ObjectParameter("SortOrder", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCPTPlanByProviderPlanId_Result>("GetCPTPlanByProviderPlanId", providerCPTPlanIDParameter, pageParameter, pageSizeParameter, searchStringParameter, sortByParameter, sortOrderParameter);
    }


    public virtual ObjectResult<GetCPTPlanByProviderPlanId_Temp_Result> GetCPTPlanByProviderPlanId_Temp(string providerCPTPlanID)
    {

        var providerCPTPlanIDParameter = providerCPTPlanID != null ?
            new ObjectParameter("ProviderCPTPlanID", providerCPTPlanID) :
            new ObjectParameter("ProviderCPTPlanID", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCPTPlanByProviderPlanId_Temp_Result>("GetCPTPlanByProviderPlanId_Temp", providerCPTPlanIDParameter);
    }


    public virtual ObjectResult<USP_Search_Insurances_Result> USP_Search_Insurances(Nullable<long> groupID, string insuranceName, string insurancePayerName)
    {

        var groupIDParameter = groupID.HasValue ?
            new ObjectParameter("GroupID", groupID) :
            new ObjectParameter("GroupID", typeof(long));


        var insuranceNameParameter = insuranceName != null ?
            new ObjectParameter("InsuranceName", insuranceName) :
            new ObjectParameter("InsuranceName", typeof(string));


        var insurancePayerNameParameter = insurancePayerName != null ?
            new ObjectParameter("InsurancePayerName", insurancePayerName) :
            new ObjectParameter("InsurancePayerName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_Search_Insurances_Result>("USP_Search_Insurances", groupIDParameter, insuranceNameParameter, insurancePayerNameParameter);
    }


    public virtual ObjectResult<GetInsurancesByPayers_Result> GetInsurancesByPayers(Nullable<long> insurancePayerID)
    {

        var insurancePayerIDParameter = insurancePayerID.HasValue ?
            new ObjectParameter("InsurancePayerID", insurancePayerID) :
            new ObjectParameter("InsurancePayerID", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInsurancesByPayers_Result>("GetInsurancesByPayers", insurancePayerIDParameter);
    }


    public virtual ObjectResult<SP_PATIENTINSSERACH_Result> SP_PATIENTINSSERACH(Nullable<long> pATACCT)
    {

        var pATACCTParameter = pATACCT.HasValue ?
            new ObjectParameter("PATACCT", pATACCT) :
            new ObjectParameter("PATACCT", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PATIENTINSSERACH_Result>("SP_PATIENTINSSERACH", pATACCTParameter);
    }


    public virtual ObjectResult<USP_GetOfficeTimeForProvidersAndLocations_Result> USP_GetOfficeTimeForProvidersAndLocations(Nullable<long> practice_code, string provider_codes, string location_codes, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
    {

        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(long));


        var provider_codesParameter = provider_codes != null ?
            new ObjectParameter("Provider_codes", provider_codes) :
            new ObjectParameter("Provider_codes", typeof(string));


        var location_codesParameter = location_codes != null ?
            new ObjectParameter("Location_codes", location_codes) :
            new ObjectParameter("Location_codes", typeof(string));


        var dateFromParameter = dateFrom.HasValue ?
            new ObjectParameter("DateFrom", dateFrom) :
            new ObjectParameter("DateFrom", typeof(System.DateTime));


        var dateToParameter = dateTo.HasValue ?
            new ObjectParameter("DateTo", dateTo) :
            new ObjectParameter("DateTo", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_GetOfficeTimeForProvidersAndLocations_Result>("USP_GetOfficeTimeForProvidersAndLocations", practice_codeParameter, provider_codesParameter, location_codesParameter, dateFromParameter, dateToParameter);
    }


    public virtual ObjectResult<Claim_Provider_Diagnosis_Proc_Result> Claim_Provider_Diagnosis_Proc(Nullable<long> practice_Code, string diag_code, string diag_Desc)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        var diag_codeParameter = diag_code != null ?
            new ObjectParameter("Diag_code", diag_code) :
            new ObjectParameter("Diag_code", typeof(string));


        var diag_DescParameter = diag_Desc != null ?
            new ObjectParameter("Diag_Desc", diag_Desc) :
            new ObjectParameter("Diag_Desc", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Claim_Provider_Diagnosis_Proc_Result>("Claim_Provider_Diagnosis_Proc", practice_CodeParameter, diag_codeParameter, diag_DescParameter);
    }


    public virtual ObjectResult<GetRecentClaimDetailsWithDiagnosis_Result> GetRecentClaimDetailsWithDiagnosis(string patient_Account, string practice_Code, string claim_Type)
    {

        var patient_AccountParameter = patient_Account != null ?
            new ObjectParameter("Patient_Account", patient_Account) :
            new ObjectParameter("Patient_Account", typeof(string));


        var practice_CodeParameter = practice_Code != null ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(string));


        var claim_TypeParameter = claim_Type != null ?
            new ObjectParameter("Claim_Type", claim_Type) :
            new ObjectParameter("Claim_Type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecentClaimDetailsWithDiagnosis_Result>("GetRecentClaimDetailsWithDiagnosis", patient_AccountParameter, practice_CodeParameter, claim_TypeParameter);
    }


    public virtual ObjectResult<SP_ERACLAIMDETAIL_VIEW_EDI_Result> SP_ERACLAIMDETAIL_VIEW_EDI(Nullable<long> cLMNO, Nullable<long> eRAID, string pSTATUS, string pDATEF, string pDATET, string cHECKNO)
    {

        var cLMNOParameter = cLMNO.HasValue ?
            new ObjectParameter("CLMNO", cLMNO) :
            new ObjectParameter("CLMNO", typeof(long));


        var eRAIDParameter = eRAID.HasValue ?
            new ObjectParameter("ERAID", eRAID) :
            new ObjectParameter("ERAID", typeof(long));


        var pSTATUSParameter = pSTATUS != null ?
            new ObjectParameter("PSTATUS", pSTATUS) :
            new ObjectParameter("PSTATUS", typeof(string));


        var pDATEFParameter = pDATEF != null ?
            new ObjectParameter("PDATEF", pDATEF) :
            new ObjectParameter("PDATEF", typeof(string));


        var pDATETParameter = pDATET != null ?
            new ObjectParameter("PDATET", pDATET) :
            new ObjectParameter("PDATET", typeof(string));


        var cHECKNOParameter = cHECKNO != null ?
            new ObjectParameter("CHECKNO", cHECKNO) :
            new ObjectParameter("CHECKNO", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ERACLAIMDETAIL_VIEW_EDI_Result>("SP_ERACLAIMDETAIL_VIEW_EDI", cLMNOParameter, eRAIDParameter, pSTATUSParameter, pDATEFParameter, pDATETParameter, cHECKNOParameter);
    }


    public virtual ObjectResult<SP_ERAADJCODEGLOSSARY_VIEW_EDI_Result> SP_ERAADJCODEGLOSSARY_VIEW_EDI(Nullable<long> eRAID, Nullable<long> cLAIMNO)
    {

        var eRAIDParameter = eRAID.HasValue ?
            new ObjectParameter("ERAID", eRAID) :
            new ObjectParameter("ERAID", typeof(long));


        var cLAIMNOParameter = cLAIMNO.HasValue ?
            new ObjectParameter("CLAIMNO", cLAIMNO) :
            new ObjectParameter("CLAIMNO", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ERAADJCODEGLOSSARY_VIEW_EDI_Result>("SP_ERAADJCODEGLOSSARY_VIEW_EDI", eRAIDParameter, cLAIMNOParameter);
    }


    public virtual ObjectResult<Nullable<bool>> Sp_GetCSIBatchStatusMedicare(Nullable<long> batch_Id, Nullable<long> claimNo)
    {

        var batch_IdParameter = batch_Id.HasValue ?
            new ObjectParameter("batch_Id", batch_Id) :
            new ObjectParameter("batch_Id", typeof(long));


        var claimNoParameter = claimNo.HasValue ?
            new ObjectParameter("ClaimNo", claimNo) :
            new ObjectParameter("ClaimNo", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("Sp_GetCSIBatchStatusMedicare", batch_IdParameter, claimNoParameter);
    }


    public virtual ObjectResult<GetCSI_BatchDetails_Result> GetCSI_BatchDetails(Nullable<int> batchId, string claimId)
    {

        var batchIdParameter = batchId.HasValue ?
            new ObjectParameter("batchId", batchId) :
            new ObjectParameter("batchId", typeof(int));


        var claimIdParameter = claimId != null ?
            new ObjectParameter("claimId", claimId) :
            new ObjectParameter("claimId", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCSI_BatchDetails_Result>("GetCSI_BatchDetails", batchIdParameter, claimIdParameter);
    }


    public virtual ObjectResult<SP_PRACTICEPROVIDERPAYERSEARCH_Result> SP_PRACTICEPROVIDERPAYERSEARCH(Nullable<long> pRACTICE_CODE)
    {

        var pRACTICE_CODEParameter = pRACTICE_CODE.HasValue ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PRACTICEPROVIDERPAYERSEARCH_Result>("SP_PRACTICEPROVIDERPAYERSEARCH", pRACTICE_CODEParameter);
    }


    public virtual ObjectResult<SP_InsuranceSearch_Result> SP_InsuranceSearch(Nullable<long> practiceCode, string payerId, string payerDescription, Nullable<long> nameId, string insuranceName, Nullable<long> insuranceId, string groupName, string zIP, string insuranceAddress, string state, string city, Nullable<int> searchFrom)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var payerIdParameter = payerId != null ?
            new ObjectParameter("PayerId", payerId) :
            new ObjectParameter("PayerId", typeof(string));


        var payerDescriptionParameter = payerDescription != null ?
            new ObjectParameter("PayerDescription", payerDescription) :
            new ObjectParameter("PayerDescription", typeof(string));


        var nameIdParameter = nameId.HasValue ?
            new ObjectParameter("NameId", nameId) :
            new ObjectParameter("NameId", typeof(long));


        var insuranceNameParameter = insuranceName != null ?
            new ObjectParameter("InsuranceName", insuranceName) :
            new ObjectParameter("InsuranceName", typeof(string));


        var insuranceIdParameter = insuranceId.HasValue ?
            new ObjectParameter("InsuranceId", insuranceId) :
            new ObjectParameter("InsuranceId", typeof(long));


        var groupNameParameter = groupName != null ?
            new ObjectParameter("GroupName", groupName) :
            new ObjectParameter("GroupName", typeof(string));


        var zIPParameter = zIP != null ?
            new ObjectParameter("ZIP", zIP) :
            new ObjectParameter("ZIP", typeof(string));


        var insuranceAddressParameter = insuranceAddress != null ?
            new ObjectParameter("InsuranceAddress", insuranceAddress) :
            new ObjectParameter("InsuranceAddress", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("State", state) :
            new ObjectParameter("State", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var searchFromParameter = searchFrom.HasValue ?
            new ObjectParameter("SearchFrom", searchFrom) :
            new ObjectParameter("SearchFrom", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsuranceSearch_Result>("SP_InsuranceSearch", practiceCodeParameter, payerIdParameter, payerDescriptionParameter, nameIdParameter, insuranceNameParameter, insuranceIdParameter, groupNameParameter, zIPParameter, insuranceAddressParameter, stateParameter, cityParameter, searchFromParameter);
    }


    public virtual ObjectResult<GetPanelALternateCodeDetails_Result> GetPanelALternateCodeDetails(Nullable<long> practiceCode, Nullable<long> providerCode, Nullable<long> locationCode, string alternate_Code)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        var locationCodeParameter = locationCode.HasValue ?
            new ObjectParameter("LocationCode", locationCode) :
            new ObjectParameter("LocationCode", typeof(long));


        var alternate_CodeParameter = alternate_Code != null ?
            new ObjectParameter("Alternate_Code", alternate_Code) :
            new ObjectParameter("Alternate_Code", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPanelALternateCodeDetails_Result>("GetPanelALternateCodeDetails", practiceCodeParameter, providerCodeParameter, locationCodeParameter, alternate_CodeParameter);
    }


    public virtual ObjectResult<GETPRACTICES_WITHDETAILS_Result> GETPRACTICES_WITHDETAILS(Nullable<long> uSER_ID)
    {

        var uSER_IDParameter = uSER_ID.HasValue ?
            new ObjectParameter("USER_ID", uSER_ID) :
            new ObjectParameter("USER_ID", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETPRACTICES_WITHDETAILS_Result>("GETPRACTICES_WITHDETAILS", uSER_IDParameter);
    }


    public virtual ObjectResult<USP_NPM_CREDIT_BALANCE_Result> USP_NPM_CREDIT_BALANCE(Nullable<long> pRACTICE_CODE)
    {

        var pRACTICE_CODEParameter = pRACTICE_CODE.HasValue ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_NPM_CREDIT_BALANCE_Result>("USP_NPM_CREDIT_BALANCE", pRACTICE_CODEParameter);
    }


    public virtual ObjectResult<USP_NPM_PATIENT_AGING_Result> USP_NPM_PATIENT_AGING(Nullable<long> pRACTICE_CODE)
    {

        var pRACTICE_CODEParameter = pRACTICE_CODE.HasValue ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_NPM_PATIENT_AGING_Result>("USP_NPM_PATIENT_AGING", pRACTICE_CODEParameter);
    }


    public virtual ObjectResult<USP_NPM_PLAN_AGING_Result> USP_NPM_PLAN_AGING(Nullable<long> pRACTICE_CODE)
    {

        var pRACTICE_CODEParameter = pRACTICE_CODE.HasValue ?
            new ObjectParameter("PRACTICE_CODE", pRACTICE_CODE) :
            new ObjectParameter("PRACTICE_CODE", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_NPM_PLAN_AGING_Result>("USP_NPM_PLAN_AGING", pRACTICE_CODEParameter);
    }


    public virtual ObjectResult<SP_ProcedureSearch_Result> SP_ProcedureSearch(string procedureCode, string procedureDescription)
    {

        var procedureCodeParameter = procedureCode != null ?
            new ObjectParameter("ProcedureCode", procedureCode) :
            new ObjectParameter("ProcedureCode", typeof(string));


        var procedureDescriptionParameter = procedureDescription != null ?
            new ObjectParameter("ProcedureDescription", procedureDescription) :
            new ObjectParameter("ProcedureDescription", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProcedureSearch_Result>("SP_ProcedureSearch", procedureCodeParameter, procedureDescriptionParameter);
    }


    public virtual ObjectResult<PayerMappedInsuranceSearch_Result> PayerMappedInsuranceSearch(Nullable<long> practiceCode, string payerId, string payerDescription, Nullable<long> nameId, string insuranceName, Nullable<long> insuranceId, string groupName, string zIP, string insuranceAddress, string state, string city, Nullable<int> searchFrom)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var payerIdParameter = payerId != null ?
            new ObjectParameter("PayerId", payerId) :
            new ObjectParameter("PayerId", typeof(string));


        var payerDescriptionParameter = payerDescription != null ?
            new ObjectParameter("PayerDescription", payerDescription) :
            new ObjectParameter("PayerDescription", typeof(string));


        var nameIdParameter = nameId.HasValue ?
            new ObjectParameter("NameId", nameId) :
            new ObjectParameter("NameId", typeof(long));


        var insuranceNameParameter = insuranceName != null ?
            new ObjectParameter("InsuranceName", insuranceName) :
            new ObjectParameter("InsuranceName", typeof(string));


        var insuranceIdParameter = insuranceId.HasValue ?
            new ObjectParameter("InsuranceId", insuranceId) :
            new ObjectParameter("InsuranceId", typeof(long));


        var groupNameParameter = groupName != null ?
            new ObjectParameter("GroupName", groupName) :
            new ObjectParameter("GroupName", typeof(string));


        var zIPParameter = zIP != null ?
            new ObjectParameter("ZIP", zIP) :
            new ObjectParameter("ZIP", typeof(string));


        var insuranceAddressParameter = insuranceAddress != null ?
            new ObjectParameter("InsuranceAddress", insuranceAddress) :
            new ObjectParameter("InsuranceAddress", typeof(string));


        var stateParameter = state != null ?
            new ObjectParameter("State", state) :
            new ObjectParameter("State", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("City", city) :
            new ObjectParameter("City", typeof(string));


        var searchFromParameter = searchFrom.HasValue ?
            new ObjectParameter("SearchFrom", searchFrom) :
            new ObjectParameter("SearchFrom", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayerMappedInsuranceSearch_Result>("PayerMappedInsuranceSearch", practiceCodeParameter, payerIdParameter, payerDescriptionParameter, nameIdParameter, insuranceNameParameter, insuranceIdParameter, groupNameParameter, zIPParameter, insuranceAddressParameter, stateParameter, cityParameter, searchFromParameter);
    }


    public virtual ObjectResult<ERA_UNPOSTED_PAYMENTS_EDI_Result> ERA_UNPOSTED_PAYMENTS_EDI(Nullable<long> practice_code, Nullable<System.DateTime> dtfrom, Nullable<System.DateTime> dtto)
    {

        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(long));


        var dtfromParameter = dtfrom.HasValue ?
            new ObjectParameter("dtfrom", dtfrom) :
            new ObjectParameter("dtfrom", typeof(System.DateTime));


        var dttoParameter = dtto.HasValue ?
            new ObjectParameter("dtto", dtto) :
            new ObjectParameter("dtto", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ERA_UNPOSTED_PAYMENTS_EDI_Result>("ERA_UNPOSTED_PAYMENTS_EDI", practice_codeParameter, dtfromParameter, dttoParameter);
    }


    public virtual ObjectResult<SP_ClaimsSearch_EDI_bkp_04112025_Result> SP_ClaimsSearch_EDI_bkp_04112025(Nullable<System.DateTime> dos_from, Nullable<System.DateTime> dos_to, string patient_account, string billing_physician, string location_code, Nullable<bool> icd9_claim, string type, string status, string insurance_id, Nullable<long> practice_code)
    {

        var dos_fromParameter = dos_from.HasValue ?
            new ObjectParameter("dos_from", dos_from) :
            new ObjectParameter("dos_from", typeof(System.DateTime));


        var dos_toParameter = dos_to.HasValue ?
            new ObjectParameter("dos_to", dos_to) :
            new ObjectParameter("dos_to", typeof(System.DateTime));


        var patient_accountParameter = patient_account != null ?
            new ObjectParameter("patient_account", patient_account) :
            new ObjectParameter("patient_account", typeof(string));


        var billing_physicianParameter = billing_physician != null ?
            new ObjectParameter("billing_physician", billing_physician) :
            new ObjectParameter("billing_physician", typeof(string));


        var location_codeParameter = location_code != null ?
            new ObjectParameter("location_code", location_code) :
            new ObjectParameter("location_code", typeof(string));


        var icd9_claimParameter = icd9_claim.HasValue ?
            new ObjectParameter("icd9_claim", icd9_claim) :
            new ObjectParameter("icd9_claim", typeof(bool));


        var typeParameter = type != null ?
            new ObjectParameter("type", type) :
            new ObjectParameter("type", typeof(string));


        var statusParameter = status != null ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(string));


        var insurance_idParameter = insurance_id != null ?
            new ObjectParameter("insurance_id", insurance_id) :
            new ObjectParameter("insurance_id", typeof(string));


        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ClaimsSearch_EDI_bkp_04112025_Result>("SP_ClaimsSearch_EDI_bkp_04112025", dos_fromParameter, dos_toParameter, patient_accountParameter, billing_physicianParameter, location_codeParameter, icd9_claimParameter, typeParameter, statusParameter, insurance_idParameter, practice_codeParameter);
    }


    public virtual ObjectResult<sp_getBatchHistory_EDI_Result> sp_getBatchHistory_EDI(Nullable<long> practice_Code, Nullable<long> provider_Code, Nullable<System.DateTime> date_From, Nullable<System.DateTime> date_To, string date_Type, string batch_type, string sub_type)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        var provider_CodeParameter = provider_Code.HasValue ?
            new ObjectParameter("Provider_Code", provider_Code) :
            new ObjectParameter("Provider_Code", typeof(long));


        var date_FromParameter = date_From.HasValue ?
            new ObjectParameter("Date_From", date_From) :
            new ObjectParameter("Date_From", typeof(System.DateTime));


        var date_ToParameter = date_To.HasValue ?
            new ObjectParameter("Date_To", date_To) :
            new ObjectParameter("Date_To", typeof(System.DateTime));


        var date_TypeParameter = date_Type != null ?
            new ObjectParameter("Date_Type", date_Type) :
            new ObjectParameter("Date_Type", typeof(string));


        var batch_typeParameter = batch_type != null ?
            new ObjectParameter("batch_type", batch_type) :
            new ObjectParameter("batch_type", typeof(string));


        var sub_typeParameter = sub_type != null ?
            new ObjectParameter("Sub_type", sub_type) :
            new ObjectParameter("Sub_type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_getBatchHistory_EDI_Result>("sp_getBatchHistory_EDI", practice_CodeParameter, provider_CodeParameter, date_FromParameter, date_ToParameter, date_TypeParameter, batch_typeParameter, sub_typeParameter);
    }


    public virtual ObjectResult<GetBatchClaimsDetails_Result> GetBatchClaimsDetails(Nullable<long> batchId)
    {

        var batchIdParameter = batchId.HasValue ?
            new ObjectParameter("BatchId", batchId) :
            new ObjectParameter("BatchId", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBatchClaimsDetails_Result>("GetBatchClaimsDetails", batchIdParameter);
    }


    public virtual ObjectResult<SP_GetBatchDetail1_Result> SP_GetBatchDetail1(Nullable<long> practiceCode, Nullable<long> providerCode)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBatchDetail1_Result>("SP_GetBatchDetail1", practiceCodeParameter, providerCodeParameter);
    }


    public virtual ObjectResult<SP_GetBatchDetail_EDI_Result> SP_GetBatchDetail_EDI(Nullable<long> practiceCode, Nullable<long> providerCode, string type)
    {

        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        var providerCodeParameter = providerCode.HasValue ?
            new ObjectParameter("ProviderCode", providerCode) :
            new ObjectParameter("ProviderCode", typeof(long));


        var typeParameter = type != null ?
            new ObjectParameter("type", type) :
            new ObjectParameter("type", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBatchDetail_EDI_Result>("SP_GetBatchDetail_EDI", practiceCodeParameter, providerCodeParameter, typeParameter);
    }


    public virtual ObjectResult<SP_ClaimsSearch_EDI_Result> SP_ClaimsSearch_EDI(Nullable<System.DateTime> dos_from, Nullable<System.DateTime> dos_to, string patient_account, string billing_physician, string location_code, Nullable<bool> icd9_claim, string type, string billedTo, string status, string insurance_id, Nullable<long> practice_code)
    {

        var dos_fromParameter = dos_from.HasValue ?
            new ObjectParameter("dos_from", dos_from) :
            new ObjectParameter("dos_from", typeof(System.DateTime));


        var dos_toParameter = dos_to.HasValue ?
            new ObjectParameter("dos_to", dos_to) :
            new ObjectParameter("dos_to", typeof(System.DateTime));


        var patient_accountParameter = patient_account != null ?
            new ObjectParameter("patient_account", patient_account) :
            new ObjectParameter("patient_account", typeof(string));


        var billing_physicianParameter = billing_physician != null ?
            new ObjectParameter("billing_physician", billing_physician) :
            new ObjectParameter("billing_physician", typeof(string));


        var location_codeParameter = location_code != null ?
            new ObjectParameter("location_code", location_code) :
            new ObjectParameter("location_code", typeof(string));


        var icd9_claimParameter = icd9_claim.HasValue ?
            new ObjectParameter("icd9_claim", icd9_claim) :
            new ObjectParameter("icd9_claim", typeof(bool));


        var typeParameter = type != null ?
            new ObjectParameter("type", type) :
            new ObjectParameter("type", typeof(string));


        var billedToParameter = billedTo != null ?
            new ObjectParameter("billedTo", billedTo) :
            new ObjectParameter("billedTo", typeof(string));


        var statusParameter = status != null ?
            new ObjectParameter("status", status) :
            new ObjectParameter("status", typeof(string));


        var insurance_idParameter = insurance_id != null ?
            new ObjectParameter("insurance_id", insurance_id) :
            new ObjectParameter("insurance_id", typeof(string));


        var practice_codeParameter = practice_code.HasValue ?
            new ObjectParameter("practice_code", practice_code) :
            new ObjectParameter("practice_code", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ClaimsSearch_EDI_Result>("SP_ClaimsSearch_EDI", dos_fromParameter, dos_toParameter, patient_accountParameter, billing_physicianParameter, location_codeParameter, icd9_claimParameter, typeParameter, billedToParameter, statusParameter, insurance_idParameter, practice_codeParameter);
    }


    public virtual ObjectResult<SP_Claim_Batch_Exception_EDI_Result> SP_Claim_Batch_Exception_EDI(Nullable<long> practice_Code, Nullable<long> provider_Code, Nullable<long> batch_Id, Nullable<System.DateTime> date_From, Nullable<System.DateTime> date_To, string batchtype)
    {

        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        var provider_CodeParameter = provider_Code.HasValue ?
            new ObjectParameter("Provider_Code", provider_Code) :
            new ObjectParameter("Provider_Code", typeof(long));


        var batch_IdParameter = batch_Id.HasValue ?
            new ObjectParameter("Batch_Id", batch_Id) :
            new ObjectParameter("Batch_Id", typeof(long));


        var date_FromParameter = date_From.HasValue ?
            new ObjectParameter("Date_From", date_From) :
            new ObjectParameter("Date_From", typeof(System.DateTime));


        var date_ToParameter = date_To.HasValue ?
            new ObjectParameter("Date_To", date_To) :
            new ObjectParameter("Date_To", typeof(System.DateTime));


        var batchtypeParameter = batchtype != null ?
            new ObjectParameter("batchtype", batchtype) :
            new ObjectParameter("batchtype", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Claim_Batch_Exception_EDI_Result>("SP_Claim_Batch_Exception_EDI", practice_CodeParameter, provider_CodeParameter, batch_IdParameter, date_FromParameter, date_ToParameter, batchtypeParameter);
    }


    public virtual ObjectResult<USP_CheckMedicareClaim_Result> USP_CheckMedicareClaim(Nullable<long> claim_id, Nullable<long> insuranceid)
    {

        var claim_idParameter = claim_id.HasValue ?
            new ObjectParameter("claim_id", claim_id) :
            new ObjectParameter("claim_id", typeof(long));


        var insuranceidParameter = insuranceid.HasValue ?
            new ObjectParameter("insuranceid", insuranceid) :
            new ObjectParameter("insuranceid", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<USP_CheckMedicareClaim_Result>("USP_CheckMedicareClaim", claim_idParameter, insuranceidParameter);
    }


    public virtual ObjectResult<usp_GetTicketsWithFilters_Result> usp_GetTicketsWithFilters(Nullable<long> ticket_Id, string ticket_Type, string ticket_Reason, string ticket_Priority, Nullable<long> practice_Code, string ticket_Status, Nullable<int> department_Id, Nullable<long> created_By, Nullable<long> assigned_User, string payer_Name, string claim_No, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
    {

        var ticket_IdParameter = ticket_Id.HasValue ?
            new ObjectParameter("Ticket_Id", ticket_Id) :
            new ObjectParameter("Ticket_Id", typeof(long));


        var ticket_TypeParameter = ticket_Type != null ?
            new ObjectParameter("Ticket_Type", ticket_Type) :
            new ObjectParameter("Ticket_Type", typeof(string));


        var ticket_ReasonParameter = ticket_Reason != null ?
            new ObjectParameter("Ticket_Reason", ticket_Reason) :
            new ObjectParameter("Ticket_Reason", typeof(string));


        var ticket_PriorityParameter = ticket_Priority != null ?
            new ObjectParameter("Ticket_Priority", ticket_Priority) :
            new ObjectParameter("Ticket_Priority", typeof(string));


        var practice_CodeParameter = practice_Code.HasValue ?
            new ObjectParameter("Practice_Code", practice_Code) :
            new ObjectParameter("Practice_Code", typeof(long));


        var ticket_StatusParameter = ticket_Status != null ?
            new ObjectParameter("Ticket_Status", ticket_Status) :
            new ObjectParameter("Ticket_Status", typeof(string));


        var department_IdParameter = department_Id.HasValue ?
            new ObjectParameter("Department_Id", department_Id) :
            new ObjectParameter("Department_Id", typeof(int));


        var created_ByParameter = created_By.HasValue ?
            new ObjectParameter("Created_By", created_By) :
            new ObjectParameter("Created_By", typeof(long));


        var assigned_UserParameter = assigned_User.HasValue ?
            new ObjectParameter("Assigned_User", assigned_User) :
            new ObjectParameter("Assigned_User", typeof(long));


        var payer_NameParameter = payer_Name != null ?
            new ObjectParameter("Payer_Name", payer_Name) :
            new ObjectParameter("Payer_Name", typeof(string));


        var claim_NoParameter = claim_No != null ?
            new ObjectParameter("Claim_No", claim_No) :
            new ObjectParameter("Claim_No", typeof(string));


        var dateFromParameter = dateFrom.HasValue ?
            new ObjectParameter("DateFrom", dateFrom) :
            new ObjectParameter("DateFrom", typeof(System.DateTime));


        var dateToParameter = dateTo.HasValue ?
            new ObjectParameter("DateTo", dateTo) :
            new ObjectParameter("DateTo", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetTicketsWithFilters_Result>("usp_GetTicketsWithFilters", ticket_IdParameter, ticket_TypeParameter, ticket_ReasonParameter, ticket_PriorityParameter, practice_CodeParameter, ticket_StatusParameter, department_IdParameter, created_ByParameter, assigned_UserParameter, payer_NameParameter, claim_NoParameter, dateFromParameter, dateToParameter);
    }


    public virtual ObjectResult<GetPracticeUserReportingDetail_Result> GetPracticeUserReportingDetail(Nullable<long> user_ID, Nullable<long> practiceCode)
    {

        var user_IDParameter = user_ID.HasValue ?
            new ObjectParameter("User_ID", user_ID) :
            new ObjectParameter("User_ID", typeof(long));


        var practiceCodeParameter = practiceCode.HasValue ?
            new ObjectParameter("PracticeCode", practiceCode) :
            new ObjectParameter("PracticeCode", typeof(long));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPracticeUserReportingDetail_Result>("GetPracticeUserReportingDetail", user_IDParameter, practiceCodeParameter);
    }

}

}

